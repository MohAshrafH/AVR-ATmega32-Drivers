
AMIT_Proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004020  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00004020  000040b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800188  00800188  000041dc  2**0
                  ALLOC
  3 .stab         00003a8c  00000000  00000000  000041dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000191e  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009726  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009918  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000bd23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000d0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000e280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000e440  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e736  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 11 	call	0x22b0	; 0x22b0 <main>
      8a:	0c 94 0e 20 	jmp	0x401c	; 0x401c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ff 1f 	jmp	0x3ffe	; 0x3ffe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e7 1f 	jmp	0x3fce	; 0x3fce <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 df 1f 	jmp	0x3fbe	; 0x3fbe <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_voidInitialize>:
#include "./TIMER_private.h"

static void (*TIMER0_CallBack)(void) = NULL;
static void (*TIMER1_CallBack)(void) = NULL;

void TIMER0_voidInitialize(void) {
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
    // Timer0 initialization code...
}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <TIMER1_voidInitialize>:

void TIMER1_voidInitialize(void) {
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
    // Configure Timer1 for CTC mode
    CLR_BIT(TCCR1B, 3);  // WGM12
     e44:	ae e4       	ldi	r26, 0x4E	; 78
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ee e4       	ldi	r30, 0x4E	; 78
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	87 7f       	andi	r24, 0xF7	; 247
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	9c 93       	st	X, r25
     e56:	8e 93       	st	-X, r24
    CLR_BIT(TCCR1A, 0);  // WGM10
     e58:	af e4       	ldi	r26, 0x4F	; 79
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ef e4       	ldi	r30, 0x4F	; 79
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	8e 7f       	andi	r24, 0xFE	; 254
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	9c 93       	st	X, r25
     e6a:	8e 93       	st	-X, r24
    CLR_BIT(TCCR1A, 1);  // WGM11
     e6c:	af e4       	ldi	r26, 0x4F	; 79
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ef e4       	ldi	r30, 0x4F	; 79
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	8d 7f       	andi	r24, 0xFD	; 253
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	9c 93       	st	X, r25
     e7e:	8e 93       	st	-X, r24

    // Prescaler = F_CPU/1024
    SET_BIT(TCCR1B, 2);
     e80:	ae e4       	ldi	r26, 0x4E	; 78
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	ee e4       	ldi	r30, 0x4E	; 78
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	84 60       	ori	r24, 0x04	; 4
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	9c 93       	st	X, r25
     e92:	8e 93       	st	-X, r24
    CLR_BIT(TCCR1B, 1);
     e94:	ae e4       	ldi	r26, 0x4E	; 78
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ee e4       	ldi	r30, 0x4E	; 78
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	8d 7f       	andi	r24, 0xFD	; 253
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	9c 93       	st	X, r25
     ea6:	8e 93       	st	-X, r24
    SET_BIT(TCCR1B, 0);
     ea8:	ae e4       	ldi	r26, 0x4E	; 78
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ee e4       	ldi	r30, 0x4E	; 78
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	81 60       	ori	r24, 0x01	; 1
     eb6:	11 96       	adiw	r26, 0x01	; 1
     eb8:	9c 93       	st	X, r25
     eba:	8e 93       	st	-X, r24

    // Set the OCR1A value for a 100ms interval at 8MHz Clock after prescaling
    // For 100ms: OCR1A = (Timer Clock Frequency / Prescaler * Desired Time) - 1
    // OCR1A = (8e6 / 1024 * 0.1) - 1 = 7811.25 ~ 7811
    OCR1A = 7811;
     ebc:	ea e4       	ldi	r30, 0x4A	; 74
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	83 e8       	ldi	r24, 0x83	; 131
     ec2:	9e e1       	ldi	r25, 0x1E	; 30
     ec4:	91 83       	std	Z+1, r25	; 0x01
     ec6:	80 83       	st	Z, r24

    // Enable Timer1 compare match interrupt
    SET_BIT(TIMSK, OCIE1A);
     ec8:	a9 e5       	ldi	r26, 0x59	; 89
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e9 e5       	ldi	r30, 0x59	; 89
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 61       	ori	r24, 0x10	; 16
     ed4:	8c 93       	st	X, r24
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <TIMER0_voidSetInterval_100ms>:

void TIMER0_voidSetInterval_100ms(void (*Copy_ptr)(void)) {
     edc:	df 93       	push	r29
     ede:	cf 93       	push	r28
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <TIMER0_voidSetInterval_100ms+0x6>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	89 83       	std	Y+1, r24	; 0x01
    // Set the callback function for Timer0
    TIMER0_CallBack = Copy_ptr;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	90 93 89 01 	sts	0x0189, r25
     ef2:	80 93 88 01 	sts	0x0188, r24
}
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <TIMER1_voidSetInterval_100ms>:

void TIMER1_voidSetInterval_100ms(void (*Copy_ptr)(void)) {
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <TIMER1_voidSetInterval_100ms+0x6>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
    // Set the callback function for Timer1
    TIMER1_CallBack = Copy_ptr;
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	90 93 8b 01 	sts	0x018B, r25
     f16:	80 93 8a 01 	sts	0x018A, r24
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <TIMER0_voidStopTimer>:

void TIMER0_voidStopTimer(void) {
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
    // Stop Timer0 by clearing the prescaler bits...
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <TIMER1_voidStopTimer>:

void TIMER1_voidStopTimer(void) {
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
    // Stop Timer1 by clearing the prescaler bits
    CLR_BIT(TCCR1B, 0);
     f3a:	ae e4       	ldi	r26, 0x4E	; 78
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ee e4       	ldi	r30, 0x4E	; 78
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	11 96       	adiw	r26, 0x01	; 1
     f4a:	9c 93       	st	X, r25
     f4c:	8e 93       	st	-X, r24
    CLR_BIT(TCCR1B, 1);
     f4e:	ae e4       	ldi	r26, 0x4E	; 78
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ee e4       	ldi	r30, 0x4E	; 78
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	11 96       	adiw	r26, 0x01	; 1
     f5e:	9c 93       	st	X, r25
     f60:	8e 93       	st	-X, r24
    CLR_BIT(TCCR1B, 2);
     f62:	ae e4       	ldi	r26, 0x4E	; 78
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	ee e4       	ldi	r30, 0x4E	; 78
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	91 81       	ldd	r25, Z+1	; 0x01
     f6e:	8b 7f       	andi	r24, 0xFB	; 251
     f70:	11 96       	adiw	r26, 0x01	; 1
     f72:	9c 93       	st	X, r25
     f74:	8e 93       	st	-X, r24
}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <__vector_10>:

// ISR for Timer0 Compare Match (if using GCC)
ISR(TIMER0_COMP_vect) {
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
    if(TIMER0_CallBack != NULL) {
     fa6:	80 91 88 01 	lds	r24, 0x0188
     faa:	90 91 89 01 	lds	r25, 0x0189
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	29 f0       	breq	.+10     	; 0xfbc <__vector_10+0x40>
        TIMER0_CallBack();
     fb2:	e0 91 88 01 	lds	r30, 0x0188
     fb6:	f0 91 89 01 	lds	r31, 0x0189
     fba:	09 95       	icall
    }
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	ff 91       	pop	r31
     fc2:	ef 91       	pop	r30
     fc4:	bf 91       	pop	r27
     fc6:	af 91       	pop	r26
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	7f 91       	pop	r23
     fce:	6f 91       	pop	r22
     fd0:	5f 91       	pop	r21
     fd2:	4f 91       	pop	r20
     fd4:	3f 91       	pop	r19
     fd6:	2f 91       	pop	r18
     fd8:	0f 90       	pop	r0
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	0f 90       	pop	r0
     fde:	1f 90       	pop	r1
     fe0:	18 95       	reti

00000fe2 <__vector_7>:

// ISR for Timer1 Compare Match A (if using GCC)
ISR(TIMER1_COMPA_vect) {
     fe2:	1f 92       	push	r1
     fe4:	0f 92       	push	r0
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	0f 92       	push	r0
     fea:	11 24       	eor	r1, r1
     fec:	2f 93       	push	r18
     fee:	3f 93       	push	r19
     ff0:	4f 93       	push	r20
     ff2:	5f 93       	push	r21
     ff4:	6f 93       	push	r22
     ff6:	7f 93       	push	r23
     ff8:	8f 93       	push	r24
     ffa:	9f 93       	push	r25
     ffc:	af 93       	push	r26
     ffe:	bf 93       	push	r27
    1000:	ef 93       	push	r30
    1002:	ff 93       	push	r31
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    if(TIMER1_CallBack != NULL) {
    100c:	80 91 8a 01 	lds	r24, 0x018A
    1010:	90 91 8b 01 	lds	r25, 0x018B
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	29 f0       	breq	.+10     	; 0x1022 <__vector_7+0x40>
        TIMER1_CallBack();
    1018:	e0 91 8a 01 	lds	r30, 0x018A
    101c:	f0 91 8b 01 	lds	r31, 0x018B
    1020:	09 95       	icall
    }
}
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	ff 91       	pop	r31
    1028:	ef 91       	pop	r30
    102a:	bf 91       	pop	r27
    102c:	af 91       	pop	r26
    102e:	9f 91       	pop	r25
    1030:	8f 91       	pop	r24
    1032:	7f 91       	pop	r23
    1034:	6f 91       	pop	r22
    1036:	5f 91       	pop	r21
    1038:	4f 91       	pop	r20
    103a:	3f 91       	pop	r19
    103c:	2f 91       	pop	r18
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <DIO_setPinDirection>:
 *     - PinId: The pin number within the group (e.g., DIO_PIN0).
 *     - PinDirection: The desired direction of the pin (input or output).
 * Returns: void
 */
void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <DIO_setPinDirection+0x6>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <DIO_setPinDirection+0x8>
    1050:	0f 92       	push	r0
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	89 83       	std	Y+1, r24	; 0x01
    1058:	6a 83       	std	Y+2, r22	; 0x02
    105a:	4b 83       	std	Y+3, r20	; 0x03
	if((PortId<=3)&&(PinId<=7)&&((DIO_PIN_OUTPUT==PinDirection)||(DIO_PIN_INPUT==PinDirection)))
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	84 30       	cpi	r24, 0x04	; 4
    1060:	08 f0       	brcs	.+2      	; 0x1064 <DIO_setPinDirection+0x1c>
    1062:	d4 c0       	rjmp	.+424    	; 0x120c <DIO_setPinDirection+0x1c4>
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	88 30       	cpi	r24, 0x08	; 8
    1068:	08 f0       	brcs	.+2      	; 0x106c <DIO_setPinDirection+0x24>
    106a:	d0 c0       	rjmp	.+416    	; 0x120c <DIO_setPinDirection+0x1c4>
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	21 f0       	breq	.+8      	; 0x107a <DIO_setPinDirection+0x32>
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	88 23       	and	r24, r24
    1076:	09 f0       	breq	.+2      	; 0x107a <DIO_setPinDirection+0x32>
    1078:	c9 c0       	rjmp	.+402    	; 0x120c <DIO_setPinDirection+0x1c4>
	{
		switch(PortId)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3d 83       	std	Y+5, r19	; 0x05
    1082:	2c 83       	std	Y+4, r18	; 0x04
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <DIO_setPinDirection+0x48>
    108e:	41 c0       	rjmp	.+130    	; 0x1112 <DIO_setPinDirection+0xca>
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	2c f4       	brge	.+10     	; 0x10a4 <DIO_setPinDirection+0x5c>
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	71 f0       	breq	.+28     	; 0x10be <DIO_setPinDirection+0x76>
    10a2:	b4 c0       	rjmp	.+360    	; 0x120c <DIO_setPinDirection+0x1c4>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <DIO_setPinDirection+0x68>
    10ae:	5b c0       	rjmp	.+182    	; 0x1166 <DIO_setPinDirection+0x11e>
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	9d 81       	ldd	r25, Y+5	; 0x05
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <DIO_setPinDirection+0x74>
    10ba:	7f c0       	rjmp	.+254    	; 0x11ba <DIO_setPinDirection+0x172>
    10bc:	a7 c0       	rjmp	.+334    	; 0x120c <DIO_setPinDirection+0x1c4>
		{
		case DIO_PORTA:
			if(DIO_PIN_OUTPUT == PinDirection)
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	99 f4       	brne	.+38     	; 0x10ea <DIO_setPinDirection+0xa2>
			{
				SET_BIT(DDRA,PinId);
    10c4:	aa e3       	ldi	r26, 0x3A	; 58
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	40 81       	ld	r20, Z
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_setPinDirection+0x98>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_setPinDirection+0x94>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	91 c0       	rjmp	.+290    	; 0x120c <DIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_BIT(DDRA,PinId);
    10ea:	aa e3       	ldi	r26, 0x3A	; 58
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	ea e3       	ldi	r30, 0x3A	; 58
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	40 81       	ld	r20, Z
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_setPinDirection+0xbe>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_setPinDirection+0xba>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	7d c0       	rjmp	.+250    	; 0x120c <DIO_setPinDirection+0x1c4>
			}
			break;

		case DIO_PORTB:
			if(DIO_PIN_OUTPUT == PinDirection)
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	99 f4       	brne	.+38     	; 0x113e <DIO_setPinDirection+0xf6>
			{
				SET_BIT(DDRB,PinId);
    1118:	a7 e3       	ldi	r26, 0x37	; 55
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e7 e3       	ldi	r30, 0x37	; 55
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	40 81       	ld	r20, Z
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_setPinDirection+0xec>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_setPinDirection+0xe8>
    1138:	84 2b       	or	r24, r20
    113a:	8c 93       	st	X, r24
    113c:	67 c0       	rjmp	.+206    	; 0x120c <DIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_BIT(DDRB,PinId);
    113e:	a7 e3       	ldi	r26, 0x37	; 55
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e7 e3       	ldi	r30, 0x37	; 55
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	40 81       	ld	r20, Z
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_setPinDirection+0x112>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_setPinDirection+0x10e>
    115e:	80 95       	com	r24
    1160:	84 23       	and	r24, r20
    1162:	8c 93       	st	X, r24
    1164:	53 c0       	rjmp	.+166    	; 0x120c <DIO_setPinDirection+0x1c4>
			}
			break;

		case DIO_PORTC:
			if(DIO_PIN_OUTPUT == PinDirection)
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	99 f4       	brne	.+38     	; 0x1192 <DIO_setPinDirection+0x14a>
			{
				SET_BIT(DDRC,PinId);
    116c:	a4 e3       	ldi	r26, 0x34	; 52
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e4 e3       	ldi	r30, 0x34	; 52
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	40 81       	ld	r20, Z
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_setPinDirection+0x140>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_setPinDirection+0x13c>
    118c:	84 2b       	or	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	3d c0       	rjmp	.+122    	; 0x120c <DIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_BIT(DDRC,PinId);
    1192:	a4 e3       	ldi	r26, 0x34	; 52
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e4 e3       	ldi	r30, 0x34	; 52
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	40 81       	ld	r20, Z
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <DIO_setPinDirection+0x166>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <DIO_setPinDirection+0x162>
    11b2:	80 95       	com	r24
    11b4:	84 23       	and	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	29 c0       	rjmp	.+82     	; 0x120c <DIO_setPinDirection+0x1c4>
			}
			break;

		case DIO_PORTD:
			if(DIO_PIN_OUTPUT == PinDirection)
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	99 f4       	brne	.+38     	; 0x11e6 <DIO_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,PinId);
    11c0:	a1 e3       	ldi	r26, 0x31	; 49
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e1 e3       	ldi	r30, 0x31	; 49
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	40 81       	ld	r20, Z
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <DIO_setPinDirection+0x194>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <DIO_setPinDirection+0x190>
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <DIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_BIT(DDRD,PinId);
    11e6:	a1 e3       	ldi	r26, 0x31	; 49
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e1 e3       	ldi	r30, 0x31	; 49
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	40 81       	ld	r20, Z
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_setPinDirection+0x1ba>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_setPinDirection+0x1b6>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24

	else
	{
		// Do Nothing
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_setPinValue>:
 *     - PinId: The pin number within the group (e.g., DIO_PIN0).
 *     - PinValue: The desired output value (high or low).
 * Returns: void
 */
void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_setPinValue+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_setPinValue+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	6a 83       	std	Y+2, r22	; 0x02
    122e:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3d 83       	std	Y+5, r19	; 0x05
    1238:	2c 83       	std	Y+4, r18	; 0x04
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <DIO_setPinValue+0x2a>
    1244:	41 c0       	rjmp	.+130    	; 0x12c8 <DIO_setPinValue+0xac>
    1246:	2c 81       	ldd	r18, Y+4	; 0x04
    1248:	3d 81       	ldd	r19, Y+5	; 0x05
    124a:	22 30       	cpi	r18, 0x02	; 2
    124c:	31 05       	cpc	r19, r1
    124e:	2c f4       	brge	.+10     	; 0x125a <DIO_setPinValue+0x3e>
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	71 f0       	breq	.+28     	; 0x1274 <DIO_setPinValue+0x58>
    1258:	b4 c0       	rjmp	.+360    	; 0x13c2 <DIO_setPinValue+0x1a6>
    125a:	2c 81       	ldd	r18, Y+4	; 0x04
    125c:	3d 81       	ldd	r19, Y+5	; 0x05
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	09 f4       	brne	.+2      	; 0x1266 <DIO_setPinValue+0x4a>
    1264:	5b c0       	rjmp	.+182    	; 0x131c <DIO_setPinValue+0x100>
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
    1268:	9d 81       	ldd	r25, Y+5	; 0x05
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <DIO_setPinValue+0x56>
    1270:	7f c0       	rjmp	.+254    	; 0x1370 <DIO_setPinValue+0x154>
    1272:	a7 c0       	rjmp	.+334    	; 0x13c2 <DIO_setPinValue+0x1a6>
	{
	case DIO_PORTA:
		if(DIO_PIN_HIGH == PinValue)
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	99 f4       	brne	.+38     	; 0x12a0 <DIO_setPinValue+0x84>
		{
			SET_BIT(PORTA,PinId);
    127a:	ab e3       	ldi	r26, 0x3B	; 59
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	40 81       	ld	r20, Z
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_setPinValue+0x7a>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_setPinValue+0x76>
    129a:	84 2b       	or	r24, r20
    129c:	8c 93       	st	X, r24
    129e:	91 c0       	rjmp	.+290    	; 0x13c2 <DIO_setPinValue+0x1a6>
		}
		else
		{
			CLR_BIT(PORTA,PinId);
    12a0:	ab e3       	ldi	r26, 0x3B	; 59
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	eb e3       	ldi	r30, 0x3B	; 59
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	40 81       	ld	r20, Z
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_setPinValue+0xa0>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_setPinValue+0x9c>
    12c0:	80 95       	com	r24
    12c2:	84 23       	and	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	7d c0       	rjmp	.+250    	; 0x13c2 <DIO_setPinValue+0x1a6>
		}
		break;

	case DIO_PORTB:
		if(DIO_PIN_HIGH == PinValue)
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	99 f4       	brne	.+38     	; 0x12f4 <DIO_setPinValue+0xd8>
		{
			SET_BIT(PORTB,PinId);
    12ce:	a8 e3       	ldi	r26, 0x38	; 56
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e8 e3       	ldi	r30, 0x38	; 56
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	40 81       	ld	r20, Z
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_setPinValue+0xce>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_setPinValue+0xca>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	67 c0       	rjmp	.+206    	; 0x13c2 <DIO_setPinValue+0x1a6>
		}
		else
		{
			CLR_BIT(PORTB,PinId);
    12f4:	a8 e3       	ldi	r26, 0x38	; 56
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e8 e3       	ldi	r30, 0x38	; 56
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	40 81       	ld	r20, Z
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_setPinValue+0xf4>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_setPinValue+0xf0>
    1314:	80 95       	com	r24
    1316:	84 23       	and	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	53 c0       	rjmp	.+166    	; 0x13c2 <DIO_setPinValue+0x1a6>
		}
		break;

	case DIO_PORTC:
		if(DIO_PIN_HIGH == PinValue)
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	99 f4       	brne	.+38     	; 0x1348 <DIO_setPinValue+0x12c>
		{
			SET_BIT(PORTC,PinId);
    1322:	a5 e3       	ldi	r26, 0x35	; 53
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e5 e3       	ldi	r30, 0x35	; 53
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	40 81       	ld	r20, Z
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_setPinValue+0x122>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_setPinValue+0x11e>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	3d c0       	rjmp	.+122    	; 0x13c2 <DIO_setPinValue+0x1a6>
		}
		else
		{
			CLR_BIT(PORTC,PinId);
    1348:	a5 e3       	ldi	r26, 0x35	; 53
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e3       	ldi	r30, 0x35	; 53
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	40 81       	ld	r20, Z
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_setPinValue+0x148>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_setPinValue+0x144>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	29 c0       	rjmp	.+82     	; 0x13c2 <DIO_setPinValue+0x1a6>
		}
		break;

	case DIO_PORTD:
		if(DIO_PIN_HIGH == PinValue)
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	99 f4       	brne	.+38     	; 0x139c <DIO_setPinValue+0x180>
		{
			SET_BIT(PORTD,PinId);
    1376:	a2 e3       	ldi	r26, 0x32	; 50
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e2 e3       	ldi	r30, 0x32	; 50
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	40 81       	ld	r20, Z
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <DIO_setPinValue+0x176>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <DIO_setPinValue+0x172>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	13 c0       	rjmp	.+38     	; 0x13c2 <DIO_setPinValue+0x1a6>
		}
		else
		{
			CLR_BIT(PORTD,PinId);
    139c:	a2 e3       	ldi	r26, 0x32	; 50
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e2 e3       	ldi	r30, 0x32	; 50
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	40 81       	ld	r20, Z
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_setPinValue+0x19c>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <DIO_setPinValue+0x198>
    13bc:	80 95       	com	r24
    13be:	84 23       	and	r24, r20
    13c0:	8c 93       	st	X, r24
		}
		break;
	}
}
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <DIO_getPinValue>:
 *     - PinId: The pin number within the group (e.g., DIO_PIN0).
 *     - PinValue: Pointer to store the read value (high or low).
 * Returns: void
 */
void DIO_getPinValue(u8 PortId, u8 PinId, u8* PinValue)
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <DIO_getPinValue+0x6>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <DIO_getPinValue+0x8>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <DIO_getPinValue+0xa>
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	6a 83       	std	Y+2, r22	; 0x02
    13e4:	5c 83       	std	Y+4, r21	; 0x04
    13e6:	4b 83       	std	Y+3, r20	; 0x03
	switch(PortId)
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3e 83       	std	Y+6, r19	; 0x06
    13f0:	2d 83       	std	Y+5, r18	; 0x05
    13f2:	4d 81       	ldd	r20, Y+5	; 0x05
    13f4:	5e 81       	ldd	r21, Y+6	; 0x06
    13f6:	41 30       	cpi	r20, 0x01	; 1
    13f8:	51 05       	cpc	r21, r1
    13fa:	59 f1       	breq	.+86     	; 0x1452 <DIO_getPinValue+0x80>
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	91 05       	cpc	r25, r1
    1404:	34 f4       	brge	.+12     	; 0x1412 <DIO_getPinValue+0x40>
    1406:	2d 81       	ldd	r18, Y+5	; 0x05
    1408:	3e 81       	ldd	r19, Y+6	; 0x06
    140a:	21 15       	cp	r18, r1
    140c:	31 05       	cpc	r19, r1
    140e:	69 f0       	breq	.+26     	; 0x142a <DIO_getPinValue+0x58>
    1410:	5b c0       	rjmp	.+182    	; 0x14c8 <DIO_getPinValue+0xf6>
    1412:	4d 81       	ldd	r20, Y+5	; 0x05
    1414:	5e 81       	ldd	r21, Y+6	; 0x06
    1416:	42 30       	cpi	r20, 0x02	; 2
    1418:	51 05       	cpc	r21, r1
    141a:	79 f1       	breq	.+94     	; 0x147a <DIO_getPinValue+0xa8>
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	91 05       	cpc	r25, r1
    1424:	09 f4       	brne	.+2      	; 0x1428 <DIO_getPinValue+0x56>
    1426:	3d c0       	rjmp	.+122    	; 0x14a2 <DIO_getPinValue+0xd0>
    1428:	4f c0       	rjmp	.+158    	; 0x14c8 <DIO_getPinValue+0xf6>
	{
	case DIO_PORTA:
		*PinValue = GET_BIT(PINA,PinId);
    142a:	e9 e3       	ldi	r30, 0x39	; 57
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a9 01       	movw	r20, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_getPinValue+0x70>
    143e:	55 95       	asr	r21
    1440:	47 95       	ror	r20
    1442:	8a 95       	dec	r24
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_getPinValue+0x6c>
    1446:	ca 01       	movw	r24, r20
    1448:	81 70       	andi	r24, 0x01	; 1
    144a:	eb 81       	ldd	r30, Y+3	; 0x03
    144c:	fc 81       	ldd	r31, Y+4	; 0x04
    144e:	80 83       	st	Z, r24
    1450:	3b c0       	rjmp	.+118    	; 0x14c8 <DIO_getPinValue+0xf6>
		break;

	case DIO_PORTB:
		*PinValue = GET_BIT(PINB,PinId);
    1452:	e6 e3       	ldi	r30, 0x36	; 54
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_getPinValue+0x98>
    1466:	55 95       	asr	r21
    1468:	47 95       	ror	r20
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_getPinValue+0x94>
    146e:	ca 01       	movw	r24, r20
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	eb 81       	ldd	r30, Y+3	; 0x03
    1474:	fc 81       	ldd	r31, Y+4	; 0x04
    1476:	80 83       	st	Z, r24
    1478:	27 c0       	rjmp	.+78     	; 0x14c8 <DIO_getPinValue+0xf6>
		break;

	case DIO_PORTC:
		*PinValue = GET_BIT(PINC,PinId);
    147a:	e3 e3       	ldi	r30, 0x33	; 51
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a9 01       	movw	r20, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_getPinValue+0xc0>
    148e:	55 95       	asr	r21
    1490:	47 95       	ror	r20
    1492:	8a 95       	dec	r24
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_getPinValue+0xbc>
    1496:	ca 01       	movw	r24, r20
    1498:	81 70       	andi	r24, 0x01	; 1
    149a:	eb 81       	ldd	r30, Y+3	; 0x03
    149c:	fc 81       	ldd	r31, Y+4	; 0x04
    149e:	80 83       	st	Z, r24
    14a0:	13 c0       	rjmp	.+38     	; 0x14c8 <DIO_getPinValue+0xf6>
		break;

	case DIO_PORTD:
		*PinValue = GET_BIT(PIND,PinId);
    14a2:	e0 e3       	ldi	r30, 0x30	; 48
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	88 2f       	mov	r24, r24
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	a9 01       	movw	r20, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <DIO_getPinValue+0xe8>
    14b6:	55 95       	asr	r21
    14b8:	47 95       	ror	r20
    14ba:	8a 95       	dec	r24
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <DIO_getPinValue+0xe4>
    14be:	ca 01       	movw	r24, r20
    14c0:	81 70       	andi	r24, 0x01	; 1
    14c2:	eb 81       	ldd	r30, Y+3	; 0x03
    14c4:	fc 81       	ldd	r31, Y+4	; 0x04
    14c6:	80 83       	st	Z, r24
		break;
	}
}
    14c8:	26 96       	adiw	r28, 0x06	; 6
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <DIO_togglePinValue>:
 *     - PortId: The identifier of the port group (e.g., DIO_PORTA).
 *     - PinId: The pin number within the group (e.g., DIO_PIN0).
 * Returns: void
 */
void DIO_togglePinValue(u8 PortId, u8 PinId)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <DIO_togglePinValue+0x6>
    14e0:	00 d0       	rcall	.+0      	; 0x14e2 <DIO_togglePinValue+0x8>
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	3c 83       	std	Y+4, r19	; 0x04
    14f2:	2b 83       	std	Y+3, r18	; 0x03
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	9c 81       	ldd	r25, Y+4	; 0x04
    14f8:	81 30       	cpi	r24, 0x01	; 1
    14fa:	91 05       	cpc	r25, r1
    14fc:	41 f1       	breq	.+80     	; 0x154e <DIO_togglePinValue+0x74>
    14fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1500:	3c 81       	ldd	r19, Y+4	; 0x04
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	2c f4       	brge	.+10     	; 0x1512 <DIO_togglePinValue+0x38>
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	61 f0       	breq	.+24     	; 0x1528 <DIO_togglePinValue+0x4e>
    1510:	56 c0       	rjmp	.+172    	; 0x15be <DIO_togglePinValue+0xe4>
    1512:	2b 81       	ldd	r18, Y+3	; 0x03
    1514:	3c 81       	ldd	r19, Y+4	; 0x04
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	61 f1       	breq	.+88     	; 0x1574 <DIO_togglePinValue+0x9a>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	83 30       	cpi	r24, 0x03	; 3
    1522:	91 05       	cpc	r25, r1
    1524:	d1 f1       	breq	.+116    	; 0x159a <DIO_togglePinValue+0xc0>
    1526:	4b c0       	rjmp	.+150    	; 0x15be <DIO_togglePinValue+0xe4>
	{
	case DIO_PORTA:
		TOG_BIT(PORTA,PinId);
    1528:	ab e3       	ldi	r26, 0x3B	; 59
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	eb e3       	ldi	r30, 0x3B	; 59
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	40 81       	ld	r20, Z
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_togglePinValue+0x6a>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_togglePinValue+0x66>
    1548:	84 27       	eor	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	38 c0       	rjmp	.+112    	; 0x15be <DIO_togglePinValue+0xe4>
		break;

	case DIO_PORTB:
		TOG_BIT(PORTB,PinId);
    154e:	a8 e3       	ldi	r26, 0x38	; 56
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e8 e3       	ldi	r30, 0x38	; 56
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	40 81       	ld	r20, Z
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 2e       	mov	r0, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_togglePinValue+0x90>
    1566:	88 0f       	add	r24, r24
    1568:	99 1f       	adc	r25, r25
    156a:	0a 94       	dec	r0
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_togglePinValue+0x8c>
    156e:	84 27       	eor	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	25 c0       	rjmp	.+74     	; 0x15be <DIO_togglePinValue+0xe4>
		break;

	case DIO_PORTC:
		TOG_BIT(PORTC,PinId);
    1574:	a5 e3       	ldi	r26, 0x35	; 53
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e5 e3       	ldi	r30, 0x35	; 53
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	40 81       	ld	r20, Z
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <DIO_togglePinValue+0xb6>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <DIO_togglePinValue+0xb2>
    1594:	84 27       	eor	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	12 c0       	rjmp	.+36     	; 0x15be <DIO_togglePinValue+0xe4>
		break;

	case DIO_PORTD:
		TOG_BIT(PORTD,PinId);
    159a:	a2 e3       	ldi	r26, 0x32	; 50
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e2 e3       	ldi	r30, 0x32	; 50
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	40 81       	ld	r20, Z
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_togglePinValue+0xdc>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_togglePinValue+0xd8>
    15ba:	84 27       	eor	r24, r20
    15bc:	8c 93       	st	X, r24
		break;
	}
}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_activePinInPullUpResistance>:
 *     - PortId: The identifier of the port group (e.g., DIO_PORTA).
 *     - PinId: The pin number within the group (e.g., DIO_PIN0).
 * Returns: void
 */
void DIO_activePinInPullUpResistance(u8 PortId, u8 PinId)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <DIO_activePinInPullUpResistance+0x6>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_activePinInPullUpResistance+0x8>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3c 83       	std	Y+4, r19	; 0x04
    15e4:	2b 83       	std	Y+3, r18	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	41 f1       	breq	.+80     	; 0x1640 <DIO_activePinInPullUpResistance+0x74>
    15f0:	2b 81       	ldd	r18, Y+3	; 0x03
    15f2:	3c 81       	ldd	r19, Y+4	; 0x04
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <DIO_activePinInPullUpResistance+0x38>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_activePinInPullUpResistance+0x4e>
    1602:	56 c0       	rjmp	.+172    	; 0x16b0 <DIO_activePinInPullUpResistance+0xe4>
    1604:	2b 81       	ldd	r18, Y+3	; 0x03
    1606:	3c 81       	ldd	r19, Y+4	; 0x04
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	61 f1       	breq	.+88     	; 0x1666 <DIO_activePinInPullUpResistance+0x9a>
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	d1 f1       	breq	.+116    	; 0x168c <DIO_activePinInPullUpResistance+0xc0>
    1618:	4b c0       	rjmp	.+150    	; 0x16b0 <DIO_activePinInPullUpResistance+0xe4>
	{
	case DIO_PORTA:
		SET_BIT(PORTA,PinId);
    161a:	ab e3       	ldi	r26, 0x3B	; 59
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	eb e3       	ldi	r30, 0x3B	; 59
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	40 81       	ld	r20, Z
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <DIO_activePinInPullUpResistance+0x6a>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <DIO_activePinInPullUpResistance+0x66>
    163a:	84 2b       	or	r24, r20
    163c:	8c 93       	st	X, r24
    163e:	38 c0       	rjmp	.+112    	; 0x16b0 <DIO_activePinInPullUpResistance+0xe4>
		break;

	case DIO_PORTB:
		SET_BIT(PORTB,PinId);
    1640:	a8 e3       	ldi	r26, 0x38	; 56
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e8 e3       	ldi	r30, 0x38	; 56
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	40 81       	ld	r20, Z
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_activePinInPullUpResistance+0x90>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_activePinInPullUpResistance+0x8c>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	25 c0       	rjmp	.+74     	; 0x16b0 <DIO_activePinInPullUpResistance+0xe4>
		break;

	case DIO_PORTC:
		SET_BIT(PORTC,PinId);
    1666:	a5 e3       	ldi	r26, 0x35	; 53
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e3       	ldi	r30, 0x35	; 53
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	40 81       	ld	r20, Z
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_activePinInPullUpResistance+0xb6>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_activePinInPullUpResistance+0xb2>
    1686:	84 2b       	or	r24, r20
    1688:	8c 93       	st	X, r24
    168a:	12 c0       	rjmp	.+36     	; 0x16b0 <DIO_activePinInPullUpResistance+0xe4>
		break;

	case DIO_PORTD:
		SET_BIT(PORTD,PinId);
    168c:	a2 e3       	ldi	r26, 0x32	; 50
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e2 e3       	ldi	r30, 0x32	; 50
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	40 81       	ld	r20, Z
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_activePinInPullUpResistance+0xdc>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_activePinInPullUpResistance+0xd8>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
		break;
	}
}
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <DIO_setPortDirection>:
 *
 * Returns:
 *   void - This function returns nothing.
 */
void DIO_setPortDirection(u8 PortId, u8 PortDirection)
{
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <DIO_setPortDirection+0x6>
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <DIO_setPortDirection+0x8>
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	89 83       	std	Y+1, r24	; 0x01
    16cc:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && ((DIO_PORT_OUTPUT == PortDirection) || (DIO_PORT_INPUT == PortDirection)))
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	84 30       	cpi	r24, 0x04	; 4
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <DIO_setPortDirection+0x18>
    16d4:	55 c0       	rjmp	.+170    	; 0x1780 <DIO_setPortDirection+0xc2>
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	8f 3f       	cpi	r24, 0xFF	; 255
    16da:	21 f0       	breq	.+8      	; 0x16e4 <DIO_setPortDirection+0x26>
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 23       	and	r24, r24
    16e0:	09 f0       	breq	.+2      	; 0x16e4 <DIO_setPortDirection+0x26>
    16e2:	4e c0       	rjmp	.+156    	; 0x1780 <DIO_setPortDirection+0xc2>
	{
		switch(PortId)
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3c 83       	std	Y+4, r19	; 0x04
    16ec:	2b 83       	std	Y+3, r18	; 0x03
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	9c 81       	ldd	r25, Y+4	; 0x04
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	91 05       	cpc	r25, r1
    16f6:	09 f1       	breq	.+66     	; 0x173a <DIO_setPortDirection+0x7c>
    16f8:	2b 81       	ldd	r18, Y+3	; 0x03
    16fa:	3c 81       	ldd	r19, Y+4	; 0x04
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	2c f4       	brge	.+10     	; 0x170c <DIO_setPortDirection+0x4e>
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	9c 81       	ldd	r25, Y+4	; 0x04
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	61 f0       	breq	.+24     	; 0x1722 <DIO_setPortDirection+0x64>
    170a:	3a c0       	rjmp	.+116    	; 0x1780 <DIO_setPortDirection+0xc2>
    170c:	2b 81       	ldd	r18, Y+3	; 0x03
    170e:	3c 81       	ldd	r19, Y+4	; 0x04
    1710:	22 30       	cpi	r18, 0x02	; 2
    1712:	31 05       	cpc	r19, r1
    1714:	f1 f0       	breq	.+60     	; 0x1752 <DIO_setPortDirection+0x94>
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	9c 81       	ldd	r25, Y+4	; 0x04
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	91 05       	cpc	r25, r1
    171e:	29 f1       	breq	.+74     	; 0x176a <DIO_setPortDirection+0xac>
    1720:	2f c0       	rjmp	.+94     	; 0x1780 <DIO_setPortDirection+0xc2>
		{
		case 0:
			if(DIO_PORT_OUTPUT == PortDirection)
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	8f 3f       	cpi	r24, 0xFF	; 255
    1726:	29 f4       	brne	.+10     	; 0x1732 <DIO_setPortDirection+0x74>
			{
				DDRA = 0xff;
    1728:	ea e3       	ldi	r30, 0x3A	; 58
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	80 83       	st	Z, r24
    1730:	27 c0       	rjmp	.+78     	; 0x1780 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRA = 0x00;
    1732:	ea e3       	ldi	r30, 0x3A	; 58
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	10 82       	st	Z, r1
    1738:	23 c0       	rjmp	.+70     	; 0x1780 <DIO_setPortDirection+0xc2>
			}
			break;

		case 1:
			if(DIO_PORT_OUTPUT == PortDirection)
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	8f 3f       	cpi	r24, 0xFF	; 255
    173e:	29 f4       	brne	.+10     	; 0x174a <DIO_setPortDirection+0x8c>
			{
				DDRB = 0xff;
    1740:	e7 e3       	ldi	r30, 0x37	; 55
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	8f ef       	ldi	r24, 0xFF	; 255
    1746:	80 83       	st	Z, r24
    1748:	1b c0       	rjmp	.+54     	; 0x1780 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRB = 0x00;
    174a:	e7 e3       	ldi	r30, 0x37	; 55
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	10 82       	st	Z, r1
    1750:	17 c0       	rjmp	.+46     	; 0x1780 <DIO_setPortDirection+0xc2>
			}
			break;

		case 2:
			if(DIO_PORT_OUTPUT == PortDirection)
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	8f 3f       	cpi	r24, 0xFF	; 255
    1756:	29 f4       	brne	.+10     	; 0x1762 <DIO_setPortDirection+0xa4>
			{
				DDRC = 0xff;
    1758:	e4 e3       	ldi	r30, 0x34	; 52
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	80 83       	st	Z, r24
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRC = 0x00;
    1762:	e4 e3       	ldi	r30, 0x34	; 52
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	10 82       	st	Z, r1
    1768:	0b c0       	rjmp	.+22     	; 0x1780 <DIO_setPortDirection+0xc2>
			}
			break;

		case 3:
			if(DIO_PORT_OUTPUT == PortDirection)
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	8f 3f       	cpi	r24, 0xFF	; 255
    176e:	29 f4       	brne	.+10     	; 0x177a <DIO_setPortDirection+0xbc>
			{
				DDRD = 0xff;
    1770:	e1 e3       	ldi	r30, 0x31	; 49
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	8f ef       	ldi	r24, 0xFF	; 255
    1776:	80 83       	st	Z, r24
    1778:	03 c0       	rjmp	.+6      	; 0x1780 <DIO_setPortDirection+0xc2>
			}
			else
			{
				DDRD = 0x00;
    177a:	e1 e3       	ldi	r30, 0x31	; 49
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	10 82       	st	Z, r1
			}
			break;
		}
	}
}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <DIO_setPortValue>:
 *
 * Returns:
 *   void - This function returns nothing.
 */
void DIO_setPortValue(u8 PortId, u8 PortValue)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <DIO_setPortValue+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <DIO_setPortValue+0x8>
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	6a 83       	std	Y+2, r22	; 0x02
	if(PortId<=3)
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	90 f5       	brcc	.+100    	; 0x1808 <DIO_setPortValue+0x7a>
	{
		switch(PortId)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	3c 83       	std	Y+4, r19	; 0x04
    17ac:	2b 83       	std	Y+3, r18	; 0x03
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	91 05       	cpc	r25, r1
    17b6:	d1 f0       	breq	.+52     	; 0x17ec <DIO_setPortValue+0x5e>
    17b8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ba:	3c 81       	ldd	r19, Y+4	; 0x04
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	2c f4       	brge	.+10     	; 0x17cc <DIO_setPortValue+0x3e>
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	00 97       	sbiw	r24, 0x00	; 0
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <DIO_setPortValue+0x54>
    17ca:	1e c0       	rjmp	.+60     	; 0x1808 <DIO_setPortValue+0x7a>
    17cc:	2b 81       	ldd	r18, Y+3	; 0x03
    17ce:	3c 81       	ldd	r19, Y+4	; 0x04
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <DIO_setPortValue+0x68>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	81 f0       	breq	.+32     	; 0x1800 <DIO_setPortValue+0x72>
    17e0:	13 c0       	rjmp	.+38     	; 0x1808 <DIO_setPortValue+0x7a>
		{
		case 0:
			PORTA = PortValue;
    17e2:	eb e3       	ldi	r30, 0x3B	; 59
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	80 83       	st	Z, r24
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <DIO_setPortValue+0x7a>
			break;

		case 1:
			PORTB = PortValue;
    17ec:	e8 e3       	ldi	r30, 0x38	; 56
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	80 83       	st	Z, r24
    17f4:	09 c0       	rjmp	.+18     	; 0x1808 <DIO_setPortValue+0x7a>
			break;

		case 2:
			PORTC = PortValue;
    17f6:	e5 e3       	ldi	r30, 0x35	; 53
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	80 83       	st	Z, r24
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <DIO_setPortValue+0x7a>
			break;

		case 3:
			PORTD = PortValue;
    1800:	e2 e3       	ldi	r30, 0x32	; 50
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	80 83       	st	Z, r24
			break;
		}
	}
}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <DIO_getPortValue>:
 *
 * Returns:
 *   void - This function returns nothing.
 */
void DIO_getPortValue(u8 PortId, u8* PortValue)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <DIO_getPortValue+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_getPortValue+0x8>
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	7b 83       	std	Y+3, r23	; 0x03
    1828:	6a 83       	std	Y+2, r22	; 0x02
	if((PortId<=3) && (PortValue != 0))
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	84 30       	cpi	r24, 0x04	; 4
    182e:	08 f0       	brcs	.+2      	; 0x1832 <DIO_getPortValue+0x1c>
    1830:	3e c0       	rjmp	.+124    	; 0x18ae <DIO_getPortValue+0x98>
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	9b 81       	ldd	r25, Y+3	; 0x03
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	d1 f1       	breq	.+116    	; 0x18ae <DIO_getPortValue+0x98>
	{
		switch(PortId)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3d 83       	std	Y+5, r19	; 0x05
    1842:	2c 83       	std	Y+4, r18	; 0x04
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	9d 81       	ldd	r25, Y+5	; 0x05
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	91 05       	cpc	r25, r1
    184c:	e1 f0       	breq	.+56     	; 0x1886 <DIO_getPortValue+0x70>
    184e:	2c 81       	ldd	r18, Y+4	; 0x04
    1850:	3d 81       	ldd	r19, Y+5	; 0x05
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	2c f4       	brge	.+10     	; 0x1862 <DIO_getPortValue+0x4c>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	61 f0       	breq	.+24     	; 0x1878 <DIO_getPortValue+0x62>
    1860:	26 c0       	rjmp	.+76     	; 0x18ae <DIO_getPortValue+0x98>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	a1 f0       	breq	.+40     	; 0x1894 <DIO_getPortValue+0x7e>
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 05       	cpc	r25, r1
    1874:	b1 f0       	breq	.+44     	; 0x18a2 <DIO_getPortValue+0x8c>
    1876:	1b c0       	rjmp	.+54     	; 0x18ae <DIO_getPortValue+0x98>
		{
		case 0:
			*PortValue = PINA;
    1878:	e9 e3       	ldi	r30, 0x39	; 57
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	ea 81       	ldd	r30, Y+2	; 0x02
    1880:	fb 81       	ldd	r31, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
    1884:	14 c0       	rjmp	.+40     	; 0x18ae <DIO_getPortValue+0x98>
			break;

		case 1:
			*PortValue = PINB;
    1886:	e6 e3       	ldi	r30, 0x36	; 54
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	ea 81       	ldd	r30, Y+2	; 0x02
    188e:	fb 81       	ldd	r31, Y+3	; 0x03
    1890:	80 83       	st	Z, r24
    1892:	0d c0       	rjmp	.+26     	; 0x18ae <DIO_getPortValue+0x98>
			break;

		case 2:
			*PortValue = PINC;
    1894:	e3 e3       	ldi	r30, 0x33	; 51
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	ea 81       	ldd	r30, Y+2	; 0x02
    189c:	fb 81       	ldd	r31, Y+3	; 0x03
    189e:	80 83       	st	Z, r24
    18a0:	06 c0       	rjmp	.+12     	; 0x18ae <DIO_getPortValue+0x98>
			break;

		case 3:
			*PortValue = PIND;
    18a2:	e0 e3       	ldi	r30, 0x30	; 48
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	ea 81       	ldd	r30, Y+2	; 0x02
    18aa:	fb 81       	ldd	r31, Y+3	; 0x03
    18ac:	80 83       	st	Z, r24
			break;
		}
	}
}
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <DIO_togglePortValue>:
 *
 * Returns:
 *   void - This function returns nothing.
 */
void DIO_togglePortValue(u8 PortId)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <DIO_togglePortValue+0x6>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	84 30       	cpi	r24, 0x04	; 4
    18d0:	08 f0       	brcs	.+2      	; 0x18d4 <DIO_togglePortValue+0x16>
    18d2:	3e c0       	rjmp	.+124    	; 0x1950 <DIO_togglePortValue+0x92>
	{
		switch(PortId)
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	3b 83       	std	Y+3, r19	; 0x03
    18dc:	2a 83       	std	Y+2, r18	; 0x02
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	e9 f0       	breq	.+58     	; 0x1922 <DIO_togglePortValue+0x64>
    18e8:	2a 81       	ldd	r18, Y+2	; 0x02
    18ea:	3b 81       	ldd	r19, Y+3	; 0x03
    18ec:	22 30       	cpi	r18, 0x02	; 2
    18ee:	31 05       	cpc	r19, r1
    18f0:	2c f4       	brge	.+10     	; 0x18fc <DIO_togglePortValue+0x3e>
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	9b 81       	ldd	r25, Y+3	; 0x03
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	61 f0       	breq	.+24     	; 0x1912 <DIO_togglePortValue+0x54>
    18fa:	2a c0       	rjmp	.+84     	; 0x1950 <DIO_togglePortValue+0x92>
    18fc:	2a 81       	ldd	r18, Y+2	; 0x02
    18fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	b1 f0       	breq	.+44     	; 0x1932 <DIO_togglePortValue+0x74>
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	9b 81       	ldd	r25, Y+3	; 0x03
    190a:	83 30       	cpi	r24, 0x03	; 3
    190c:	91 05       	cpc	r25, r1
    190e:	c9 f0       	breq	.+50     	; 0x1942 <DIO_togglePortValue+0x84>
    1910:	1f c0       	rjmp	.+62     	; 0x1950 <DIO_togglePortValue+0x92>
		{
		case 0:
			PORTA = ~PORTA;
    1912:	ab e3       	ldi	r26, 0x3B	; 59
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	eb e3       	ldi	r30, 0x3B	; 59
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	80 95       	com	r24
    191e:	8c 93       	st	X, r24
    1920:	17 c0       	rjmp	.+46     	; 0x1950 <DIO_togglePortValue+0x92>
			break;

		case 1:
			PORTB = ~PORTB;
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	80 95       	com	r24
    192e:	8c 93       	st	X, r24
    1930:	0f c0       	rjmp	.+30     	; 0x1950 <DIO_togglePortValue+0x92>
			break;

		case 2:
			PORTC = ~PORTC;
    1932:	a5 e3       	ldi	r26, 0x35	; 53
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e3       	ldi	r30, 0x35	; 53
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	80 95       	com	r24
    193e:	8c 93       	st	X, r24
    1940:	07 c0       	rjmp	.+14     	; 0x1950 <DIO_togglePortValue+0x92>
			break;

		case 3:
			PORTD = ~PORTD;
    1942:	a2 e3       	ldi	r26, 0x32	; 50
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e2 e3       	ldi	r30, 0x32	; 50
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 95       	com	r24
    194e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <DIO_activePortInPullUpResistance>:
 *
 * Returns:
 *   void - This function returns nothing.
 */
void DIO_activePortInPullUpResistance(u8 PortId)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <DIO_activePortInPullUpResistance+0x6>
    1962:	0f 92       	push	r0
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	89 83       	std	Y+1, r24	; 0x01
	if(PortId<=3)
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	84 30       	cpi	r24, 0x04	; 4
    196e:	90 f5       	brcc	.+100    	; 0x19d4 <DIO_activePortInPullUpResistance+0x78>
	{
		switch(PortId)
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3b 83       	std	Y+3, r19	; 0x03
    1978:	2a 83       	std	Y+2, r18	; 0x02
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	d1 f0       	breq	.+52     	; 0x19b8 <DIO_activePortInPullUpResistance+0x5c>
    1984:	2a 81       	ldd	r18, Y+2	; 0x02
    1986:	3b 81       	ldd	r19, Y+3	; 0x03
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	2c f4       	brge	.+10     	; 0x1998 <DIO_activePortInPullUpResistance+0x3c>
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	9b 81       	ldd	r25, Y+3	; 0x03
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	61 f0       	breq	.+24     	; 0x19ae <DIO_activePortInPullUpResistance+0x52>
    1996:	1e c0       	rjmp	.+60     	; 0x19d4 <DIO_activePortInPullUpResistance+0x78>
    1998:	2a 81       	ldd	r18, Y+2	; 0x02
    199a:	3b 81       	ldd	r19, Y+3	; 0x03
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	81 f0       	breq	.+32     	; 0x19c2 <DIO_activePortInPullUpResistance+0x66>
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	91 05       	cpc	r25, r1
    19aa:	81 f0       	breq	.+32     	; 0x19cc <DIO_activePortInPullUpResistance+0x70>
    19ac:	13 c0       	rjmp	.+38     	; 0x19d4 <DIO_activePortInPullUpResistance+0x78>
		{
		case 0:
			PORTA = 0xff;
    19ae:	eb e3       	ldi	r30, 0x3B	; 59
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	80 83       	st	Z, r24
    19b6:	0e c0       	rjmp	.+28     	; 0x19d4 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 1:
			PORTB = 0xff;
    19b8:	e8 e3       	ldi	r30, 0x38	; 56
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8f ef       	ldi	r24, 0xFF	; 255
    19be:	80 83       	st	Z, r24
    19c0:	09 c0       	rjmp	.+18     	; 0x19d4 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 2:
			PORTC = 0xff;
    19c2:	e5 e3       	ldi	r30, 0x35	; 53
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8f ef       	ldi	r24, 0xFF	; 255
    19c8:	80 83       	st	Z, r24
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <DIO_activePortInPullUpResistance+0x78>
			break;

		case 3:
			PORTD = 0xff;
    19cc:	e2 e3       	ldi	r30, 0x32	; 50
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <DIO_setChannelDirection>:
 *
 * Returns:
 *   void - This function returns nothing.
 */
void DIO_setChannelDirection(Dio_CHANNEL_NUM ChannelId, u8 ChannelDirection)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <DIO_setChannelDirection+0x6>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <DIO_setChannelDirection+0x8>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	8b 83       	std	Y+3, r24	; 0x03
    19ee:	6c 83       	std	Y+4, r22	; 0x04
	//channel 10 --> 10/8 = 1 --> group 1 or PORTB
	u8 Local_u8PortId = ChannelId/8;
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	86 95       	lsr	r24
    19f4:	86 95       	lsr	r24
    19f6:	86 95       	lsr	r24
    19f8:	8a 83       	std	Y+2, r24	; 0x02
	//10%8 = 2 --> pin 2 (group 1 or PORTB)
	u8 Local_u8PinId = ChannelId%8;
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	87 70       	andi	r24, 0x07	; 7
    19fe:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPinDirection(Local_u8PortId, Local_u8PinId, ChannelDirection);
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	69 81       	ldd	r22, Y+1	; 0x01
    1a04:	4c 81       	ldd	r20, Y+4	; 0x04
    1a06:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
}
    1a0a:	0f 90       	pop	r0
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <DIO_setChannelValue>:
 *
 * Returns:
 *   void - This function returns nothing.
 */
void DIO_setChannelValue(Dio_CHANNEL_NUM ChannelId, u8 ChannelValue)
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <DIO_setChannelValue+0x6>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <DIO_setChannelValue+0x8>
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	8b 83       	std	Y+3, r24	; 0x03
    1a26:	6c 83       	std	Y+4, r22	; 0x04
	//channel 10 --> 10/8 = 1 --> group 1 or PORTB
	u8 Local_u8PortId = ChannelId/8;
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	86 95       	lsr	r24
    1a2c:	86 95       	lsr	r24
    1a2e:	86 95       	lsr	r24
    1a30:	8a 83       	std	Y+2, r24	; 0x02
	//10%8 = 2 --> pin 2 (group 1 or PORTB)
	u8 Local_u8PinId = ChannelId%8;
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	87 70       	andi	r24, 0x07	; 7
    1a36:	89 83       	std	Y+1, r24	; 0x01
	DIO_setPinValue(Local_u8PortId, Local_u8PinId, ChannelValue);
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	69 81       	ldd	r22, Y+1	; 0x01
    1a3c:	4c 81       	ldd	r20, Y+4	; 0x04
    1a3e:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <DIO_getChannelValue>:
 *
 * Returns:
 *   void - This function does not return a value. The result is stored in the variable pointed to by ChannelValue.
 */
void DIO_getChannelValue(Dio_CHANNEL_NUM ChannelId, u8* ChannelValue)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <DIO_getChannelValue+0x6>
    1a56:	00 d0       	rcall	.+0      	; 0x1a58 <DIO_getChannelValue+0x8>
    1a58:	0f 92       	push	r0
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
    1a60:	7d 83       	std	Y+5, r23	; 0x05
    1a62:	6c 83       	std	Y+4, r22	; 0x04
	//channel 10 --> 10/8 = 1 --> group 1 or PORTB
	u8 Local_u8PortId = ChannelId/8;
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	86 95       	lsr	r24
    1a68:	86 95       	lsr	r24
    1a6a:	86 95       	lsr	r24
    1a6c:	8a 83       	std	Y+2, r24	; 0x02
	//10%8 = 2 --> pin 2 (group 1 or PORTB)
	u8 Local_u8PinId = ChannelId%8;
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	87 70       	andi	r24, 0x07	; 7
    1a72:	89 83       	std	Y+1, r24	; 0x01
	DIO_getPinValue(Local_u8PortId, Local_u8PinId, ChannelValue);
    1a74:	2c 81       	ldd	r18, Y+4	; 0x04
    1a76:	3d 81       	ldd	r19, Y+5	; 0x05
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	69 81       	ldd	r22, Y+1	; 0x01
    1a7c:	a9 01       	movw	r20, r18
    1a7e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <DIO_getPinValue>
}
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <DIO_toggleChannelValue>:
 *
 * Returns:
 *   void - This function does not return a value.
 */
void DIO_toggleChannelValue(Dio_CHANNEL_NUM ChannelId)
{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <DIO_toggleChannelValue+0x6>
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	8b 83       	std	Y+3, r24	; 0x03
	//channel 10 --> 10/8 = 1 --> group 1 or PORTB
	u8 Local_u8PortId = ChannelId/8;
    1aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa2:	86 95       	lsr	r24
    1aa4:	86 95       	lsr	r24
    1aa6:	86 95       	lsr	r24
    1aa8:	8a 83       	std	Y+2, r24	; 0x02
	//10%8 = 2 --> pin 2 (group 1 or PORTB)
	u8 Local_u8PinId = ChannelId%8;
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	87 70       	andi	r24, 0x07	; 7
    1aae:	89 83       	std	Y+1, r24	; 0x01
	DIO_togglePinValue(Local_u8PortId, Local_u8PinId);
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	69 81       	ldd	r22, Y+1	; 0x01
    1ab4:	0e 94 6d 0a 	call	0x14da	; 0x14da <DIO_togglePinValue>
}
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <DIO_activeChannelInPullUpResistance>:
 *
 * Returns:
 *   void - This function does not return a value.
 */
void DIO_activeChannelInPullUpResistance(Dio_CHANNEL_NUM ChannelId)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <DIO_activeChannelInPullUpResistance+0x6>
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
	//channel 10 --> 10/8 = 1 --> group 1 or PORTB
	u8 Local_u8PortId = ChannelId/8;
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	86 95       	lsr	r24
    1ad6:	86 95       	lsr	r24
    1ad8:	86 95       	lsr	r24
    1ada:	8a 83       	std	Y+2, r24	; 0x02
	//10%8 = 2 --> pin 2 (group 1 or PORTB)
	u8 Local_u8PinId = ChannelId%8;
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	87 70       	andi	r24, 0x07	; 7
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	DIO_activePinInPullUpResistance(Local_u8PortId, Local_u8PinId);
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	69 81       	ldd	r22, Y+1	; 0x01
    1ae6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_activePinInPullUpResistance>
}
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <DIO_initPinsConfig>:
 *
 * Returns:
 *   void - This function does not return a value.
 */
void DIO_initPinsConfig(void)
{
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	0f 92       	push	r0
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	u8 Local_PinCounter;
	for(Local_PinCounter = 0; Local_PinCounter < DIO_TOTAL_PINS; Local_PinCounter++)
    1b00:	19 82       	std	Y+1, r1	; 0x01
    1b02:	0e c0       	rjmp	.+28     	; 0x1b20 <DIO_initPinsConfig+0x2a>
	{
		DIO_setChannelDirection(Local_PinCounter, DIO_PinsConfigArray[Local_PinCounter]);
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	88 2f       	mov	r24, r24
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	e8 59       	subi	r30, 0x98	; 152
    1b0e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b10:	90 81       	ld	r25, Z
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	69 2f       	mov	r22, r25
    1b16:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <DIO_setChannelDirection>
 *   void - This function does not return a value.
 */
void DIO_initPinsConfig(void)
{
	u8 Local_PinCounter;
	for(Local_PinCounter = 0; Local_PinCounter < DIO_TOTAL_PINS; Local_PinCounter++)
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	80 32       	cpi	r24, 0x20	; 32
    1b24:	78 f3       	brcs	.-34     	; 0x1b04 <DIO_initPinsConfig+0xe>
	{
		DIO_setChannelDirection(Local_PinCounter, DIO_PinsConfigArray[Local_PinCounter]);
	}
}
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <ADC_voidInit>:
 *     void - No parameters.
 *
 * Returns:
 *     void - This function does not return a value.
 */
void ADC_voidInit(void) {
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    /* Set the reference voltage and adjust result */
    ADMUX = ADC_VREF | ADC_ADJUST;
    1b36:	e7 e2       	ldi	r30, 0x27	; 39
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 e4       	ldi	r24, 0x40	; 64
    1b3c:	80 83       	st	Z, r24

    /* Enable ADC, set prescaler, and start conversion */
    ADCSRA = 0b10000111; // ADC Enable, Prescaler = 128 (Assuming 8MHz Clock -> 64 KHz ADC clock)
    1b3e:	e6 e2       	ldi	r30, 0x26	; 38
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	87 e8       	ldi	r24, 0x87	; 135
    1b44:	80 83       	st	Z, r24
}
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <ADC_u16Read>:
 *     - Copy_u8Channel: The ADC channel number to read from (0 to 7).
 *
 * Returns:
 *     u16 - The 10-bit ADC conversion result.
 */
u16 ADC_u16Read(u8 Copy_u8Channel) {
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	0f 92       	push	r0
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	89 83       	std	Y+1, r24	; 0x01
    /* Select ADC channel and ensure it's within the first 8 channels */
    ADMUX = (ADMUX & 0xF8) | (Copy_u8Channel & 0x07); // Select ADC channel
    1b58:	a7 e2       	ldi	r26, 0x27	; 39
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e7 e2       	ldi	r30, 0x27	; 39
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	98 2f       	mov	r25, r24
    1b64:	98 7f       	andi	r25, 0xF8	; 248
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	87 70       	andi	r24, 0x07	; 7
    1b6a:	89 2b       	or	r24, r25
    1b6c:	8c 93       	st	X, r24

    /* Start the conversion */
    SET_BIT(ADCSRA, 6); // Start conversion
    1b6e:	a6 e2       	ldi	r26, 0x26	; 38
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e6 e2       	ldi	r30, 0x26	; 38
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	80 64       	ori	r24, 0x40	; 64
    1b7a:	8c 93       	st	X, r24

    /* Wait for the conversion to finish */
    while (GET_BIT(ADCSRA, 4) == 0); // Wait for conversion to complete
    1b7c:	e6 e2       	ldi	r30, 0x26	; 38
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	82 95       	swap	r24
    1b84:	8f 70       	andi	r24, 0x0F	; 15
    1b86:	88 2f       	mov	r24, r24
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	81 70       	andi	r24, 0x01	; 1
    1b8c:	90 70       	andi	r25, 0x00	; 0
    1b8e:	00 97       	sbiw	r24, 0x00	; 0
    1b90:	a9 f3       	breq	.-22     	; 0x1b7c <ADC_u16Read+0x30>

    /* Clear the ADC Interrupt Flag */
    SET_BIT(ADCSRA, 4); // Clear the ADC interrupt flag
    1b92:	a6 e2       	ldi	r26, 0x26	; 38
    1b94:	b0 e0       	ldi	r27, 0x00	; 0
    1b96:	e6 e2       	ldi	r30, 0x26	; 38
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 61       	ori	r24, 0x10	; 16
    1b9e:	8c 93       	st	X, r24

    /* Read and return the ADC value */
    return ADCL | (ADCH << 8); // Read the ADC value (low then high)
    1ba0:	e4 e2       	ldi	r30, 0x24	; 36
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	e5 e2       	ldi	r30, 0x25	; 37
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	88 27       	eor	r24, r24
    1bb8:	82 2b       	or	r24, r18
    1bba:	93 2b       	or	r25, r19
}
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <SEV_SEG_voidInitialize>:
 * Function: SEV_SEG_voidInitialize
 * Description:
 *     Initializes the seven-segment display by setting the BCD pins and common pins as outputs.
 *     This function should be called at the start of the program to prepare the display for use.
 */
void SEV_SEG_voidInitialize(void) {
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    /* Set BCD pins as output */
    DIO_setPinDirection(DIO_PORTB, SEV_SEG_BCD_PIN_A, DIO_PIN_OUTPUT);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	60 e0       	ldi	r22, 0x00	; 0
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB, SEV_SEG_BCD_PIN_B, DIO_PIN_OUTPUT);
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	61 e0       	ldi	r22, 0x01	; 1
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB, SEV_SEG_BCD_PIN_C, DIO_PIN_OUTPUT);
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	62 e0       	ldi	r22, 0x02	; 2
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB, SEV_SEG_BCD_PIN_D, DIO_PIN_OUTPUT);
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	64 e0       	ldi	r22, 0x04	; 4
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>

    /* Set common pins as output */
    DIO_setPinDirection(DIO_PORTA, SEV_SEG_COM_PIN_1, DIO_PIN_OUTPUT);
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	63 e0       	ldi	r22, 0x03	; 3
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTA, SEV_SEG_COM_PIN_2, DIO_PIN_OUTPUT);
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB, SEV_SEG_COM_PIN_3, DIO_PIN_OUTPUT);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	65 e0       	ldi	r22, 0x05	; 5
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
    DIO_setPinDirection(DIO_PORTB, SEV_SEG_COM_PIN_4, DIO_PIN_OUTPUT);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	66 e0       	ldi	r22, 0x06	; 6
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
}
    1c1c:	cf 91       	pop	r28
    1c1e:	df 91       	pop	r29
    1c20:	08 95       	ret

00001c22 <SEV_SEG_voidDisplayDigit>:
 *
 * Parameters:
 *     - digit: The segment number (1-4) to display the digit on.
 *     - number: The digit (0-9) to display.
 */
void SEV_SEG_voidDisplayDigit(u8 digit, u8 number) {
    1c22:	df 93       	push	r29
    1c24:	cf 93       	push	r28
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	62 97       	sbiw	r28, 0x12	; 18
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	8f 87       	std	Y+15, r24	; 0x0f
    1c38:	68 8b       	std	Y+16, r22	; 0x10
    // Ensure the number is valid (between 0 and 9)
    if (number > 9) {
    1c3a:	88 89       	ldd	r24, Y+16	; 0x10
    1c3c:	8a 30       	cpi	r24, 0x0A	; 10
    1c3e:	08 f0       	brcs	.+2      	; 0x1c42 <SEV_SEG_voidDisplayDigit+0x20>
    1c40:	d1 c0       	rjmp	.+418    	; 0x1de4 <SEV_SEG_voidDisplayDigit+0x1c2>
        return; // Invalid number, do nothing
    }

    // Set the BCD pins based on the number
    DIO_setPinValue(DIO_PORTB, SEV_SEG_BCD_PIN_A, GET_BIT(number, 0));
    1c42:	88 89       	ldd	r24, Y+16	; 0x10
    1c44:	98 2f       	mov	r25, r24
    1c46:	91 70       	andi	r25, 0x01	; 1
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	49 2f       	mov	r20, r25
    1c4e:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    DIO_setPinValue(DIO_PORTB, SEV_SEG_BCD_PIN_B, GET_BIT(number, 1));
    1c52:	88 89       	ldd	r24, Y+16	; 0x10
    1c54:	86 95       	lsr	r24
    1c56:	98 2f       	mov	r25, r24
    1c58:	91 70       	andi	r25, 0x01	; 1
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	49 2f       	mov	r20, r25
    1c60:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    DIO_setPinValue(DIO_PORTB, SEV_SEG_BCD_PIN_C, GET_BIT(number, 2));
    1c64:	88 89       	ldd	r24, Y+16	; 0x10
    1c66:	86 95       	lsr	r24
    1c68:	86 95       	lsr	r24
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	91 70       	andi	r25, 0x01	; 1
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	62 e0       	ldi	r22, 0x02	; 2
    1c72:	49 2f       	mov	r20, r25
    1c74:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    DIO_setPinValue(DIO_PORTB, SEV_SEG_BCD_PIN_D, GET_BIT(number, 3));
    1c78:	88 89       	ldd	r24, Y+16	; 0x10
    1c7a:	86 95       	lsr	r24
    1c7c:	86 95       	lsr	r24
    1c7e:	86 95       	lsr	r24
    1c80:	98 2f       	mov	r25, r24
    1c82:	91 70       	andi	r25, 0x01	; 1
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	64 e0       	ldi	r22, 0x04	; 4
    1c88:	49 2f       	mov	r20, r25
    1c8a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>

    // Activate the specific digit
    switch (digit) {
    1c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	3a 8b       	std	Y+18, r19	; 0x12
    1c96:	29 8b       	std	Y+17, r18	; 0x11
    1c98:	89 89       	ldd	r24, Y+17	; 0x11
    1c9a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	e1 f0       	breq	.+56     	; 0x1cda <SEV_SEG_voidDisplayDigit+0xb8>
    1ca2:	29 89       	ldd	r18, Y+17	; 0x11
    1ca4:	3a 89       	ldd	r19, Y+18	; 0x12
    1ca6:	23 30       	cpi	r18, 0x03	; 3
    1ca8:	31 05       	cpc	r19, r1
    1caa:	34 f4       	brge	.+12     	; 0x1cb8 <SEV_SEG_voidDisplayDigit+0x96>
    1cac:	89 89       	ldd	r24, Y+17	; 0x11
    1cae:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	61 f0       	breq	.+24     	; 0x1cce <SEV_SEG_voidDisplayDigit+0xac>
    1cb6:	22 c0       	rjmp	.+68     	; 0x1cfc <SEV_SEG_voidDisplayDigit+0xda>
    1cb8:	29 89       	ldd	r18, Y+17	; 0x11
    1cba:	3a 89       	ldd	r19, Y+18	; 0x12
    1cbc:	23 30       	cpi	r18, 0x03	; 3
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	91 f0       	breq	.+36     	; 0x1ce6 <SEV_SEG_voidDisplayDigit+0xc4>
    1cc2:	89 89       	ldd	r24, Y+17	; 0x11
    1cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc6:	84 30       	cpi	r24, 0x04	; 4
    1cc8:	91 05       	cpc	r25, r1
    1cca:	99 f0       	breq	.+38     	; 0x1cf2 <SEV_SEG_voidDisplayDigit+0xd0>
    1ccc:	17 c0       	rjmp	.+46     	; 0x1cfc <SEV_SEG_voidDisplayDigit+0xda>
        case 1: DIO_setPinValue(DIO_PORTA, SEV_SEG_COM_PIN_1, DIO_PIN_LOW); break;
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	63 e0       	ldi	r22, 0x03	; 3
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    1cd8:	11 c0       	rjmp	.+34     	; 0x1cfc <SEV_SEG_voidDisplayDigit+0xda>
        case 2: DIO_setPinValue(DIO_PORTA, SEV_SEG_COM_PIN_2, DIO_PIN_LOW); break;
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    1ce4:	0b c0       	rjmp	.+22     	; 0x1cfc <SEV_SEG_voidDisplayDigit+0xda>
        case 3: DIO_setPinValue(DIO_PORTB, SEV_SEG_COM_PIN_3, DIO_PIN_LOW); break;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	65 e0       	ldi	r22, 0x05	; 5
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    1cf0:	05 c0       	rjmp	.+10     	; 0x1cfc <SEV_SEG_voidDisplayDigit+0xda>
        case 4: DIO_setPinValue(DIO_PORTB, SEV_SEG_COM_PIN_4, DIO_PIN_LOW); break;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	66 e0       	ldi	r22, 0x06	; 6
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	a0 e8       	ldi	r26, 0x80	; 128
    1d02:	bf e3       	ldi	r27, 0x3F	; 63
    1d04:	8b 87       	std	Y+11, r24	; 0x0b
    1d06:	9c 87       	std	Y+12, r25	; 0x0c
    1d08:	ad 87       	std	Y+13, r26	; 0x0d
    1d0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a ef       	ldi	r20, 0xFA	; 250
    1d1a:	54 e4       	ldi	r21, 0x44	; 68
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	8f 83       	std	Y+7, r24	; 0x07
    1d26:	98 87       	std	Y+8, r25	; 0x08
    1d28:	a9 87       	std	Y+9, r26	; 0x09
    1d2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e8       	ldi	r20, 0x80	; 128
    1d3a:	5f e3       	ldi	r21, 0x3F	; 63
    1d3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d40:	88 23       	and	r24, r24
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <SEV_SEG_voidDisplayDigit+0x12c>
		__ticks = 1;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
    1d4c:	3f c0       	rjmp	.+126    	; 0x1dcc <SEV_SEG_voidDisplayDigit+0x1aa>
	else if (__tmp > 65535)
    1d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d50:	78 85       	ldd	r23, Y+8	; 0x08
    1d52:	89 85       	ldd	r24, Y+9	; 0x09
    1d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	3f ef       	ldi	r19, 0xFF	; 255
    1d5a:	4f e7       	ldi	r20, 0x7F	; 127
    1d5c:	57 e4       	ldi	r21, 0x47	; 71
    1d5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d62:	18 16       	cp	r1, r24
    1d64:	4c f5       	brge	.+82     	; 0x1db8 <SEV_SEG_voidDisplayDigit+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	40 e2       	ldi	r20, 0x20	; 32
    1d74:	51 e4       	ldi	r21, 0x41	; 65
    1d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	0f c0       	rjmp	.+30     	; 0x1dae <SEV_SEG_voidDisplayDigit+0x18c>
    1d90:	88 ec       	ldi	r24, 0xC8	; 200
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9c 83       	std	Y+4, r25	; 0x04
    1d96:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	01 97       	sbiw	r24, 0x01	; 1
    1d9e:	f1 f7       	brne	.-4      	; 0x1d9c <SEV_SEG_voidDisplayDigit+0x17a>
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	00 97       	sbiw	r24, 0x00	; 0
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <SEV_SEG_voidDisplayDigit+0x16e>
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <SEV_SEG_voidDisplayDigit+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dba:	78 85       	ldd	r23, Y+8	; 0x08
    1dbc:	89 85       	ldd	r24, Y+9	; 0x09
    1dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9e 83       	std	Y+6, r25	; 0x06
    1dca:	8d 83       	std	Y+5, r24	; 0x05
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	9a 83       	std	Y+2, r25	; 0x02
    1dd2:	89 83       	std	Y+1, r24	; 0x01
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <SEV_SEG_voidDisplayDigit+0x1b6>
    1ddc:	9a 83       	std	Y+2, r25	; 0x02
    1dde:	89 83       	std	Y+1, r24	; 0x01
    }

    _delay_ms(1); // Short delay for display stability

    // Disable all digits
    SEV_SEG_voidDisableDisplay();
    1de0:	0e 94 3d 11 	call	0x227a	; 0x227a <SEV_SEG_voidDisableDisplay>
}
    1de4:	62 96       	adiw	r28, 0x12	; 18
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	de bf       	out	0x3e, r29	; 62
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <SEV_SEG_voidDisplayNumber>:
 *     This function decomposes the number into individual digits and displays them sequentially.
 *
 * Parameters:
 *     - number: The number (up to 4 digits) to display.
 */
void SEV_SEG_voidDisplayNumber(u16 number) {
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	c0 54       	subi	r28, 0x40	; 64
    1e00:	d0 40       	sbci	r29, 0x00	; 0
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ff 96       	adiw	r30, 0x3f	; 63
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	80 83       	st	Z, r24
    if (number > 9999) {
    1e14:	fe 01       	movw	r30, r28
    1e16:	ff 96       	adiw	r30, 0x3f	; 63
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	27 e2       	ldi	r18, 0x27	; 39
    1e1e:	80 31       	cpi	r24, 0x10	; 16
    1e20:	92 07       	cpc	r25, r18
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <SEV_SEG_voidDisplayNumber+0x30>
    1e24:	20 c2       	rjmp	.+1088   	; 0x2266 <SEV_SEG_voidDisplayNumber+0x470>
        return; // Number is too large to display
    }

    // Decompose the number into individual digits
    u8 digit1 = number % 10;
    1e26:	fe 01       	movw	r30, r28
    1e28:	ff 96       	adiw	r30, 0x3f	; 63
    1e2a:	80 81       	ld	r24, Z
    1e2c:	91 81       	ldd	r25, Z+1	; 0x01
    1e2e:	2a e0       	ldi	r18, 0x0A	; 10
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	b9 01       	movw	r22, r18
    1e34:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    1e38:	8e af       	std	Y+62, r24	; 0x3e
    u8 digit2 = (number / 10) % 10;
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ff 96       	adiw	r30, 0x3f	; 63
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	2a e0       	ldi	r18, 0x0A	; 10
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	b9 01       	movw	r22, r18
    1e48:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	2a e0       	ldi	r18, 0x0A	; 10
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	b9 01       	movw	r22, r18
    1e54:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    1e58:	8d af       	std	Y+61, r24	; 0x3d
    u8 digit3 = (number / 100) % 10;
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ff 96       	adiw	r30, 0x3f	; 63
    1e5e:	80 81       	ld	r24, Z
    1e60:	91 81       	ldd	r25, Z+1	; 0x01
    1e62:	24 e6       	ldi	r18, 0x64	; 100
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	b9 01       	movw	r22, r18
    1e68:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	2a e0       	ldi	r18, 0x0A	; 10
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	b9 01       	movw	r22, r18
    1e74:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    1e78:	8c af       	std	Y+60, r24	; 0x3c
    u8 digit4 = (number / 1000) % 10;
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ff 96       	adiw	r30, 0x3f	; 63
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	28 ee       	ldi	r18, 0xE8	; 232
    1e84:	33 e0       	ldi	r19, 0x03	; 3
    1e86:	b9 01       	movw	r22, r18
    1e88:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	2a e0       	ldi	r18, 0x0A	; 10
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	b9 01       	movw	r22, r18
    1e94:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    1e98:	8b af       	std	Y+59, r24	; 0x3b

    // Multiplexing loop for display refresh
    for (int i = 0; i < 50; i++) {
    1e9a:	1a ae       	std	Y+58, r1	; 0x3a
    1e9c:	19 ae       	std	Y+57, r1	; 0x39
    1e9e:	dd c1       	rjmp	.+954    	; 0x225a <SEV_SEG_voidDisplayNumber+0x464>
        SEV_SEG_voidDisplayDigit(4, digit4);
    1ea0:	84 e0       	ldi	r24, 0x04	; 4
    1ea2:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ea4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <SEV_SEG_voidDisplayDigit>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e0       	ldi	r26, 0x00	; 0
    1eae:	b0 e4       	ldi	r27, 0x40	; 64
    1eb0:	8d ab       	std	Y+53, r24	; 0x35
    1eb2:	9e ab       	std	Y+54, r25	; 0x36
    1eb4:	af ab       	std	Y+55, r26	; 0x37
    1eb6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eba:	7e a9       	ldd	r23, Y+54	; 0x36
    1ebc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ebe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	89 ab       	std	Y+49, r24	; 0x31
    1ed2:	9a ab       	std	Y+50, r25	; 0x32
    1ed4:	ab ab       	std	Y+51, r26	; 0x33
    1ed6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    1eda:	7a a9       	ldd	r23, Y+50	; 0x32
    1edc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ede:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <SEV_SEG_voidDisplayNumber+0x104>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	98 ab       	std	Y+48, r25	; 0x30
    1ef6:	8f a7       	std	Y+47, r24	; 0x2f
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <SEV_SEG_voidDisplayNumber+0x182>
	else if (__tmp > 65535)
    1efa:	69 a9       	ldd	r22, Y+49	; 0x31
    1efc:	7a a9       	ldd	r23, Y+50	; 0x32
    1efe:	8b a9       	ldd	r24, Y+51	; 0x33
    1f00:	9c a9       	ldd	r25, Y+52	; 0x34
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <SEV_SEG_voidDisplayNumber+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	6d a9       	ldd	r22, Y+53	; 0x35
    1f14:	7e a9       	ldd	r23, Y+54	; 0x36
    1f16:	8f a9       	ldd	r24, Y+55	; 0x37
    1f18:	98 ad       	ldd	r25, Y+56	; 0x38
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	98 ab       	std	Y+48, r25	; 0x30
    1f38:	8f a7       	std	Y+47, r24	; 0x2f
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <SEV_SEG_voidDisplayNumber+0x164>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9e a7       	std	Y+46, r25	; 0x2e
    1f42:	8d a7       	std	Y+45, r24	; 0x2d
    1f44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f46:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <SEV_SEG_voidDisplayNumber+0x152>
    1f4c:	9e a7       	std	Y+46, r25	; 0x2e
    1f4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f52:	98 a9       	ldd	r25, Y+48	; 0x30
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	98 ab       	std	Y+48, r25	; 0x30
    1f58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <SEV_SEG_voidDisplayNumber+0x146>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <SEV_SEG_voidDisplayNumber+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	69 a9       	ldd	r22, Y+49	; 0x31
    1f66:	7a a9       	ldd	r23, Y+50	; 0x32
    1f68:	8b a9       	ldd	r24, Y+51	; 0x33
    1f6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	98 ab       	std	Y+48, r25	; 0x30
    1f76:	8f a7       	std	Y+47, r24	; 0x2f
    1f78:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f7a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7c:	9c a7       	std	Y+44, r25	; 0x2c
    1f7e:	8b a7       	std	Y+43, r24	; 0x2b
    1f80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <SEV_SEG_voidDisplayNumber+0x18e>
    1f88:	9c a7       	std	Y+44, r25	; 0x2c
    1f8a:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(2);
        SEV_SEG_voidDisplayDigit(3, digit3);
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1f90:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <SEV_SEG_voidDisplayDigit>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a0 e0       	ldi	r26, 0x00	; 0
    1f9a:	b0 e4       	ldi	r27, 0x40	; 64
    1f9c:	8f a3       	std	Y+39, r24	; 0x27
    1f9e:	98 a7       	std	Y+40, r25	; 0x28
    1fa0:	a9 a7       	std	Y+41, r26	; 0x29
    1fa2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fa6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fa8:	89 a5       	ldd	r24, Y+41	; 0x29
    1faa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	8b a3       	std	Y+35, r24	; 0x23
    1fbe:	9c a3       	std	Y+36, r25	; 0x24
    1fc0:	ad a3       	std	Y+37, r26	; 0x25
    1fc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1fca:	9e a1       	ldd	r25, Y+38	; 0x26
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	2c f4       	brge	.+10     	; 0x1fe6 <SEV_SEG_voidDisplayNumber+0x1f0>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9a a3       	std	Y+34, r25	; 0x22
    1fe2:	89 a3       	std	Y+33, r24	; 0x21
    1fe4:	3f c0       	rjmp	.+126    	; 0x2064 <SEV_SEG_voidDisplayNumber+0x26e>
	else if (__tmp > 65535)
    1fe6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fea:	8d a1       	ldd	r24, Y+37	; 0x25
    1fec:	9e a1       	ldd	r25, Y+38	; 0x26
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	4f e7       	ldi	r20, 0x7F	; 127
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ffa:	18 16       	cp	r1, r24
    1ffc:	4c f5       	brge	.+82     	; 0x2050 <SEV_SEG_voidDisplayNumber+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffe:	6f a1       	ldd	r22, Y+39	; 0x27
    2000:	78 a5       	ldd	r23, Y+40	; 0x28
    2002:	89 a5       	ldd	r24, Y+41	; 0x29
    2004:	9a a5       	ldd	r25, Y+42	; 0x2a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e2       	ldi	r20, 0x20	; 32
    200c:	51 e4       	ldi	r21, 0x41	; 65
    200e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9a a3       	std	Y+34, r25	; 0x22
    2024:	89 a3       	std	Y+33, r24	; 0x21
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <SEV_SEG_voidDisplayNumber+0x250>
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	98 a3       	std	Y+32, r25	; 0x20
    202e:	8f 8f       	std	Y+31, r24	; 0x1f
    2030:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2032:	98 a1       	ldd	r25, Y+32	; 0x20
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <SEV_SEG_voidDisplayNumber+0x23e>
    2038:	98 a3       	std	Y+32, r25	; 0x20
    203a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203c:	89 a1       	ldd	r24, Y+33	; 0x21
    203e:	9a a1       	ldd	r25, Y+34	; 0x22
    2040:	01 97       	sbiw	r24, 0x01	; 1
    2042:	9a a3       	std	Y+34, r25	; 0x22
    2044:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2046:	89 a1       	ldd	r24, Y+33	; 0x21
    2048:	9a a1       	ldd	r25, Y+34	; 0x22
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	69 f7       	brne	.-38     	; 0x2028 <SEV_SEG_voidDisplayNumber+0x232>
    204e:	14 c0       	rjmp	.+40     	; 0x2078 <SEV_SEG_voidDisplayNumber+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2050:	6b a1       	ldd	r22, Y+35	; 0x23
    2052:	7c a1       	ldd	r23, Y+36	; 0x24
    2054:	8d a1       	ldd	r24, Y+37	; 0x25
    2056:	9e a1       	ldd	r25, Y+38	; 0x26
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	9e 8f       	std	Y+30, r25	; 0x1e
    206a:	8d 8f       	std	Y+29, r24	; 0x1d
    206c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <SEV_SEG_voidDisplayNumber+0x27a>
    2074:	9e 8f       	std	Y+30, r25	; 0x1e
    2076:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(2);
        SEV_SEG_voidDisplayDigit(2, digit2);
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	6d ad       	ldd	r22, Y+61	; 0x3d
    207c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <SEV_SEG_voidDisplayDigit>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e0       	ldi	r26, 0x00	; 0
    2086:	b0 e4       	ldi	r27, 0x40	; 64
    2088:	89 8f       	std	Y+25, r24	; 0x19
    208a:	9a 8f       	std	Y+26, r25	; 0x1a
    208c:	ab 8f       	std	Y+27, r26	; 0x1b
    208e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	69 8d       	ldd	r22, Y+25	; 0x19
    2092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a ef       	ldi	r20, 0xFA	; 250
    209e:	54 e4       	ldi	r21, 0x44	; 68
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8d 8b       	std	Y+21, r24	; 0x15
    20aa:	9e 8b       	std	Y+22, r25	; 0x16
    20ac:	af 8b       	std	Y+23, r26	; 0x17
    20ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20b0:	6d 89       	ldd	r22, Y+21	; 0x15
    20b2:	7e 89       	ldd	r23, Y+22	; 0x16
    20b4:	8f 89       	ldd	r24, Y+23	; 0x17
    20b6:	98 8d       	ldd	r25, Y+24	; 0x18
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <SEV_SEG_voidDisplayNumber+0x2dc>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 8b       	std	Y+20, r25	; 0x14
    20ce:	8b 8b       	std	Y+19, r24	; 0x13
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <SEV_SEG_voidDisplayNumber+0x35a>
	else if (__tmp > 65535)
    20d2:	6d 89       	ldd	r22, Y+21	; 0x15
    20d4:	7e 89       	ldd	r23, Y+22	; 0x16
    20d6:	8f 89       	ldd	r24, Y+23	; 0x17
    20d8:	98 8d       	ldd	r25, Y+24	; 0x18
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <SEV_SEG_voidDisplayNumber+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	69 8d       	ldd	r22, Y+25	; 0x19
    20ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9c 8b       	std	Y+20, r25	; 0x14
    2110:	8b 8b       	std	Y+19, r24	; 0x13
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <SEV_SEG_voidDisplayNumber+0x33c>
    2114:	88 ec       	ldi	r24, 0xC8	; 200
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	9a 8b       	std	Y+18, r25	; 0x12
    211a:	89 8b       	std	Y+17, r24	; 0x11
    211c:	89 89       	ldd	r24, Y+17	; 0x11
    211e:	9a 89       	ldd	r25, Y+18	; 0x12
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <SEV_SEG_voidDisplayNumber+0x32a>
    2124:	9a 8b       	std	Y+18, r25	; 0x12
    2126:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8b 89       	ldd	r24, Y+19	; 0x13
    212a:	9c 89       	ldd	r25, Y+20	; 0x14
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9c 8b       	std	Y+20, r25	; 0x14
    2130:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8b 89       	ldd	r24, Y+19	; 0x13
    2134:	9c 89       	ldd	r25, Y+20	; 0x14
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <SEV_SEG_voidDisplayNumber+0x31e>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <SEV_SEG_voidDisplayNumber+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6d 89       	ldd	r22, Y+21	; 0x15
    213e:	7e 89       	ldd	r23, Y+22	; 0x16
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9c 8b       	std	Y+20, r25	; 0x14
    214e:	8b 8b       	std	Y+19, r24	; 0x13
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	9c 89       	ldd	r25, Y+20	; 0x14
    2154:	98 8b       	std	Y+16, r25	; 0x10
    2156:	8f 87       	std	Y+15, r24	; 0x0f
    2158:	8f 85       	ldd	r24, Y+15	; 0x0f
    215a:	98 89       	ldd	r25, Y+16	; 0x10
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <SEV_SEG_voidDisplayNumber+0x366>
    2160:	98 8b       	std	Y+16, r25	; 0x10
    2162:	8f 87       	std	Y+15, r24	; 0x0f
        _delay_ms(2);
        SEV_SEG_voidDisplayDigit(1, digit1);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	6e ad       	ldd	r22, Y+62	; 0x3e
    2168:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <SEV_SEG_voidDisplayDigit>
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a0 e0       	ldi	r26, 0x00	; 0
    2172:	b0 e4       	ldi	r27, 0x40	; 64
    2174:	8b 87       	std	Y+11, r24	; 0x0b
    2176:	9c 87       	std	Y+12, r25	; 0x0c
    2178:	ad 87       	std	Y+13, r26	; 0x0d
    217a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a ef       	ldi	r20, 0xFA	; 250
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8f 83       	std	Y+7, r24	; 0x07
    2196:	98 87       	std	Y+8, r25	; 0x08
    2198:	a9 87       	std	Y+9, r26	; 0x09
    219a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    219c:	6f 81       	ldd	r22, Y+7	; 0x07
    219e:	78 85       	ldd	r23, Y+8	; 0x08
    21a0:	89 85       	ldd	r24, Y+9	; 0x09
    21a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e8       	ldi	r20, 0x80	; 128
    21aa:	5f e3       	ldi	r21, 0x3F	; 63
    21ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b0:	88 23       	and	r24, r24
    21b2:	2c f4       	brge	.+10     	; 0x21be <SEV_SEG_voidDisplayNumber+0x3c8>
		__ticks = 1;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e 83       	std	Y+6, r25	; 0x06
    21ba:	8d 83       	std	Y+5, r24	; 0x05
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <SEV_SEG_voidDisplayNumber+0x446>
	else if (__tmp > 65535)
    21be:	6f 81       	ldd	r22, Y+7	; 0x07
    21c0:	78 85       	ldd	r23, Y+8	; 0x08
    21c2:	89 85       	ldd	r24, Y+9	; 0x09
    21c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	4c f5       	brge	.+82     	; 0x2228 <SEV_SEG_voidDisplayNumber+0x432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21da:	8d 85       	ldd	r24, Y+13	; 0x0d
    21dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e2       	ldi	r20, 0x20	; 32
    21e4:	51 e4       	ldi	r21, 0x41	; 65
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <SEV_SEG_voidDisplayNumber+0x428>
    2200:	88 ec       	ldi	r24, 0xC8	; 200
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <SEV_SEG_voidDisplayNumber+0x416>
    2210:	9c 83       	std	Y+4, r25	; 0x04
    2212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2214:	8d 81       	ldd	r24, Y+5	; 0x05
    2216:	9e 81       	ldd	r25, Y+6	; 0x06
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	9e 81       	ldd	r25, Y+6	; 0x06
    2222:	00 97       	sbiw	r24, 0x00	; 0
    2224:	69 f7       	brne	.-38     	; 0x2200 <SEV_SEG_voidDisplayNumber+0x40a>
    2226:	14 c0       	rjmp	.+40     	; 0x2250 <SEV_SEG_voidDisplayNumber+0x45a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2228:	6f 81       	ldd	r22, Y+7	; 0x07
    222a:	78 85       	ldd	r23, Y+8	; 0x08
    222c:	89 85       	ldd	r24, Y+9	; 0x09
    222e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9e 83       	std	Y+6, r25	; 0x06
    223a:	8d 83       	std	Y+5, r24	; 0x05
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	89 81       	ldd	r24, Y+1	; 0x01
    2246:	9a 81       	ldd	r25, Y+2	; 0x02
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	f1 f7       	brne	.-4      	; 0x2248 <SEV_SEG_voidDisplayNumber+0x452>
    224c:	9a 83       	std	Y+2, r25	; 0x02
    224e:	89 83       	std	Y+1, r24	; 0x01
    u8 digit2 = (number / 10) % 10;
    u8 digit3 = (number / 100) % 10;
    u8 digit4 = (number / 1000) % 10;

    // Multiplexing loop for display refresh
    for (int i = 0; i < 50; i++) {
    2250:	89 ad       	ldd	r24, Y+57	; 0x39
    2252:	9a ad       	ldd	r25, Y+58	; 0x3a
    2254:	01 96       	adiw	r24, 0x01	; 1
    2256:	9a af       	std	Y+58, r25	; 0x3a
    2258:	89 af       	std	Y+57, r24	; 0x39
    225a:	89 ad       	ldd	r24, Y+57	; 0x39
    225c:	9a ad       	ldd	r25, Y+58	; 0x3a
    225e:	82 33       	cpi	r24, 0x32	; 50
    2260:	91 05       	cpc	r25, r1
    2262:	0c f4       	brge	.+2      	; 0x2266 <SEV_SEG_voidDisplayNumber+0x470>
    2264:	1d ce       	rjmp	.-966    	; 0x1ea0 <SEV_SEG_voidDisplayNumber+0xaa>
        SEV_SEG_voidDisplayDigit(2, digit2);
        _delay_ms(2);
        SEV_SEG_voidDisplayDigit(1, digit1);
        _delay_ms(2);
    }
}
    2266:	c0 5c       	subi	r28, 0xC0	; 192
    2268:	df 4f       	sbci	r29, 0xFF	; 255
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <SEV_SEG_voidDisableDisplay>:
 * Function: SEV_SEG_voidDisableDisplay
 * Description:
 *     Disables all display segments of the seven-segment display.
 *     This function turns off all segments to ensure no digits are displayed.
 */
void SEV_SEG_voidDisableDisplay(void) {
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    /* Disable all displays */
    DIO_setPinValue(DIO_PORTA, SEV_SEG_COM_PIN_1, DIO_PIN_HIGH);
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	63 e0       	ldi	r22, 0x03	; 3
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    DIO_setPinValue(DIO_PORTA, SEV_SEG_COM_PIN_2, DIO_PIN_HIGH);
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	62 e0       	ldi	r22, 0x02	; 2
    2290:	41 e0       	ldi	r20, 0x01	; 1
    2292:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    DIO_setPinValue(DIO_PORTB, SEV_SEG_COM_PIN_3, DIO_PIN_HIGH);
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	65 e0       	ldi	r22, 0x05	; 5
    229a:	41 e0       	ldi	r20, 0x01	; 1
    229c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    DIO_setPinValue(DIO_PORTB, SEV_SEG_COM_PIN_4, DIO_PIN_HIGH);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	66 e0       	ldi	r22, 0x06	; 6
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
}
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <main>:
#include "../SEV_SEG/SEV_SEG_config.h"
#include "../SEV_SEG/SEV_SEG_interface.h"
#include "../SEV_SEG/SEV_SEG_private.h"

int main(void)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	64 97       	sbiw	r28, 0x14	; 20
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    /* Initialize modules */
    LM35_voidInit();          // Initialize LM35
    22c4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LM35_voidInit>
    SEV_SEG_voidInitialize(); // Initialize 7-segment display
    22c8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <SEV_SEG_voidInitialize>
    f32 temp;
    u16 displayValue;

    while (1) {
        // Read temperature from LM35
        temp = LM35_f32GetTemperature();
    22cc:	0e 94 07 12 	call	0x240e	; 0x240e <LM35_f32GetTemperature>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	89 8b       	std	Y+17, r24	; 0x11
    22d6:	9a 8b       	std	Y+18, r25	; 0x12
    22d8:	ab 8b       	std	Y+19, r26	; 0x13
    22da:	bc 8b       	std	Y+20, r27	; 0x14

        // Convert the temperature to a 4-digit number for display
        // For example, 26.4 becomes 0264, 27.1 becomes 0271
        displayValue = (u16)(temp * 10); // Multiply by 10 to shift decimal one place to the right
    22dc:	69 89       	ldd	r22, Y+17	; 0x11
    22de:	7a 89       	ldd	r23, Y+18	; 0x12
    22e0:	8b 89       	ldd	r24, Y+19	; 0x13
    22e2:	9c 89       	ldd	r25, Y+20	; 0x14
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e2       	ldi	r20, 0x20	; 32
    22ea:	51 e4       	ldi	r21, 0x41	; 65
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	98 8b       	std	Y+16, r25	; 0x10
    2302:	8f 87       	std	Y+15, r24	; 0x0f

        // Display this value on the 7-segment display
        SEV_SEG_voidDisplayNumber(displayValue);
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	98 89       	ldd	r25, Y+16	; 0x10
    2308:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <SEV_SEG_voidDisplayNumber>
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	aa e7       	ldi	r26, 0x7A	; 122
    2312:	b4 e4       	ldi	r27, 0x44	; 68
    2314:	8b 87       	std	Y+11, r24	; 0x0b
    2316:	9c 87       	std	Y+12, r25	; 0x0c
    2318:	ad 87       	std	Y+13, r26	; 0x0d
    231a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    231c:	6b 85       	ldd	r22, Y+11	; 0x0b
    231e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2320:	8d 85       	ldd	r24, Y+13	; 0x0d
    2322:	9e 85       	ldd	r25, Y+14	; 0x0e
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4a ef       	ldi	r20, 0xFA	; 250
    232a:	54 e4       	ldi	r21, 0x44	; 68
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	8f 83       	std	Y+7, r24	; 0x07
    2336:	98 87       	std	Y+8, r25	; 0x08
    2338:	a9 87       	std	Y+9, r26	; 0x09
    233a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    233c:	6f 81       	ldd	r22, Y+7	; 0x07
    233e:	78 85       	ldd	r23, Y+8	; 0x08
    2340:	89 85       	ldd	r24, Y+9	; 0x09
    2342:	9a 85       	ldd	r25, Y+10	; 0x0a
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	40 e8       	ldi	r20, 0x80	; 128
    234a:	5f e3       	ldi	r21, 0x3F	; 63
    234c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2350:	88 23       	and	r24, r24
    2352:	2c f4       	brge	.+10     	; 0x235e <main+0xae>
		__ticks = 1;
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	3f c0       	rjmp	.+126    	; 0x23dc <main+0x12c>
	else if (__tmp > 65535)
    235e:	6f 81       	ldd	r22, Y+7	; 0x07
    2360:	78 85       	ldd	r23, Y+8	; 0x08
    2362:	89 85       	ldd	r24, Y+9	; 0x09
    2364:	9a 85       	ldd	r25, Y+10	; 0x0a
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	3f ef       	ldi	r19, 0xFF	; 255
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	57 e4       	ldi	r21, 0x47	; 71
    236e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	4c f5       	brge	.+82     	; 0x23c8 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2376:	6b 85       	ldd	r22, Y+11	; 0x0b
    2378:	7c 85       	ldd	r23, Y+12	; 0x0c
    237a:	8d 85       	ldd	r24, Y+13	; 0x0d
    237c:	9e 85       	ldd	r25, Y+14	; 0x0e
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e2       	ldi	r20, 0x20	; 32
    2384:	51 e4       	ldi	r21, 0x41	; 65
    2386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	bc 01       	movw	r22, r24
    2390:	cd 01       	movw	r24, r26
    2392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	9e 83       	std	Y+6, r25	; 0x06
    239c:	8d 83       	std	Y+5, r24	; 0x05
    239e:	0f c0       	rjmp	.+30     	; 0x23be <main+0x10e>
    23a0:	88 ec       	ldi	r24, 0xC8	; 200
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	8b 83       	std	Y+3, r24	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	f1 f7       	brne	.-4      	; 0x23ac <main+0xfc>
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b4:	8d 81       	ldd	r24, Y+5	; 0x05
    23b6:	9e 81       	ldd	r25, Y+6	; 0x06
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23be:	8d 81       	ldd	r24, Y+5	; 0x05
    23c0:	9e 81       	ldd	r25, Y+6	; 0x06
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	69 f7       	brne	.-38     	; 0x23a0 <main+0xf0>
    23c6:	82 cf       	rjmp	.-252    	; 0x22cc <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ca:	78 85       	ldd	r23, Y+8	; 0x08
    23cc:	89 85       	ldd	r24, Y+9	; 0x09
    23ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	9e 81       	ldd	r25, Y+6	; 0x06
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <main+0x138>
    23ec:	9a 83       	std	Y+2, r25	; 0x02
    23ee:	89 83       	std	Y+1, r24	; 0x01
    23f0:	6d cf       	rjmp	.-294    	; 0x22cc <main+0x1c>

000023f2 <LM35_voidInit>:
 *              the ADC channel connected to LM35 as an input and initializes
 *              the ADC module for temperature reading.
 * Parameters: None
 * Return: None
 */
void LM35_voidInit(void) {
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    // Configure the ADC channel connected to LM35 as input
    DIO_setPinDirection(DIO_PORTA, LM35_ADC_CHANNEL, DIO_PIN_INPUT);
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>

    // Initialize the ADC module
    ADC_voidInit();
    2404:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <ADC_voidInit>
}
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <LM35_f32GetTemperature>:
 *              to LM35, converts this value to a voltage level, and then converts
 *              this voltage level to a temperature in Celsius.
 * Parameters: None
 * Return: float - The calculated temperature in Celsius.
 */
float LM35_f32GetTemperature(void) {
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	2a 97       	sbiw	r28, 0x0a	; 10
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    // Read ADC value from the channel connected to LM35
    u16 Local_u16ADCValue = ADC_u16Read(LM35_ADC_CHANNEL);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <ADC_u16Read>
    2428:	9a 87       	std	Y+10, r25	; 0x0a
    242a:	89 87       	std	Y+9, r24	; 0x09

    // Convert ADC value to voltage (in millivolts)
    float Local_f32Voltage = (Local_u16ADCValue * 5000.0) / 1024.0;
    242c:	89 85       	ldd	r24, Y+9	; 0x09
    242e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2430:	cc 01       	movw	r24, r24
    2432:	a0 e0       	ldi	r26, 0x00	; 0
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e4       	ldi	r19, 0x40	; 64
    244a:	4c e9       	ldi	r20, 0x9C	; 156
    244c:	55 e4       	ldi	r21, 0x45	; 69
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	54 e4       	ldi	r21, 0x44	; 68
    2462:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	af 83       	std	Y+7, r26	; 0x07
    2470:	b8 87       	std	Y+8, r27	; 0x08

    // Convert voltage to temperature (Celsius)
    // LM35 sensor output: 10mV per degree Celsius
    float Local_f32Temperature = Local_f32Voltage / 10.0;
    2472:	6d 81       	ldd	r22, Y+5	; 0x05
    2474:	7e 81       	ldd	r23, Y+6	; 0x06
    2476:	8f 81       	ldd	r24, Y+7	; 0x07
    2478:	98 85       	ldd	r25, Y+8	; 0x08
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	ab 83       	std	Y+3, r26	; 0x03
    2490:	bc 83       	std	Y+4, r27	; 0x04

    // Return the calculated temperature
    return Local_f32Temperature;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	ab 81       	ldd	r26, Y+3	; 0x03
    2498:	bc 81       	ldd	r27, Y+4	; 0x04
}
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	2a 96       	adiw	r28, 0x0a	; 10
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <LCD_voidInit>:

/*	Character patterns	*/


void LCD_voidInit(void)
{
    24b0:	0f 93       	push	r16
    24b2:	1f 93       	push	r17
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
    24bc:	ca 55       	subi	r28, 0x5A	; 90
    24be:	d0 40       	sbci	r29, 0x00	; 0
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
	/*
	 *Startup initialization sequence of LCD panel to work using 4 bit mode, as per manufacturer
	 */
	//set all pins as outputs --> GND, VDD, VO, BLA and BLK are connected to external sources NOT AVR controller's pins
	//R/W is set to 0 (input) by hardware wirings (default)
	DIO_setPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_OUTPUT);
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	63 e0       	ldi	r22, 0x03	; 3
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_PIN_OUTPUT);
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_OUTPUT);
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	41 e0       	ldi	r20, 0x01	; 1
    24e4:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_OUTPUT);
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	41 e0       	ldi	r20, 0x01	; 1
    24ee:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_OUTPUT);
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	62 e0       	ldi	r22, 0x02	; 2
    24f6:	41 e0       	ldi	r20, 0x01	; 1
    24f8:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_OUTPUT);
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	64 e0       	ldi	r22, 0x04	; 4
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 24 08 	call	0x1048	; 0x1048 <DIO_setPinDirection>
    2506:	fe 01       	movw	r30, r28
    2508:	e9 5a       	subi	r30, 0xA9	; 169
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	ac e0       	ldi	r26, 0x0C	; 12
    2512:	b2 e4       	ldi	r27, 0x42	; 66
    2514:	80 83       	st	Z, r24
    2516:	91 83       	std	Z+1, r25	; 0x01
    2518:	a2 83       	std	Z+2, r26	; 0x02
    251a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251c:	8e 01       	movw	r16, r28
    251e:	0d 5a       	subi	r16, 0xAD	; 173
    2520:	1f 4f       	sbci	r17, 0xFF	; 255
    2522:	fe 01       	movw	r30, r28
    2524:	e9 5a       	subi	r30, 0xA9	; 169
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	4a ef       	ldi	r20, 0xFA	; 250
    2536:	54 e4       	ldi	r21, 0x44	; 68
    2538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	f8 01       	movw	r30, r16
    2542:	80 83       	st	Z, r24
    2544:	91 83       	std	Z+1, r25	; 0x01
    2546:	a2 83       	std	Z+2, r26	; 0x02
    2548:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    254a:	fe 01       	movw	r30, r28
    254c:	ed 5a       	subi	r30, 0xAD	; 173
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	60 81       	ld	r22, Z
    2552:	71 81       	ldd	r23, Z+1	; 0x01
    2554:	82 81       	ldd	r24, Z+2	; 0x02
    2556:	93 81       	ldd	r25, Z+3	; 0x03
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e8       	ldi	r20, 0x80	; 128
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2564:	88 23       	and	r24, r24
    2566:	44 f4       	brge	.+16     	; 0x2578 <LCD_voidInit+0xc8>
		__ticks = 1;
    2568:	fe 01       	movw	r30, r28
    256a:	ef 5a       	subi	r30, 0xAF	; 175
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	91 83       	std	Z+1, r25	; 0x01
    2574:	80 83       	st	Z, r24
    2576:	64 c0       	rjmp	.+200    	; 0x2640 <LCD_voidInit+0x190>
	else if (__tmp > 65535)
    2578:	fe 01       	movw	r30, r28
    257a:	ed 5a       	subi	r30, 0xAD	; 173
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	60 81       	ld	r22, Z
    2580:	71 81       	ldd	r23, Z+1	; 0x01
    2582:	82 81       	ldd	r24, Z+2	; 0x02
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	3f ef       	ldi	r19, 0xFF	; 255
    258a:	4f e7       	ldi	r20, 0x7F	; 127
    258c:	57 e4       	ldi	r21, 0x47	; 71
    258e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2592:	18 16       	cp	r1, r24
    2594:	0c f0       	brlt	.+2      	; 0x2598 <LCD_voidInit+0xe8>
    2596:	43 c0       	rjmp	.+134    	; 0x261e <LCD_voidInit+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2598:	fe 01       	movw	r30, r28
    259a:	e9 5a       	subi	r30, 0xA9	; 169
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	60 81       	ld	r22, Z
    25a0:	71 81       	ldd	r23, Z+1	; 0x01
    25a2:	82 81       	ldd	r24, Z+2	; 0x02
    25a4:	93 81       	ldd	r25, Z+3	; 0x03
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e2       	ldi	r20, 0x20	; 32
    25ac:	51 e4       	ldi	r21, 0x41	; 65
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	8e 01       	movw	r16, r28
    25b8:	0f 5a       	subi	r16, 0xAF	; 175
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	bc 01       	movw	r22, r24
    25be:	cd 01       	movw	r24, r26
    25c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	f8 01       	movw	r30, r16
    25ca:	91 83       	std	Z+1, r25	; 0x01
    25cc:	80 83       	st	Z, r24
    25ce:	1f c0       	rjmp	.+62     	; 0x260e <LCD_voidInit+0x15e>
    25d0:	fe 01       	movw	r30, r28
    25d2:	e1 5b       	subi	r30, 0xB1	; 177
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	88 ec       	ldi	r24, 0xC8	; 200
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	91 83       	std	Z+1, r25	; 0x01
    25dc:	80 83       	st	Z, r24
    25de:	fe 01       	movw	r30, r28
    25e0:	e1 5b       	subi	r30, 0xB1	; 177
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	91 81       	ldd	r25, Z+1	; 0x01
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <LCD_voidInit+0x138>
    25ec:	fe 01       	movw	r30, r28
    25ee:	e1 5b       	subi	r30, 0xB1	; 177
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f6:	de 01       	movw	r26, r28
    25f8:	af 5a       	subi	r26, 0xAF	; 175
    25fa:	bf 4f       	sbci	r27, 0xFF	; 255
    25fc:	fe 01       	movw	r30, r28
    25fe:	ef 5a       	subi	r30, 0xAF	; 175
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	80 81       	ld	r24, Z
    2604:	91 81       	ldd	r25, Z+1	; 0x01
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	11 96       	adiw	r26, 0x01	; 1
    260a:	9c 93       	st	X, r25
    260c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	fe 01       	movw	r30, r28
    2610:	ef 5a       	subi	r30, 0xAF	; 175
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	d1 f6       	brne	.-76     	; 0x25d0 <LCD_voidInit+0x120>
    261c:	27 c0       	rjmp	.+78     	; 0x266c <LCD_voidInit+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261e:	8e 01       	movw	r16, r28
    2620:	0f 5a       	subi	r16, 0xAF	; 175
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	fe 01       	movw	r30, r28
    2626:	ed 5a       	subi	r30, 0xAD	; 173
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	f8 01       	movw	r30, r16
    263c:	91 83       	std	Z+1, r25	; 0x01
    263e:	80 83       	st	Z, r24
    2640:	de 01       	movw	r26, r28
    2642:	a3 5b       	subi	r26, 0xB3	; 179
    2644:	bf 4f       	sbci	r27, 0xFF	; 255
    2646:	fe 01       	movw	r30, r28
    2648:	ef 5a       	subi	r30, 0xAF	; 175
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 81       	ld	r24, Z
    264e:	91 81       	ldd	r25, Z+1	; 0x01
    2650:	8d 93       	st	X+, r24
    2652:	9c 93       	st	X, r25
    2654:	fe 01       	movw	r30, r28
    2656:	e3 5b       	subi	r30, 0xB3	; 179
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	91 81       	ldd	r25, Z+1	; 0x01
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <LCD_voidInit+0x1ae>
    2662:	fe 01       	movw	r30, r28
    2664:	e3 5b       	subi	r30, 0xB3	; 179
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	91 83       	std	Z+1, r25	; 0x01
    266a:	80 83       	st	Z, r24
	
	//Wait for 35 ms so that VDD rises to 4.5 V
	_delay_ms(35);
	
	//set RS to 0 i.e. send command mode
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	63 e0       	ldi	r22, 0x03	; 3
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	 */
	/*
	 *Since this is 4 bit mode --> a single command or data is sent on two separate times (4 bits at a time)
	 */
	//0010
	private_voidWriteHalfPort(0b0010);
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	0e 94 5d 18 	call	0x30ba	; 0x30ba <private_voidWriteHalfPort>
	 *Enable Pulse *//* H => L
	 *Enable works via rising/falling edges.
	 *To send commands --> High to low state switch (1 to 0).
	 *You send enable pulse each time 4 bits are sent (4 bit mode) --> inform LCD MC
	 */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	62 e0       	ldi	r22, 0x02	; 2
    2680:	41 e0       	ldi	r20, 0x01	; 1
    2682:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    2686:	fe 01       	movw	r30, r28
    2688:	e7 5b       	subi	r30, 0xB7	; 183
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e8       	ldi	r26, 0x80	; 128
    2692:	bf e3       	ldi	r27, 0x3F	; 63
    2694:	80 83       	st	Z, r24
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	a2 83       	std	Z+2, r26	; 0x02
    269a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	8e 01       	movw	r16, r28
    269e:	0b 5b       	subi	r16, 0xBB	; 187
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	fe 01       	movw	r30, r28
    26a4:	e7 5b       	subi	r30, 0xB7	; 183
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a ef       	ldi	r20, 0xFA	; 250
    26b6:	54 e4       	ldi	r21, 0x44	; 68
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	f8 01       	movw	r30, r16
    26c2:	80 83       	st	Z, r24
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	a2 83       	std	Z+2, r26	; 0x02
    26c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ca:	fe 01       	movw	r30, r28
    26cc:	eb 5b       	subi	r30, 0xBB	; 187
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	44 f4       	brge	.+16     	; 0x26f8 <LCD_voidInit+0x248>
		__ticks = 1;
    26e8:	fe 01       	movw	r30, r28
    26ea:	ed 5b       	subi	r30, 0xBD	; 189
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
    26f6:	64 c0       	rjmp	.+200    	; 0x27c0 <LCD_voidInit+0x310>
	else if (__tmp > 65535)
    26f8:	fe 01       	movw	r30, r28
    26fa:	eb 5b       	subi	r30, 0xBB	; 187
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	60 81       	ld	r22, Z
    2700:	71 81       	ldd	r23, Z+1	; 0x01
    2702:	82 81       	ldd	r24, Z+2	; 0x02
    2704:	93 81       	ldd	r25, Z+3	; 0x03
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	3f ef       	ldi	r19, 0xFF	; 255
    270a:	4f e7       	ldi	r20, 0x7F	; 127
    270c:	57 e4       	ldi	r21, 0x47	; 71
    270e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2712:	18 16       	cp	r1, r24
    2714:	0c f0       	brlt	.+2      	; 0x2718 <LCD_voidInit+0x268>
    2716:	43 c0       	rjmp	.+134    	; 0x279e <LCD_voidInit+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2718:	fe 01       	movw	r30, r28
    271a:	e7 5b       	subi	r30, 0xB7	; 183
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	60 81       	ld	r22, Z
    2720:	71 81       	ldd	r23, Z+1	; 0x01
    2722:	82 81       	ldd	r24, Z+2	; 0x02
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e2       	ldi	r20, 0x20	; 32
    272c:	51 e4       	ldi	r21, 0x41	; 65
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8e 01       	movw	r16, r28
    2738:	0d 5b       	subi	r16, 0xBD	; 189
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	f8 01       	movw	r30, r16
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	1f c0       	rjmp	.+62     	; 0x278e <LCD_voidInit+0x2de>
    2750:	fe 01       	movw	r30, r28
    2752:	ef 5b       	subi	r30, 0xBF	; 191
    2754:	ff 4f       	sbci	r31, 0xFF	; 255
    2756:	88 ec       	ldi	r24, 0xC8	; 200
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	80 83       	st	Z, r24
    275e:	fe 01       	movw	r30, r28
    2760:	ef 5b       	subi	r30, 0xBF	; 191
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	80 81       	ld	r24, Z
    2766:	91 81       	ldd	r25, Z+1	; 0x01
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <LCD_voidInit+0x2b8>
    276c:	fe 01       	movw	r30, r28
    276e:	ef 5b       	subi	r30, 0xBF	; 191
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2776:	de 01       	movw	r26, r28
    2778:	ad 5b       	subi	r26, 0xBD	; 189
    277a:	bf 4f       	sbci	r27, 0xFF	; 255
    277c:	fe 01       	movw	r30, r28
    277e:	ed 5b       	subi	r30, 0xBD	; 189
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	80 81       	ld	r24, Z
    2784:	91 81       	ldd	r25, Z+1	; 0x01
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	11 96       	adiw	r26, 0x01	; 1
    278a:	9c 93       	st	X, r25
    278c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    278e:	fe 01       	movw	r30, r28
    2790:	ed 5b       	subi	r30, 0xBD	; 189
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	91 81       	ldd	r25, Z+1	; 0x01
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	d1 f6       	brne	.-76     	; 0x2750 <LCD_voidInit+0x2a0>
    279c:	24 c0       	rjmp	.+72     	; 0x27e6 <LCD_voidInit+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279e:	8e 01       	movw	r16, r28
    27a0:	0d 5b       	subi	r16, 0xBD	; 189
    27a2:	1f 4f       	sbci	r17, 0xFF	; 255
    27a4:	fe 01       	movw	r30, r28
    27a6:	eb 5b       	subi	r30, 0xBB	; 187
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	60 81       	ld	r22, Z
    27ac:	71 81       	ldd	r23, Z+1	; 0x01
    27ae:	82 81       	ldd	r24, Z+2	; 0x02
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	f8 01       	movw	r30, r16
    27bc:	91 83       	std	Z+1, r25	; 0x01
    27be:	80 83       	st	Z, r24
    27c0:	fe 01       	movw	r30, r28
    27c2:	ed 5b       	subi	r30, 0xBD	; 189
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	91 81       	ldd	r25, Z+1	; 0x01
    27ca:	fe 01       	movw	r30, r28
    27cc:	ff 96       	adiw	r30, 0x3f	; 63
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
    27d2:	fe 01       	movw	r30, r28
    27d4:	ff 96       	adiw	r30, 0x3f	; 63
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_voidInit+0x32a>
    27de:	fe 01       	movw	r30, r28
    27e0:	ff 96       	adiw	r30, 0x3f	; 63
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	62 e0       	ldi	r22, 0x02	; 2
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	/*
	 *Send next 8 bits of function set instruction
	 *Sets interface data length (DL:8-bit/4-bit), numbers of display line (N: 2-line/l-line), and display font type F: (5x11dots/5x8dots)
	 *0010 and 10xx --> N = 1 and F = 1 and x's can be 0 or 1
	 */
	LCD_voidSendCmnd(0b00101000);	
    27f0:	88 e2       	ldi	r24, 0x28	; 40
    27f2:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	a4 e3       	ldi	r26, 0x34	; 52
    27fc:	b2 e4       	ldi	r27, 0x42	; 66
    27fe:	8b af       	std	Y+59, r24	; 0x3b
    2800:	9c af       	std	Y+60, r25	; 0x3c
    2802:	ad af       	std	Y+61, r26	; 0x3d
    2804:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2806:	6b ad       	ldd	r22, Y+59	; 0x3b
    2808:	7c ad       	ldd	r23, Y+60	; 0x3c
    280a:	8d ad       	ldd	r24, Y+61	; 0x3d
    280c:	9e ad       	ldd	r25, Y+62	; 0x3e
    280e:	2b ea       	ldi	r18, 0xAB	; 171
    2810:	3a ea       	ldi	r19, 0xAA	; 170
    2812:	4a e2       	ldi	r20, 0x2A	; 42
    2814:	50 e4       	ldi	r21, 0x40	; 64
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	8f ab       	std	Y+55, r24	; 0x37
    2820:	98 af       	std	Y+56, r25	; 0x38
    2822:	a9 af       	std	Y+57, r26	; 0x39
    2824:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2826:	6f a9       	ldd	r22, Y+55	; 0x37
    2828:	78 ad       	ldd	r23, Y+56	; 0x38
    282a:	89 ad       	ldd	r24, Y+57	; 0x39
    282c:	9a ad       	ldd	r25, Y+58	; 0x3a
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	1c f4       	brge	.+6      	; 0x2844 <LCD_voidInit+0x394>
		__ticks = 1;
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	8e ab       	std	Y+54, r24	; 0x36
    2842:	91 c0       	rjmp	.+290    	; 0x2966 <LCD_voidInit+0x4b6>
	else if (__tmp > 255)
    2844:	6f a9       	ldd	r22, Y+55	; 0x37
    2846:	78 ad       	ldd	r23, Y+56	; 0x38
    2848:	89 ad       	ldd	r24, Y+57	; 0x39
    284a:	9a ad       	ldd	r25, Y+58	; 0x3a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	53 e4       	ldi	r21, 0x43	; 67
    2854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	0c f0       	brlt	.+2      	; 0x285e <LCD_voidInit+0x3ae>
    285c:	7b c0       	rjmp	.+246    	; 0x2954 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    285e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2860:	7c ad       	ldd	r23, Y+60	; 0x3c
    2862:	8d ad       	ldd	r24, Y+61	; 0x3d
    2864:	9e ad       	ldd	r25, Y+62	; 0x3e
    2866:	20 e0       	ldi	r18, 0x00	; 0
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	4a e7       	ldi	r20, 0x7A	; 122
    286c:	54 e4       	ldi	r21, 0x44	; 68
    286e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	8a ab       	std	Y+50, r24	; 0x32
    2878:	9b ab       	std	Y+51, r25	; 0x33
    287a:	ac ab       	std	Y+52, r26	; 0x34
    287c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287e:	6a a9       	ldd	r22, Y+50	; 0x32
    2880:	7b a9       	ldd	r23, Y+51	; 0x33
    2882:	8c a9       	ldd	r24, Y+52	; 0x34
    2884:	9d a9       	ldd	r25, Y+53	; 0x35
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	4a ef       	ldi	r20, 0xFA	; 250
    288c:	54 e4       	ldi	r21, 0x44	; 68
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	8e a7       	std	Y+46, r24	; 0x2e
    2898:	9f a7       	std	Y+47, r25	; 0x2f
    289a:	a8 ab       	std	Y+48, r26	; 0x30
    289c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    289e:	6e a5       	ldd	r22, Y+46	; 0x2e
    28a0:	7f a5       	ldd	r23, Y+47	; 0x2f
    28a2:	88 a9       	ldd	r24, Y+48	; 0x30
    28a4:	99 a9       	ldd	r25, Y+49	; 0x31
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e8       	ldi	r20, 0x80	; 128
    28ac:	5f e3       	ldi	r21, 0x3F	; 63
    28ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28b2:	88 23       	and	r24, r24
    28b4:	2c f4       	brge	.+10     	; 0x28c0 <LCD_voidInit+0x410>
		__ticks = 1;
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9d a7       	std	Y+45, r25	; 0x2d
    28bc:	8c a7       	std	Y+44, r24	; 0x2c
    28be:	3f c0       	rjmp	.+126    	; 0x293e <LCD_voidInit+0x48e>
	else if (__tmp > 65535)
    28c0:	6e a5       	ldd	r22, Y+46	; 0x2e
    28c2:	7f a5       	ldd	r23, Y+47	; 0x2f
    28c4:	88 a9       	ldd	r24, Y+48	; 0x30
    28c6:	99 a9       	ldd	r25, Y+49	; 0x31
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	3f ef       	ldi	r19, 0xFF	; 255
    28cc:	4f e7       	ldi	r20, 0x7F	; 127
    28ce:	57 e4       	ldi	r21, 0x47	; 71
    28d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28d4:	18 16       	cp	r1, r24
    28d6:	4c f5       	brge	.+82     	; 0x292a <LCD_voidInit+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d8:	6a a9       	ldd	r22, Y+50	; 0x32
    28da:	7b a9       	ldd	r23, Y+51	; 0x33
    28dc:	8c a9       	ldd	r24, Y+52	; 0x34
    28de:	9d a9       	ldd	r25, Y+53	; 0x35
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e2       	ldi	r20, 0x20	; 32
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	9d a7       	std	Y+45, r25	; 0x2d
    28fe:	8c a7       	std	Y+44, r24	; 0x2c
    2900:	0f c0       	rjmp	.+30     	; 0x2920 <LCD_voidInit+0x470>
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9b a7       	std	Y+43, r25	; 0x2b
    2908:	8a a7       	std	Y+42, r24	; 0x2a
    290a:	8a a5       	ldd	r24, Y+42	; 0x2a
    290c:	9b a5       	ldd	r25, Y+43	; 0x2b
    290e:	01 97       	sbiw	r24, 0x01	; 1
    2910:	f1 f7       	brne	.-4      	; 0x290e <LCD_voidInit+0x45e>
    2912:	9b a7       	std	Y+43, r25	; 0x2b
    2914:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2916:	8c a5       	ldd	r24, Y+44	; 0x2c
    2918:	9d a5       	ldd	r25, Y+45	; 0x2d
    291a:	01 97       	sbiw	r24, 0x01	; 1
    291c:	9d a7       	std	Y+45, r25	; 0x2d
    291e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2920:	8c a5       	ldd	r24, Y+44	; 0x2c
    2922:	9d a5       	ldd	r25, Y+45	; 0x2d
    2924:	00 97       	sbiw	r24, 0x00	; 0
    2926:	69 f7       	brne	.-38     	; 0x2902 <LCD_voidInit+0x452>
    2928:	24 c0       	rjmp	.+72     	; 0x2972 <LCD_voidInit+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292a:	6e a5       	ldd	r22, Y+46	; 0x2e
    292c:	7f a5       	ldd	r23, Y+47	; 0x2f
    292e:	88 a9       	ldd	r24, Y+48	; 0x30
    2930:	99 a9       	ldd	r25, Y+49	; 0x31
    2932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	9d a7       	std	Y+45, r25	; 0x2d
    293c:	8c a7       	std	Y+44, r24	; 0x2c
    293e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2940:	9d a5       	ldd	r25, Y+45	; 0x2d
    2942:	99 a7       	std	Y+41, r25	; 0x29
    2944:	88 a7       	std	Y+40, r24	; 0x28
    2946:	88 a5       	ldd	r24, Y+40	; 0x28
    2948:	99 a5       	ldd	r25, Y+41	; 0x29
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	f1 f7       	brne	.-4      	; 0x294a <LCD_voidInit+0x49a>
    294e:	99 a7       	std	Y+41, r25	; 0x29
    2950:	88 a7       	std	Y+40, r24	; 0x28
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <LCD_voidInit+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2954:	6f a9       	ldd	r22, Y+55	; 0x37
    2956:	78 ad       	ldd	r23, Y+56	; 0x38
    2958:	89 ad       	ldd	r24, Y+57	; 0x39
    295a:	9a ad       	ldd	r25, Y+58	; 0x3a
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8e ab       	std	Y+54, r24	; 0x36
    2966:	8e a9       	ldd	r24, Y+54	; 0x36
    2968:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    296a:	8f a1       	ldd	r24, Y+39	; 0x27
    296c:	8a 95       	dec	r24
    296e:	f1 f7       	brne	.-4      	; 0x296c <LCD_voidInit+0x4bc>
    2970:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(45);
	
	//2- Display on off Control (DisplayOn, Cursor on, Blink on)
	//D = 1 (display on), C = 1 (cursor on), B = 1 (blink on)
	LCD_voidSendCmnd(0b00001111);
    2972:	8f e0       	ldi	r24, 0x0F	; 15
    2974:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	a4 e3       	ldi	r26, 0x34	; 52
    297e:	b2 e4       	ldi	r27, 0x42	; 66
    2980:	8b a3       	std	Y+35, r24	; 0x23
    2982:	9c a3       	std	Y+36, r25	; 0x24
    2984:	ad a3       	std	Y+37, r26	; 0x25
    2986:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2988:	6b a1       	ldd	r22, Y+35	; 0x23
    298a:	7c a1       	ldd	r23, Y+36	; 0x24
    298c:	8d a1       	ldd	r24, Y+37	; 0x25
    298e:	9e a1       	ldd	r25, Y+38	; 0x26
    2990:	2b ea       	ldi	r18, 0xAB	; 171
    2992:	3a ea       	ldi	r19, 0xAA	; 170
    2994:	4a e2       	ldi	r20, 0x2A	; 42
    2996:	50 e4       	ldi	r21, 0x40	; 64
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	8f 8f       	std	Y+31, r24	; 0x1f
    29a2:	98 a3       	std	Y+32, r25	; 0x20
    29a4:	a9 a3       	std	Y+33, r26	; 0x21
    29a6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    29a8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    29aa:	78 a1       	ldd	r23, Y+32	; 0x20
    29ac:	89 a1       	ldd	r24, Y+33	; 0x21
    29ae:	9a a1       	ldd	r25, Y+34	; 0x22
    29b0:	20 e0       	ldi	r18, 0x00	; 0
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	40 e8       	ldi	r20, 0x80	; 128
    29b6:	5f e3       	ldi	r21, 0x3F	; 63
    29b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29bc:	88 23       	and	r24, r24
    29be:	1c f4       	brge	.+6      	; 0x29c6 <LCD_voidInit+0x516>
		__ticks = 1;
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	8e 8f       	std	Y+30, r24	; 0x1e
    29c4:	91 c0       	rjmp	.+290    	; 0x2ae8 <LCD_voidInit+0x638>
	else if (__tmp > 255)
    29c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    29c8:	78 a1       	ldd	r23, Y+32	; 0x20
    29ca:	89 a1       	ldd	r24, Y+33	; 0x21
    29cc:	9a a1       	ldd	r25, Y+34	; 0x22
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	53 e4       	ldi	r21, 0x43	; 67
    29d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	0c f0       	brlt	.+2      	; 0x29e0 <LCD_voidInit+0x530>
    29de:	7b c0       	rjmp	.+246    	; 0x2ad6 <LCD_voidInit+0x626>
	{
		_delay_ms(__us / 1000.0);
    29e0:	6b a1       	ldd	r22, Y+35	; 0x23
    29e2:	7c a1       	ldd	r23, Y+36	; 0x24
    29e4:	8d a1       	ldd	r24, Y+37	; 0x25
    29e6:	9e a1       	ldd	r25, Y+38	; 0x26
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	4a e7       	ldi	r20, 0x7A	; 122
    29ee:	54 e4       	ldi	r21, 0x44	; 68
    29f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	8a 8f       	std	Y+26, r24	; 0x1a
    29fa:	9b 8f       	std	Y+27, r25	; 0x1b
    29fc:	ac 8f       	std	Y+28, r26	; 0x1c
    29fe:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a00:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a02:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2a04:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a06:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	4a ef       	ldi	r20, 0xFA	; 250
    2a0e:	54 e4       	ldi	r21, 0x44	; 68
    2a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	8e 8b       	std	Y+22, r24	; 0x16
    2a1a:	9f 8b       	std	Y+23, r25	; 0x17
    2a1c:	a8 8f       	std	Y+24, r26	; 0x18
    2a1e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2a20:	6e 89       	ldd	r22, Y+22	; 0x16
    2a22:	7f 89       	ldd	r23, Y+23	; 0x17
    2a24:	88 8d       	ldd	r24, Y+24	; 0x18
    2a26:	99 8d       	ldd	r25, Y+25	; 0x19
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e8       	ldi	r20, 0x80	; 128
    2a2e:	5f e3       	ldi	r21, 0x3F	; 63
    2a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a34:	88 23       	and	r24, r24
    2a36:	2c f4       	brge	.+10     	; 0x2a42 <LCD_voidInit+0x592>
		__ticks = 1;
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	9d 8b       	std	Y+21, r25	; 0x15
    2a3e:	8c 8b       	std	Y+20, r24	; 0x14
    2a40:	3f c0       	rjmp	.+126    	; 0x2ac0 <LCD_voidInit+0x610>
	else if (__tmp > 65535)
    2a42:	6e 89       	ldd	r22, Y+22	; 0x16
    2a44:	7f 89       	ldd	r23, Y+23	; 0x17
    2a46:	88 8d       	ldd	r24, Y+24	; 0x18
    2a48:	99 8d       	ldd	r25, Y+25	; 0x19
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	3f ef       	ldi	r19, 0xFF	; 255
    2a4e:	4f e7       	ldi	r20, 0x7F	; 127
    2a50:	57 e4       	ldi	r21, 0x47	; 71
    2a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a56:	18 16       	cp	r1, r24
    2a58:	4c f5       	brge	.+82     	; 0x2aac <LCD_voidInit+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2a5c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2a5e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a60:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	40 e2       	ldi	r20, 0x20	; 32
    2a68:	51 e4       	ldi	r21, 0x41	; 65
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	bc 01       	movw	r22, r24
    2a74:	cd 01       	movw	r24, r26
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9d 8b       	std	Y+21, r25	; 0x15
    2a80:	8c 8b       	std	Y+20, r24	; 0x14
    2a82:	0f c0       	rjmp	.+30     	; 0x2aa2 <LCD_voidInit+0x5f2>
    2a84:	88 ec       	ldi	r24, 0xC8	; 200
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	9b 8b       	std	Y+19, r25	; 0x13
    2a8a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a8c:	8a 89       	ldd	r24, Y+18	; 0x12
    2a8e:	9b 89       	ldd	r25, Y+19	; 0x13
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_voidInit+0x5e0>
    2a94:	9b 8b       	std	Y+19, r25	; 0x13
    2a96:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a98:	8c 89       	ldd	r24, Y+20	; 0x14
    2a9a:	9d 89       	ldd	r25, Y+21	; 0x15
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	9d 8b       	std	Y+21, r25	; 0x15
    2aa0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa2:	8c 89       	ldd	r24, Y+20	; 0x14
    2aa4:	9d 89       	ldd	r25, Y+21	; 0x15
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	69 f7       	brne	.-38     	; 0x2a84 <LCD_voidInit+0x5d4>
    2aaa:	24 c0       	rjmp	.+72     	; 0x2af4 <LCD_voidInit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aac:	6e 89       	ldd	r22, Y+22	; 0x16
    2aae:	7f 89       	ldd	r23, Y+23	; 0x17
    2ab0:	88 8d       	ldd	r24, Y+24	; 0x18
    2ab2:	99 8d       	ldd	r25, Y+25	; 0x19
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9d 8b       	std	Y+21, r25	; 0x15
    2abe:	8c 8b       	std	Y+20, r24	; 0x14
    2ac0:	8c 89       	ldd	r24, Y+20	; 0x14
    2ac2:	9d 89       	ldd	r25, Y+21	; 0x15
    2ac4:	99 8b       	std	Y+17, r25	; 0x11
    2ac6:	88 8b       	std	Y+16, r24	; 0x10
    2ac8:	88 89       	ldd	r24, Y+16	; 0x10
    2aca:	99 89       	ldd	r25, Y+17	; 0x11
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	f1 f7       	brne	.-4      	; 0x2acc <LCD_voidInit+0x61c>
    2ad0:	99 8b       	std	Y+17, r25	; 0x11
    2ad2:	88 8b       	std	Y+16, r24	; 0x10
    2ad4:	0f c0       	rjmp	.+30     	; 0x2af4 <LCD_voidInit+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ad6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ad8:	78 a1       	ldd	r23, Y+32	; 0x20
    2ada:	89 a1       	ldd	r24, Y+33	; 0x21
    2adc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	8e 8f       	std	Y+30, r24	; 0x1e
    2ae8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aea:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aee:	8a 95       	dec	r24
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <LCD_voidInit+0x63e>
    2af2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	
	//3- Clear Display
	LCD_voidSendCmnd(0b00000001);
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e4       	ldi	r27, 0x40	; 64
    2b02:	8b 87       	std	Y+11, r24	; 0x0b
    2b04:	9c 87       	std	Y+12, r25	; 0x0c
    2b06:	ad 87       	std	Y+13, r26	; 0x0d
    2b08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	4a ef       	ldi	r20, 0xFA	; 250
    2b18:	54 e4       	ldi	r21, 0x44	; 68
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	8f 83       	std	Y+7, r24	; 0x07
    2b24:	98 87       	std	Y+8, r25	; 0x08
    2b26:	a9 87       	std	Y+9, r26	; 0x09
    2b28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2c:	78 85       	ldd	r23, Y+8	; 0x08
    2b2e:	89 85       	ldd	r24, Y+9	; 0x09
    2b30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	5f e3       	ldi	r21, 0x3F	; 63
    2b3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3e:	88 23       	and	r24, r24
    2b40:	2c f4       	brge	.+10     	; 0x2b4c <LCD_voidInit+0x69c>
		__ticks = 1;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
    2b4a:	3f c0       	rjmp	.+126    	; 0x2bca <LCD_voidInit+0x71a>
	else if (__tmp > 65535)
    2b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4e:	78 85       	ldd	r23, Y+8	; 0x08
    2b50:	89 85       	ldd	r24, Y+9	; 0x09
    2b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	3f ef       	ldi	r19, 0xFF	; 255
    2b58:	4f e7       	ldi	r20, 0x7F	; 127
    2b5a:	57 e4       	ldi	r21, 0x47	; 71
    2b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b60:	18 16       	cp	r1, r24
    2b62:	4c f5       	brge	.+82     	; 0x2bb6 <LCD_voidInit+0x706>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9e 83       	std	Y+6, r25	; 0x06
    2b8a:	8d 83       	std	Y+5, r24	; 0x05
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <LCD_voidInit+0x6fc>
    2b8e:	88 ec       	ldi	r24, 0xC8	; 200
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <LCD_voidInit+0x6ea>
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	9e 83       	std	Y+6, r25	; 0x06
    2baa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	8d 81       	ldd	r24, Y+5	; 0x05
    2bae:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	69 f7       	brne	.-38     	; 0x2b8e <LCD_voidInit+0x6de>
    2bb4:	14 c0       	rjmp	.+40     	; 0x2bde <LCD_voidInit+0x72e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb8:	78 85       	ldd	r23, Y+8	; 0x08
    2bba:	89 85       	ldd	r24, Y+9	; 0x09
    2bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	8d 81       	ldd	r24, Y+5	; 0x05
    2bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <LCD_voidInit+0x726>
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
	
	//4- Set Entry Mode
	/*
	 *Sets cursor move direction and enable the shift of entire display. These operations are performed during data write and read.
	 */
	LCD_voidSendCmnd(0b00000110);
    2bde:	86 e0       	ldi	r24, 0x06	; 6
    2be0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
}
    2be4:	c6 5a       	subi	r28, 0xA6	; 166
    2be6:	df 4f       	sbci	r29, 0xFF	; 255
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	de bf       	out	0x3e, r29	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	cd bf       	out	0x3d, r28	; 61
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	1f 91       	pop	r17
    2bf8:	0f 91       	pop	r16
    2bfa:	08 95       	ret

00002bfc <LCD_voidSendCmnd>:
/*
 *First function implemented in this .c file.
 *
 */
void LCD_voidSendCmnd(u8 copy_u8Cmnd)
{
    2bfc:	df 93       	push	r29
    2bfe:	cf 93       	push	r28
    2c00:	cd b7       	in	r28, 0x3d	; 61
    2c02:	de b7       	in	r29, 0x3e	; 62
    2c04:	6d 97       	sbiw	r28, 0x1d	; 29
    2c06:	0f b6       	in	r0, 0x3f	; 63
    2c08:	f8 94       	cli
    2c0a:	de bf       	out	0x3e, r29	; 62
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	cd bf       	out	0x3d, r28	; 61
    2c10:	8d 8f       	std	Y+29, r24	; 0x1d
	//set Rs pin = 0 (write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	63 e0       	ldi	r22, 0x03	; 3
    2c16:	40 e0       	ldi	r20, 0x00	; 0
    2c18:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	
	//Write The left-most (most sig.) 4 bits Of command on data pins
	private_voidWriteHalfPort(copy_u8Cmnd>>4);
    2c1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c1e:	82 95       	swap	r24
    2c20:	8f 70       	andi	r24, 0x0F	; 15
    2c22:	0e 94 5d 18 	call	0x30ba	; 0x30ba <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	//enable pulse (high to low switch) informs LCD MC that 4 bits were sent
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	62 e0       	ldi	r22, 0x02	; 2
    2c2a:	41 e0       	ldi	r20, 0x01	; 1
    2c2c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    2c30:	80 e0       	ldi	r24, 0x00	; 0
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	a0 e8       	ldi	r26, 0x80	; 128
    2c36:	bf e3       	ldi	r27, 0x3F	; 63
    2c38:	89 8f       	std	Y+25, r24	; 0x19
    2c3a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c3c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c3e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c40:	69 8d       	ldd	r22, Y+25	; 0x19
    2c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	4a ef       	ldi	r20, 0xFA	; 250
    2c4e:	54 e4       	ldi	r21, 0x44	; 68
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	8d 8b       	std	Y+21, r24	; 0x15
    2c5a:	9e 8b       	std	Y+22, r25	; 0x16
    2c5c:	af 8b       	std	Y+23, r26	; 0x17
    2c5e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c60:	6d 89       	ldd	r22, Y+21	; 0x15
    2c62:	7e 89       	ldd	r23, Y+22	; 0x16
    2c64:	8f 89       	ldd	r24, Y+23	; 0x17
    2c66:	98 8d       	ldd	r25, Y+24	; 0x18
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e8       	ldi	r20, 0x80	; 128
    2c6e:	5f e3       	ldi	r21, 0x3F	; 63
    2c70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c74:	88 23       	and	r24, r24
    2c76:	2c f4       	brge	.+10     	; 0x2c82 <LCD_voidSendCmnd+0x86>
		__ticks = 1;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9c 8b       	std	Y+20, r25	; 0x14
    2c7e:	8b 8b       	std	Y+19, r24	; 0x13
    2c80:	3f c0       	rjmp	.+126    	; 0x2d00 <LCD_voidSendCmnd+0x104>
	else if (__tmp > 65535)
    2c82:	6d 89       	ldd	r22, Y+21	; 0x15
    2c84:	7e 89       	ldd	r23, Y+22	; 0x16
    2c86:	8f 89       	ldd	r24, Y+23	; 0x17
    2c88:	98 8d       	ldd	r25, Y+24	; 0x18
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	3f ef       	ldi	r19, 0xFF	; 255
    2c8e:	4f e7       	ldi	r20, 0x7F	; 127
    2c90:	57 e4       	ldi	r21, 0x47	; 71
    2c92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c96:	18 16       	cp	r1, r24
    2c98:	4c f5       	brge	.+82     	; 0x2cec <LCD_voidSendCmnd+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e2       	ldi	r20, 0x20	; 32
    2ca8:	51 e4       	ldi	r21, 0x41	; 65
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	bc 01       	movw	r22, r24
    2cb4:	cd 01       	movw	r24, r26
    2cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cba:	dc 01       	movw	r26, r24
    2cbc:	cb 01       	movw	r24, r22
    2cbe:	9c 8b       	std	Y+20, r25	; 0x14
    2cc0:	8b 8b       	std	Y+19, r24	; 0x13
    2cc2:	0f c0       	rjmp	.+30     	; 0x2ce2 <LCD_voidSendCmnd+0xe6>
    2cc4:	88 ec       	ldi	r24, 0xC8	; 200
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9a 8b       	std	Y+18, r25	; 0x12
    2cca:	89 8b       	std	Y+17, r24	; 0x11
    2ccc:	89 89       	ldd	r24, Y+17	; 0x11
    2cce:	9a 89       	ldd	r25, Y+18	; 0x12
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_voidSendCmnd+0xd4>
    2cd4:	9a 8b       	std	Y+18, r25	; 0x12
    2cd6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	9c 8b       	std	Y+20, r25	; 0x14
    2ce0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ce6:	00 97       	sbiw	r24, 0x00	; 0
    2ce8:	69 f7       	brne	.-38     	; 0x2cc4 <LCD_voidSendCmnd+0xc8>
    2cea:	14 c0       	rjmp	.+40     	; 0x2d14 <LCD_voidSendCmnd+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cec:	6d 89       	ldd	r22, Y+21	; 0x15
    2cee:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cf2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	9c 8b       	std	Y+20, r25	; 0x14
    2cfe:	8b 8b       	std	Y+19, r24	; 0x13
    2d00:	8b 89       	ldd	r24, Y+19	; 0x13
    2d02:	9c 89       	ldd	r25, Y+20	; 0x14
    2d04:	98 8b       	std	Y+16, r25	; 0x10
    2d06:	8f 87       	std	Y+15, r24	; 0x0f
    2d08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d0a:	98 89       	ldd	r25, Y+16	; 0x10
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <LCD_voidSendCmnd+0x110>
    2d10:	98 8b       	std	Y+16, r25	; 0x10
    2d12:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	62 e0       	ldi	r22, 0x02	; 2
    2d18:	40 e0       	ldi	r20, 0x00	; 0
    2d1a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	
	//Write The right-most (least sig.) 4 bits Of command on data pins
	private_voidWriteHalfPort(copy_u8Cmnd);
    2d1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d20:	0e 94 5d 18 	call	0x30ba	; 0x30ba <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    2d24:	80 e0       	ldi	r24, 0x00	; 0
    2d26:	62 e0       	ldi	r22, 0x02	; 2
    2d28:	41 e0       	ldi	r20, 0x01	; 1
    2d2a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	a0 e8       	ldi	r26, 0x80	; 128
    2d34:	bf e3       	ldi	r27, 0x3F	; 63
    2d36:	8b 87       	std	Y+11, r24	; 0x0b
    2d38:	9c 87       	std	Y+12, r25	; 0x0c
    2d3a:	ad 87       	std	Y+13, r26	; 0x0d
    2d3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4a ef       	ldi	r20, 0xFA	; 250
    2d4c:	54 e4       	ldi	r21, 0x44	; 68
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	8f 83       	std	Y+7, r24	; 0x07
    2d58:	98 87       	std	Y+8, r25	; 0x08
    2d5a:	a9 87       	std	Y+9, r26	; 0x09
    2d5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	2c f4       	brge	.+10     	; 0x2d80 <LCD_voidSendCmnd+0x184>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9e 83       	std	Y+6, r25	; 0x06
    2d7c:	8d 83       	std	Y+5, r24	; 0x05
    2d7e:	3f c0       	rjmp	.+126    	; 0x2dfe <LCD_voidSendCmnd+0x202>
	else if (__tmp > 65535)
    2d80:	6f 81       	ldd	r22, Y+7	; 0x07
    2d82:	78 85       	ldd	r23, Y+8	; 0x08
    2d84:	89 85       	ldd	r24, Y+9	; 0x09
    2d86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	3f ef       	ldi	r19, 0xFF	; 255
    2d8c:	4f e7       	ldi	r20, 0x7F	; 127
    2d8e:	57 e4       	ldi	r21, 0x47	; 71
    2d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d94:	18 16       	cp	r1, r24
    2d96:	4c f5       	brge	.+82     	; 0x2dea <LCD_voidSendCmnd+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	40 e2       	ldi	r20, 0x20	; 32
    2da6:	51 e4       	ldi	r21, 0x41	; 65
    2da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dac:	dc 01       	movw	r26, r24
    2dae:	cb 01       	movw	r24, r22
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	9e 83       	std	Y+6, r25	; 0x06
    2dbe:	8d 83       	std	Y+5, r24	; 0x05
    2dc0:	0f c0       	rjmp	.+30     	; 0x2de0 <LCD_voidSendCmnd+0x1e4>
    2dc2:	88 ec       	ldi	r24, 0xC8	; 200
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9c 83       	std	Y+4, r25	; 0x04
    2dc8:	8b 83       	std	Y+3, r24	; 0x03
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <LCD_voidSendCmnd+0x1d2>
    2dd2:	9c 83       	std	Y+4, r25	; 0x04
    2dd4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	9e 81       	ldd	r25, Y+6	; 0x06
    2de4:	00 97       	sbiw	r24, 0x00	; 0
    2de6:	69 f7       	brne	.-38     	; 0x2dc2 <LCD_voidSendCmnd+0x1c6>
    2de8:	14 c0       	rjmp	.+40     	; 0x2e12 <LCD_voidSendCmnd+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dea:	6f 81       	ldd	r22, Y+7	; 0x07
    2dec:	78 85       	ldd	r23, Y+8	; 0x08
    2dee:	89 85       	ldd	r24, Y+9	; 0x09
    2df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	9e 83       	std	Y+6, r25	; 0x06
    2dfc:	8d 83       	std	Y+5, r24	; 0x05
    2dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2e00:	9e 81       	ldd	r25, Y+6	; 0x06
    2e02:	9a 83       	std	Y+2, r25	; 0x02
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0a:	01 97       	sbiw	r24, 0x01	; 1
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <LCD_voidSendCmnd+0x20e>
    2e0e:	9a 83       	std	Y+2, r25	; 0x02
    2e10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
}
    2e1c:	6d 96       	adiw	r28, 0x1d	; 29
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <LCD_voidSendChar>:


void LCD_voidSendChar(u8 copy_u8Data)
{
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	6d 97       	sbiw	r28, 0x1d	; 29
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
    2e42:	8d 8f       	std	Y+29, r24	; 0x1d
	//set Rs pin = 1 (write data)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	63 e0       	ldi	r22, 0x03	; 3
    2e48:	41 e0       	ldi	r20, 0x01	; 1
    2e4a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	
	// Write The Most 4 bits Of data on Data Pins
	private_voidWriteHalfPort(copy_u8Data>>4);
    2e4e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e50:	82 95       	swap	r24
    2e52:	8f 70       	andi	r24, 0x0F	; 15
    2e54:	0e 94 5d 18 	call	0x30ba	; 0x30ba <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	62 e0       	ldi	r22, 0x02	; 2
    2e5c:	41 e0       	ldi	r20, 0x01	; 1
    2e5e:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e8       	ldi	r26, 0x80	; 128
    2e68:	bf e3       	ldi	r27, 0x3F	; 63
    2e6a:	89 8f       	std	Y+25, r24	; 0x19
    2e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	69 8d       	ldd	r22, Y+25	; 0x19
    2e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	4a ef       	ldi	r20, 0xFA	; 250
    2e80:	54 e4       	ldi	r21, 0x44	; 68
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	8d 8b       	std	Y+21, r24	; 0x15
    2e8c:	9e 8b       	std	Y+22, r25	; 0x16
    2e8e:	af 8b       	std	Y+23, r26	; 0x17
    2e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e92:	6d 89       	ldd	r22, Y+21	; 0x15
    2e94:	7e 89       	ldd	r23, Y+22	; 0x16
    2e96:	8f 89       	ldd	r24, Y+23	; 0x17
    2e98:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e8       	ldi	r20, 0x80	; 128
    2ea0:	5f e3       	ldi	r21, 0x3F	; 63
    2ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	2c f4       	brge	.+10     	; 0x2eb4 <LCD_voidSendChar+0x86>
		__ticks = 1;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	9c 8b       	std	Y+20, r25	; 0x14
    2eb0:	8b 8b       	std	Y+19, r24	; 0x13
    2eb2:	3f c0       	rjmp	.+126    	; 0x2f32 <LCD_voidSendChar+0x104>
	else if (__tmp > 65535)
    2eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eba:	98 8d       	ldd	r25, Y+24	; 0x18
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	3f ef       	ldi	r19, 0xFF	; 255
    2ec0:	4f e7       	ldi	r20, 0x7F	; 127
    2ec2:	57 e4       	ldi	r21, 0x47	; 71
    2ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ec8:	18 16       	cp	r1, r24
    2eca:	4c f5       	brge	.+82     	; 0x2f1e <LCD_voidSendChar+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e2       	ldi	r20, 0x20	; 32
    2eda:	51 e4       	ldi	r21, 0x41	; 65
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9c 8b       	std	Y+20, r25	; 0x14
    2ef2:	8b 8b       	std	Y+19, r24	; 0x13
    2ef4:	0f c0       	rjmp	.+30     	; 0x2f14 <LCD_voidSendChar+0xe6>
    2ef6:	88 ec       	ldi	r24, 0xC8	; 200
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	9a 8b       	std	Y+18, r25	; 0x12
    2efc:	89 8b       	std	Y+17, r24	; 0x11
    2efe:	89 89       	ldd	r24, Y+17	; 0x11
    2f00:	9a 89       	ldd	r25, Y+18	; 0x12
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <LCD_voidSendChar+0xd4>
    2f06:	9a 8b       	std	Y+18, r25	; 0x12
    2f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	9c 8b       	std	Y+20, r25	; 0x14
    2f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	00 97       	sbiw	r24, 0x00	; 0
    2f1a:	69 f7       	brne	.-38     	; 0x2ef6 <LCD_voidSendChar+0xc8>
    2f1c:	14 c0       	rjmp	.+40     	; 0x2f46 <LCD_voidSendChar+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f20:	7e 89       	ldd	r23, Y+22	; 0x16
    2f22:	8f 89       	ldd	r24, Y+23	; 0x17
    2f24:	98 8d       	ldd	r25, Y+24	; 0x18
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9c 8b       	std	Y+20, r25	; 0x14
    2f30:	8b 8b       	std	Y+19, r24	; 0x13
    2f32:	8b 89       	ldd	r24, Y+19	; 0x13
    2f34:	9c 89       	ldd	r25, Y+20	; 0x14
    2f36:	98 8b       	std	Y+16, r25	; 0x10
    2f38:	8f 87       	std	Y+15, r24	; 0x0f
    2f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3c:	98 89       	ldd	r25, Y+16	; 0x10
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <LCD_voidSendChar+0x110>
    2f42:	98 8b       	std	Y+16, r25	; 0x10
    2f44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	62 e0       	ldi	r22, 0x02	; 2
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	
	// Write The Least 4 bits Of data on Data Pins
	private_voidWriteHalfPort(copy_u8Data);
    2f50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f52:	0e 94 5d 18 	call	0x30ba	; 0x30ba <private_voidWriteHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_HIGH);
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	62 e0       	ldi	r22, 0x02	; 2
    2f5a:	41 e0       	ldi	r20, 0x01	; 1
    2f5c:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	a0 e8       	ldi	r26, 0x80	; 128
    2f66:	bf e3       	ldi	r27, 0x3F	; 63
    2f68:	8b 87       	std	Y+11, r24	; 0x0b
    2f6a:	9c 87       	std	Y+12, r25	; 0x0c
    2f6c:	ad 87       	std	Y+13, r26	; 0x0d
    2f6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a ef       	ldi	r20, 0xFA	; 250
    2f7e:	54 e4       	ldi	r21, 0x44	; 68
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8f 83       	std	Y+7, r24	; 0x07
    2f8a:	98 87       	std	Y+8, r25	; 0x08
    2f8c:	a9 87       	std	Y+9, r26	; 0x09
    2f8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f90:	6f 81       	ldd	r22, Y+7	; 0x07
    2f92:	78 85       	ldd	r23, Y+8	; 0x08
    2f94:	89 85       	ldd	r24, Y+9	; 0x09
    2f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <LCD_voidSendChar+0x184>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9e 83       	std	Y+6, r25	; 0x06
    2fae:	8d 83       	std	Y+5, r24	; 0x05
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <LCD_voidSendChar+0x202>
	else if (__tmp > 65535)
    2fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb4:	78 85       	ldd	r23, Y+8	; 0x08
    2fb6:	89 85       	ldd	r24, Y+9	; 0x09
    2fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <LCD_voidSendChar+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <LCD_voidSendChar+0x1e4>
    2ff4:	88 ec       	ldi	r24, 0xC8	; 200
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9c 83       	std	Y+4, r25	; 0x04
    2ffa:	8b 83       	std	Y+3, r24	; 0x03
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <LCD_voidSendChar+0x1d2>
    3004:	9c 83       	std	Y+4, r25	; 0x04
    3006:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8d 81       	ldd	r24, Y+5	; 0x05
    3014:	9e 81       	ldd	r25, Y+6	; 0x06
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <LCD_voidSendChar+0x1c6>
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <LCD_voidSendChar+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6f 81       	ldd	r22, Y+7	; 0x07
    301e:	78 85       	ldd	r23, Y+8	; 0x08
    3020:	89 85       	ldd	r24, Y+9	; 0x09
    3022:	9a 85       	ldd	r25, Y+10	; 0x0a
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9e 83       	std	Y+6, r25	; 0x06
    302e:	8d 83       	std	Y+5, r24	; 0x05
    3030:	8d 81       	ldd	r24, Y+5	; 0x05
    3032:	9e 81       	ldd	r25, Y+6	; 0x06
    3034:	9a 83       	std	Y+2, r25	; 0x02
    3036:	89 83       	std	Y+1, r24	; 0x01
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	9a 81       	ldd	r25, Y+2	; 0x02
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <LCD_voidSendChar+0x20e>
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_setPinValue(LCD_E_PORT,LCD_E_PIN,DIO_PIN_LOW);
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
}
    304e:	6d 96       	adiw	r28, 0x1d	; 29
    3050:	0f b6       	in	r0, 0x3f	; 63
    3052:	f8 94       	cli
    3054:	de bf       	out	0x3e, r29	; 62
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	cd bf       	out	0x3d, r28	; 61
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <LCD_voidWriteString>:


void LCD_voidWriteString(u8* copy_pu8String)
{
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	00 d0       	rcall	.+0      	; 0x3066 <LCD_voidWriteString+0x6>
    3066:	0f 92       	push	r0
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	9b 83       	std	Y+3, r25	; 0x03
    306e:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8String != NULL)
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	9b 81       	ldd	r25, Y+3	; 0x03
    3074:	00 97       	sbiw	r24, 0x00	; 0
    3076:	d9 f0       	breq	.+54     	; 0x30ae <LCD_voidWriteString+0x4e>
	{
		u8 local_u8Counter = 0;
    3078:	19 82       	std	Y+1, r1	; 0x01
    307a:	0e c0       	rjmp	.+28     	; 0x3098 <LCD_voidWriteString+0x38>
		while(copy_pu8String[local_u8Counter] != '\0')
		{
			LCD_voidSendChar(copy_pu8String[local_u8Counter]);
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	28 2f       	mov	r18, r24
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	8a 81       	ldd	r24, Y+2	; 0x02
    3084:	9b 81       	ldd	r25, Y+3	; 0x03
    3086:	fc 01       	movw	r30, r24
    3088:	e2 0f       	add	r30, r18
    308a:	f3 1f       	adc	r31, r19
    308c:	80 81       	ld	r24, Z
    308e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
			++local_u8Counter; //Check
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	8f 5f       	subi	r24, 0xFF	; 255
    3096:	89 83       	std	Y+1, r24	; 0x01
void LCD_voidWriteString(u8* copy_pu8String)
{
	if(copy_pu8String != NULL)
	{
		u8 local_u8Counter = 0;
		while(copy_pu8String[local_u8Counter] != '\0')
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	9b 81       	ldd	r25, Y+3	; 0x03
    30a2:	fc 01       	movw	r30, r24
    30a4:	e2 0f       	add	r30, r18
    30a6:	f3 1f       	adc	r31, r19
    30a8:	80 81       	ld	r24, Z
    30aa:	88 23       	and	r24, r24
    30ac:	39 f7       	brne	.-50     	; 0x307c <LCD_voidWriteString+0x1c>
		{
			LCD_voidSendChar(copy_pu8String[local_u8Counter]);
			++local_u8Counter; //Check
		}
	}
}
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	0f 90       	pop	r0
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <private_voidWriteHalfPort>:


void private_voidWriteHalfPort(u8 copy_u8Value)
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	89 83       	std	Y+1, r24	; 0x01
	if(GET_BIT(copy_u8Value,0) == 1)
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	88 2f       	mov	r24, r24
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	81 70       	andi	r24, 0x01	; 1
    30ce:	90 70       	andi	r25, 0x00	; 0
    30d0:	88 23       	and	r24, r24
    30d2:	31 f0       	breq	.+12     	; 0x30e0 <private_voidWriteHalfPort+0x26>
	{
		DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_HIGH);
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    30de:	0c c0       	rjmp	.+24     	; 0x30f8 <private_voidWriteHalfPort+0x3e>
	}
	else if(GET_BIT(copy_u8Value,0) == 0)
    30e0:	89 81       	ldd	r24, Y+1	; 0x01
    30e2:	88 2f       	mov	r24, r24
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	81 70       	andi	r24, 0x01	; 1
    30e8:	90 70       	andi	r25, 0x00	; 0
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	29 f4       	brne	.+10     	; 0x30f8 <private_voidWriteHalfPort+0x3e>
	{
		DIO_setPinValue(LCD_D4_PORT,LCD_D4_PIN,DIO_PIN_LOW);
    30ee:	81 e0       	ldi	r24, 0x01	; 1
    30f0:	60 e0       	ldi	r22, 0x00	; 0
    30f2:	40 e0       	ldi	r20, 0x00	; 0
    30f4:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	}
	
	if(GET_BIT(copy_u8Value,1) == 1)
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	86 95       	lsr	r24
    30fc:	88 2f       	mov	r24, r24
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	81 70       	andi	r24, 0x01	; 1
    3102:	90 70       	andi	r25, 0x00	; 0
    3104:	88 23       	and	r24, r24
    3106:	31 f0       	breq	.+12     	; 0x3114 <private_voidWriteHalfPort+0x5a>
	{
		DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_HIGH);
    3108:	81 e0       	ldi	r24, 0x01	; 1
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	41 e0       	ldi	r20, 0x01	; 1
    310e:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    3112:	0d c0       	rjmp	.+26     	; 0x312e <private_voidWriteHalfPort+0x74>
	}
	else if(GET_BIT(copy_u8Value,1) == 0)
    3114:	89 81       	ldd	r24, Y+1	; 0x01
    3116:	86 95       	lsr	r24
    3118:	88 2f       	mov	r24, r24
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	81 70       	andi	r24, 0x01	; 1
    311e:	90 70       	andi	r25, 0x00	; 0
    3120:	00 97       	sbiw	r24, 0x00	; 0
    3122:	29 f4       	brne	.+10     	; 0x312e <private_voidWriteHalfPort+0x74>
	{
		DIO_setPinValue(LCD_D5_PORT,LCD_D5_PIN,DIO_PIN_LOW);
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	61 e0       	ldi	r22, 0x01	; 1
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	}
	
	if(GET_BIT(copy_u8Value,2) == 1)
    312e:	89 81       	ldd	r24, Y+1	; 0x01
    3130:	86 95       	lsr	r24
    3132:	86 95       	lsr	r24
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	81 70       	andi	r24, 0x01	; 1
    313a:	90 70       	andi	r25, 0x00	; 0
    313c:	88 23       	and	r24, r24
    313e:	31 f0       	breq	.+12     	; 0x314c <private_voidWriteHalfPort+0x92>
	{
		DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_HIGH);
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	62 e0       	ldi	r22, 0x02	; 2
    3144:	41 e0       	ldi	r20, 0x01	; 1
    3146:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    314a:	0e c0       	rjmp	.+28     	; 0x3168 <private_voidWriteHalfPort+0xae>
	}
	else if(GET_BIT(copy_u8Value,2) == 0)
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	86 95       	lsr	r24
    3150:	86 95       	lsr	r24
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	81 70       	andi	r24, 0x01	; 1
    3158:	90 70       	andi	r25, 0x00	; 0
    315a:	00 97       	sbiw	r24, 0x00	; 0
    315c:	29 f4       	brne	.+10     	; 0x3168 <private_voidWriteHalfPort+0xae>
	{
		DIO_setPinValue(LCD_D6_PORT,LCD_D6_PIN,DIO_PIN_LOW);
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	62 e0       	ldi	r22, 0x02	; 2
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	}
	
	if(GET_BIT(copy_u8Value,3) == 1)
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	86 95       	lsr	r24
    316c:	86 95       	lsr	r24
    316e:	86 95       	lsr	r24
    3170:	88 2f       	mov	r24, r24
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	81 70       	andi	r24, 0x01	; 1
    3176:	90 70       	andi	r25, 0x00	; 0
    3178:	88 23       	and	r24, r24
    317a:	31 f0       	breq	.+12     	; 0x3188 <private_voidWriteHalfPort+0xce>
	{
		DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_HIGH);
    317c:	81 e0       	ldi	r24, 0x01	; 1
    317e:	64 e0       	ldi	r22, 0x04	; 4
    3180:	41 e0       	ldi	r20, 0x01	; 1
    3182:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
    3186:	0f c0       	rjmp	.+30     	; 0x31a6 <private_voidWriteHalfPort+0xec>
	}
	else if(GET_BIT(copy_u8Value,3) == 0)
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	86 95       	lsr	r24
    318c:	86 95       	lsr	r24
    318e:	86 95       	lsr	r24
    3190:	88 2f       	mov	r24, r24
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	81 70       	andi	r24, 0x01	; 1
    3196:	90 70       	andi	r25, 0x00	; 0
    3198:	00 97       	sbiw	r24, 0x00	; 0
    319a:	29 f4       	brne	.+10     	; 0x31a6 <private_voidWriteHalfPort+0xec>
	{
		DIO_setPinValue(LCD_D7_PORT,LCD_D7_PIN,DIO_PIN_LOW);
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	64 e0       	ldi	r22, 0x04	; 4
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_setPinValue>
	}
}
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <LCD_voidWriteNumber>:
/*
 *Send a number and print it out on LCD as number (not ASCII equivalent of number).
 *Input: signed long int.
 */
void LCD_voidWriteNumber(s32 copy_u8Data)
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	6b 97       	sbiw	r28, 0x1b	; 27
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	68 8f       	std	Y+24, r22	; 0x18
    31c4:	79 8f       	std	Y+25, r23	; 0x19
    31c6:	8a 8f       	std	Y+26, r24	; 0x1a
    31c8:	9b 8f       	std	Y+27, r25	; 0x1b
	//string size = to LCD screen columns
	u8 local_u8String[20];
	//remainder of modulus
	u8 local_u8Remainder;
	u8 local_u8Counter = 0;
    31ca:	1a 82       	std	Y+2, r1	; 0x02
	//counter is signed since it'll be decremented in a loop. Can cause errors.
	s8 local_s8Counter2;
	//Handle case: 0 is passed
	if(copy_u8Data == 0)
    31cc:	88 8d       	ldd	r24, Y+24	; 0x18
    31ce:	99 8d       	ldd	r25, Y+25	; 0x19
    31d0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    31d2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	a1 05       	cpc	r26, r1
    31d8:	b1 05       	cpc	r27, r1
    31da:	21 f4       	brne	.+8      	; 0x31e4 <LCD_voidWriteNumber+0x36>
	{
		//Send ASCII of 0
		LCD_voidSendChar('0');
    31dc:	80 e3       	ldi	r24, 0x30	; 48
    31de:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
    31e2:	6a c0       	rjmp	.+212    	; 0x32b8 <LCD_voidWriteNumber+0x10a>
		return;
	}
	//Handle case: number is less than 0
	//turn number into positive and print '-'
	if(copy_u8Data < 0)
    31e4:	88 8d       	ldd	r24, Y+24	; 0x18
    31e6:	99 8d       	ldd	r25, Y+25	; 0x19
    31e8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    31ea:	bb 8d       	ldd	r27, Y+27	; 0x1b
    31ec:	bb 23       	and	r27, r27
    31ee:	0c f0       	brlt	.+2      	; 0x31f2 <LCD_voidWriteNumber+0x44>
    31f0:	43 c0       	rjmp	.+134    	; 0x3278 <LCD_voidWriteNumber+0xca>
	{
		copy_u8Data *= (-1);
    31f2:	88 8d       	ldd	r24, Y+24	; 0x18
    31f4:	99 8d       	ldd	r25, Y+25	; 0x19
    31f6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    31f8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    31fa:	b0 95       	com	r27
    31fc:	a0 95       	com	r26
    31fe:	90 95       	com	r25
    3200:	81 95       	neg	r24
    3202:	9f 4f       	sbci	r25, 0xFF	; 255
    3204:	af 4f       	sbci	r26, 0xFF	; 255
    3206:	bf 4f       	sbci	r27, 0xFF	; 255
    3208:	88 8f       	std	Y+24, r24	; 0x18
    320a:	99 8f       	std	Y+25, r25	; 0x19
    320c:	aa 8f       	std	Y+26, r26	; 0x1a
    320e:	bb 8f       	std	Y+27, r27	; 0x1b
		LCD_voidSendChar('-');
    3210:	8d e2       	ldi	r24, 0x2D	; 45
    3212:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
    3216:	30 c0       	rjmp	.+96     	; 0x3278 <LCD_voidWriteNumber+0xca>
	}
	//loop to get every single digit and sign as ASCII code
	while(copy_u8Data>0)
	{
		//gets right most digit
		local_u8Remainder = copy_u8Data%10;
    3218:	88 8d       	ldd	r24, Y+24	; 0x18
    321a:	99 8d       	ldd	r25, Y+25	; 0x19
    321c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    321e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3220:	2a e0       	ldi	r18, 0x0A	; 10
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e0       	ldi	r20, 0x00	; 0
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__divmodsi4>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	8b 83       	std	Y+3, r24	; 0x03
		//adding by a char between ' ' treats local_u8Remainder as an ASCII code
		local_u8String[local_u8Counter] = local_u8Remainder + '0';
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	8b 81       	ldd	r24, Y+3	; 0x03
    323e:	48 2f       	mov	r20, r24
    3240:	40 5d       	subi	r20, 0xD0	; 208
    3242:	ce 01       	movw	r24, r28
    3244:	04 96       	adiw	r24, 0x04	; 4
    3246:	fc 01       	movw	r30, r24
    3248:	e2 0f       	add	r30, r18
    324a:	f3 1f       	adc	r31, r19
    324c:	40 83       	st	Z, r20
		//save number without rightmost digit
		copy_u8Data = copy_u8Data/10;
    324e:	88 8d       	ldd	r24, Y+24	; 0x18
    3250:	99 8d       	ldd	r25, Y+25	; 0x19
    3252:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3254:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3256:	2a e0       	ldi	r18, 0x0A	; 10
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	50 e0       	ldi	r21, 0x00	; 0
    325e:	bc 01       	movw	r22, r24
    3260:	cd 01       	movw	r24, r26
    3262:	0e 94 9a 1f 	call	0x3f34	; 0x3f34 <__divmodsi4>
    3266:	da 01       	movw	r26, r20
    3268:	c9 01       	movw	r24, r18
    326a:	88 8f       	std	Y+24, r24	; 0x18
    326c:	99 8f       	std	Y+25, r25	; 0x19
    326e:	aa 8f       	std	Y+26, r26	; 0x1a
    3270:	bb 8f       	std	Y+27, r27	; 0x1b
		local_u8Counter++;
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	8f 5f       	subi	r24, 0xFF	; 255
    3276:	8a 83       	std	Y+2, r24	; 0x02
	{
		copy_u8Data *= (-1);
		LCD_voidSendChar('-');
	}
	//loop to get every single digit and sign as ASCII code
	while(copy_u8Data>0)
    3278:	88 8d       	ldd	r24, Y+24	; 0x18
    327a:	99 8d       	ldd	r25, Y+25	; 0x19
    327c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    327e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    3280:	18 16       	cp	r1, r24
    3282:	19 06       	cpc	r1, r25
    3284:	1a 06       	cpc	r1, r26
    3286:	1b 06       	cpc	r1, r27
    3288:	3c f2       	brlt	.-114    	; 0x3218 <LCD_voidWriteNumber+0x6a>
		local_u8Counter++;
	}
	//loop to send array of ASCII codes to be printed
	//j=i; number>0; j--
	//if number is -ve e.g. 132 --> arr={'2','3','1'}
	for(local_s8Counter2 = (local_u8Counter-1); local_s8Counter2 >= 0; local_s8Counter2--)
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	81 50       	subi	r24, 0x01	; 1
    328e:	89 83       	std	Y+1, r24	; 0x01
    3290:	10 c0       	rjmp	.+32     	; 0x32b2 <LCD_voidWriteNumber+0x104>
	{
		//It uses ASCII code to print
		LCD_voidSendChar(local_u8String[local_s8Counter2]);
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	28 2f       	mov	r18, r24
    3296:	33 27       	eor	r19, r19
    3298:	27 fd       	sbrc	r18, 7
    329a:	30 95       	com	r19
    329c:	ce 01       	movw	r24, r28
    329e:	04 96       	adiw	r24, 0x04	; 4
    32a0:	fc 01       	movw	r30, r24
    32a2:	e2 0f       	add	r30, r18
    32a4:	f3 1f       	adc	r31, r19
    32a6:	80 81       	ld	r24, Z
    32a8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
		local_u8Counter++;
	}
	//loop to send array of ASCII codes to be printed
	//j=i; number>0; j--
	//if number is -ve e.g. 132 --> arr={'2','3','1'}
	for(local_s8Counter2 = (local_u8Counter-1); local_s8Counter2 >= 0; local_s8Counter2--)
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	81 50       	subi	r24, 0x01	; 1
    32b0:	89 83       	std	Y+1, r24	; 0x01
    32b2:	89 81       	ldd	r24, Y+1	; 0x01
    32b4:	88 23       	and	r24, r24
    32b6:	6c f7       	brge	.-38     	; 0x3292 <LCD_voidWriteNumber+0xe4>
	{
		//It uses ASCII code to print
		LCD_voidSendChar(local_u8String[local_s8Counter2]);
	}

}
    32b8:	6b 96       	adiw	r28, 0x1b	; 27
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <LCD_voidWriteNumber4Digits>:

void LCD_voidWriteNumber4Digits(u16 copy_u8Data)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <LCD_voidWriteNumber4Digits+0x6>
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	9a 83       	std	Y+2, r25	; 0x02
    32d6:	89 83       	std	Y+1, r24	; 0x01
	 *given: 9632
	 *1- 9632%10000 = 9632
	 *2- 9632/1000 = 9 -> increment 9 on ASCII of 0 --> send ASCII (ASCII of9)
	 *Repeat
	 */
	LCD_voidSendChar(((copy_u8Data%10000)/1000) + '0');
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	9a 81       	ldd	r25, Y+2	; 0x02
    32dc:	20 e1       	ldi	r18, 0x10	; 16
    32de:	37 e2       	ldi	r19, 0x27	; 39
    32e0:	b9 01       	movw	r22, r18
    32e2:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    32e6:	28 ee       	ldi	r18, 0xE8	; 232
    32e8:	33 e0       	ldi	r19, 0x03	; 3
    32ea:	b9 01       	movw	r22, r18
    32ec:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    32f0:	cb 01       	movw	r24, r22
    32f2:	80 5d       	subi	r24, 0xD0	; 208
    32f4:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
	LCD_voidSendChar(((copy_u8Data%1000)/100) + '0');
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	9a 81       	ldd	r25, Y+2	; 0x02
    32fc:	28 ee       	ldi	r18, 0xE8	; 232
    32fe:	33 e0       	ldi	r19, 0x03	; 3
    3300:	b9 01       	movw	r22, r18
    3302:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    3306:	24 e6       	ldi	r18, 0x64	; 100
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	b9 01       	movw	r22, r18
    330c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    3310:	cb 01       	movw	r24, r22
    3312:	80 5d       	subi	r24, 0xD0	; 208
    3314:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
	LCD_voidSendChar(((copy_u8Data%100)/10) + '0');
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	9a 81       	ldd	r25, Y+2	; 0x02
    331c:	24 e6       	ldi	r18, 0x64	; 100
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	b9 01       	movw	r22, r18
    3322:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    3326:	2a e0       	ldi	r18, 0x0A	; 10
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	b9 01       	movw	r22, r18
    332c:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    3330:	cb 01       	movw	r24, r22
    3332:	80 5d       	subi	r24, 0xD0	; 208
    3334:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
	LCD_voidSendChar(((copy_u8Data%10)/1) + '0');
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	2a e0       	ldi	r18, 0x0A	; 10
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	b9 01       	movw	r22, r18
    3342:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <__udivmodhi4>
    3346:	80 5d       	subi	r24, 0xD0	; 208
    3348:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
}
    334c:	0f 90       	pop	r0
    334e:	0f 90       	pop	r0
    3350:	cf 91       	pop	r28
    3352:	df 91       	pop	r29
    3354:	08 95       	ret

00003356 <LCD_voidClear>:

void LCD_voidClear(void)
{
    3356:	df 93       	push	r29
    3358:	cf 93       	push	r28
    335a:	cd b7       	in	r28, 0x3d	; 61
    335c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(0x01);
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
}
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <LCD_voidShift>:
 *
 * Note:
 * The function introduces a delay between each shift operation to make the shift visible and smooth.
 */
void LCD_voidShift(u8 copy_u8SC_Bit, u8 copy_u8RL_Bit, u8 copy_u8Shift_Times)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	c0 54       	subi	r28, 0x40	; 64
    3374:	d0 40       	sbci	r29, 0x00	; 0
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	8a af       	std	Y+58, r24	; 0x3a
    3382:	6b af       	std	Y+59, r22	; 0x3b
    3384:	4c af       	std	Y+60, r20	; 0x3c
//	u8 Local_u8SC_Bit = copy_u8SC_Bit;
//	u8 Local_u8RL_Bit = copy_u8RL_Bit;
	u8 Local_u8Counter;
	if(copy_u8SC_Bit == 0)
    3386:	8a ad       	ldd	r24, Y+58	; 0x3a
    3388:	88 23       	and	r24, r24
    338a:	09 f0       	breq	.+2      	; 0x338e <LCD_voidShift+0x24>
    338c:	16 c1       	rjmp	.+556    	; 0x35ba <LCD_voidShift+0x250>
	{
		switch(copy_u8RL_Bit)
    338e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	21 96       	adiw	r28, 0x01	; 1
    3396:	3f af       	std	Y+63, r19	; 0x3f
    3398:	2e af       	std	Y+62, r18	; 0x3e
    339a:	21 97       	sbiw	r28, 0x01	; 1
    339c:	21 96       	adiw	r28, 0x01	; 1
    339e:	8e ad       	ldd	r24, Y+62	; 0x3e
    33a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    33a2:	21 97       	sbiw	r28, 0x01	; 1
    33a4:	00 97       	sbiw	r24, 0x00	; 0
    33a6:	49 f0       	breq	.+18     	; 0x33ba <LCD_voidShift+0x50>
    33a8:	21 96       	adiw	r28, 0x01	; 1
    33aa:	2e ad       	ldd	r18, Y+62	; 0x3e
    33ac:	3f ad       	ldd	r19, Y+63	; 0x3f
    33ae:	21 97       	sbiw	r28, 0x01	; 1
    33b0:	21 30       	cpi	r18, 0x01	; 1
    33b2:	31 05       	cpc	r19, r1
    33b4:	09 f4       	brne	.+2      	; 0x33b8 <LCD_voidShift+0x4e>
    33b6:	81 c0       	rjmp	.+258    	; 0x34ba <LCD_voidShift+0x150>
    33b8:	13 c2       	rjmp	.+1062   	; 0x37e0 <LCD_voidShift+0x476>
		{
			case 0:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    33ba:	19 ae       	std	Y+57, r1	; 0x39
    33bc:	78 c0       	rjmp	.+240    	; 0x34ae <LCD_voidShift+0x144>
				{
					//shift cursor left
					LCD_voidSendCmnd(0b00010000);
    33be:	80 e1       	ldi	r24, 0x10	; 16
    33c0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a8 e4       	ldi	r26, 0x48	; 72
    33ca:	b3 e4       	ldi	r27, 0x43	; 67
    33cc:	8d ab       	std	Y+53, r24	; 0x35
    33ce:	9e ab       	std	Y+54, r25	; 0x36
    33d0:	af ab       	std	Y+55, r26	; 0x37
    33d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d4:	6d a9       	ldd	r22, Y+53	; 0x35
    33d6:	7e a9       	ldd	r23, Y+54	; 0x36
    33d8:	8f a9       	ldd	r24, Y+55	; 0x37
    33da:	98 ad       	ldd	r25, Y+56	; 0x38
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a ef       	ldi	r20, 0xFA	; 250
    33e2:	54 e4       	ldi	r21, 0x44	; 68
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	89 ab       	std	Y+49, r24	; 0x31
    33ee:	9a ab       	std	Y+50, r25	; 0x32
    33f0:	ab ab       	std	Y+51, r26	; 0x33
    33f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33f4:	69 a9       	ldd	r22, Y+49	; 0x31
    33f6:	7a a9       	ldd	r23, Y+50	; 0x32
    33f8:	8b a9       	ldd	r24, Y+51	; 0x33
    33fa:	9c a9       	ldd	r25, Y+52	; 0x34
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	5f e3       	ldi	r21, 0x3F	; 63
    3404:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3408:	88 23       	and	r24, r24
    340a:	2c f4       	brge	.+10     	; 0x3416 <LCD_voidShift+0xac>
		__ticks = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	98 ab       	std	Y+48, r25	; 0x30
    3412:	8f a7       	std	Y+47, r24	; 0x2f
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <LCD_voidShift+0x12a>
	else if (__tmp > 65535)
    3416:	69 a9       	ldd	r22, Y+49	; 0x31
    3418:	7a a9       	ldd	r23, Y+50	; 0x32
    341a:	8b a9       	ldd	r24, Y+51	; 0x33
    341c:	9c a9       	ldd	r25, Y+52	; 0x34
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	4c f5       	brge	.+82     	; 0x3480 <LCD_voidShift+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	6d a9       	ldd	r22, Y+53	; 0x35
    3430:	7e a9       	ldd	r23, Y+54	; 0x36
    3432:	8f a9       	ldd	r24, Y+55	; 0x37
    3434:	98 ad       	ldd	r25, Y+56	; 0x38
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	98 ab       	std	Y+48, r25	; 0x30
    3454:	8f a7       	std	Y+47, r24	; 0x2f
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <LCD_voidShift+0x10c>
    3458:	88 ec       	ldi	r24, 0xC8	; 200
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9e a7       	std	Y+46, r25	; 0x2e
    345e:	8d a7       	std	Y+45, r24	; 0x2d
    3460:	8d a5       	ldd	r24, Y+45	; 0x2d
    3462:	9e a5       	ldd	r25, Y+46	; 0x2e
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <LCD_voidShift+0xfa>
    3468:	9e a7       	std	Y+46, r25	; 0x2e
    346a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8f a5       	ldd	r24, Y+47	; 0x2f
    346e:	98 a9       	ldd	r25, Y+48	; 0x30
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	98 ab       	std	Y+48, r25	; 0x30
    3474:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8f a5       	ldd	r24, Y+47	; 0x2f
    3478:	98 a9       	ldd	r25, Y+48	; 0x30
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <LCD_voidShift+0xee>
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <LCD_voidShift+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	69 a9       	ldd	r22, Y+49	; 0x31
    3482:	7a a9       	ldd	r23, Y+50	; 0x32
    3484:	8b a9       	ldd	r24, Y+51	; 0x33
    3486:	9c a9       	ldd	r25, Y+52	; 0x34
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	98 ab       	std	Y+48, r25	; 0x30
    3492:	8f a7       	std	Y+47, r24	; 0x2f
    3494:	8f a5       	ldd	r24, Y+47	; 0x2f
    3496:	98 a9       	ldd	r25, Y+48	; 0x30
    3498:	9c a7       	std	Y+44, r25	; 0x2c
    349a:	8b a7       	std	Y+43, r24	; 0x2b
    349c:	8b a5       	ldd	r24, Y+43	; 0x2b
    349e:	9c a5       	ldd	r25, Y+44	; 0x2c
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LCD_voidShift+0x136>
    34a4:	9c a7       	std	Y+44, r25	; 0x2c
    34a6:	8b a7       	std	Y+43, r24	; 0x2b
	if(copy_u8SC_Bit == 0)
	{
		switch(copy_u8RL_Bit)
		{
			case 0:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    34a8:	89 ad       	ldd	r24, Y+57	; 0x39
    34aa:	8f 5f       	subi	r24, 0xFF	; 255
    34ac:	89 af       	std	Y+57, r24	; 0x39
    34ae:	99 ad       	ldd	r25, Y+57	; 0x39
    34b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    34b2:	98 17       	cp	r25, r24
    34b4:	08 f4       	brcc	.+2      	; 0x34b8 <LCD_voidShift+0x14e>
    34b6:	83 cf       	rjmp	.-250    	; 0x33be <LCD_voidShift+0x54>
    34b8:	93 c1       	rjmp	.+806    	; 0x37e0 <LCD_voidShift+0x476>
					LCD_voidSendCmnd(0b00010000);
					_delay_ms(200);
				}
				break;
			case 1:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    34ba:	19 ae       	std	Y+57, r1	; 0x39
    34bc:	78 c0       	rjmp	.+240    	; 0x35ae <LCD_voidShift+0x244>
				{
				//shift cursor right
				LCD_voidSendCmnd(0b00010100);
    34be:	84 e1       	ldi	r24, 0x14	; 20
    34c0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a8 e4       	ldi	r26, 0x48	; 72
    34ca:	b3 e4       	ldi	r27, 0x43	; 67
    34cc:	8f a3       	std	Y+39, r24	; 0x27
    34ce:	98 a7       	std	Y+40, r25	; 0x28
    34d0:	a9 a7       	std	Y+41, r26	; 0x29
    34d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d4:	6f a1       	ldd	r22, Y+39	; 0x27
    34d6:	78 a5       	ldd	r23, Y+40	; 0x28
    34d8:	89 a5       	ldd	r24, Y+41	; 0x29
    34da:	9a a5       	ldd	r25, Y+42	; 0x2a
    34dc:	20 e0       	ldi	r18, 0x00	; 0
    34de:	30 e0       	ldi	r19, 0x00	; 0
    34e0:	4a ef       	ldi	r20, 0xFA	; 250
    34e2:	54 e4       	ldi	r21, 0x44	; 68
    34e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	8b a3       	std	Y+35, r24	; 0x23
    34ee:	9c a3       	std	Y+36, r25	; 0x24
    34f0:	ad a3       	std	Y+37, r26	; 0x25
    34f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34f4:	6b a1       	ldd	r22, Y+35	; 0x23
    34f6:	7c a1       	ldd	r23, Y+36	; 0x24
    34f8:	8d a1       	ldd	r24, Y+37	; 0x25
    34fa:	9e a1       	ldd	r25, Y+38	; 0x26
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	40 e8       	ldi	r20, 0x80	; 128
    3502:	5f e3       	ldi	r21, 0x3F	; 63
    3504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3508:	88 23       	and	r24, r24
    350a:	2c f4       	brge	.+10     	; 0x3516 <LCD_voidShift+0x1ac>
		__ticks = 1;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9a a3       	std	Y+34, r25	; 0x22
    3512:	89 a3       	std	Y+33, r24	; 0x21
    3514:	3f c0       	rjmp	.+126    	; 0x3594 <LCD_voidShift+0x22a>
	else if (__tmp > 65535)
    3516:	6b a1       	ldd	r22, Y+35	; 0x23
    3518:	7c a1       	ldd	r23, Y+36	; 0x24
    351a:	8d a1       	ldd	r24, Y+37	; 0x25
    351c:	9e a1       	ldd	r25, Y+38	; 0x26
    351e:	20 e0       	ldi	r18, 0x00	; 0
    3520:	3f ef       	ldi	r19, 0xFF	; 255
    3522:	4f e7       	ldi	r20, 0x7F	; 127
    3524:	57 e4       	ldi	r21, 0x47	; 71
    3526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352a:	18 16       	cp	r1, r24
    352c:	4c f5       	brge	.+82     	; 0x3580 <LCD_voidShift+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352e:	6f a1       	ldd	r22, Y+39	; 0x27
    3530:	78 a5       	ldd	r23, Y+40	; 0x28
    3532:	89 a5       	ldd	r24, Y+41	; 0x29
    3534:	9a a5       	ldd	r25, Y+42	; 0x2a
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e2       	ldi	r20, 0x20	; 32
    353c:	51 e4       	ldi	r21, 0x41	; 65
    353e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	9a a3       	std	Y+34, r25	; 0x22
    3554:	89 a3       	std	Y+33, r24	; 0x21
    3556:	0f c0       	rjmp	.+30     	; 0x3576 <LCD_voidShift+0x20c>
    3558:	88 ec       	ldi	r24, 0xC8	; 200
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	98 a3       	std	Y+32, r25	; 0x20
    355e:	8f 8f       	std	Y+31, r24	; 0x1f
    3560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3562:	98 a1       	ldd	r25, Y+32	; 0x20
    3564:	01 97       	sbiw	r24, 0x01	; 1
    3566:	f1 f7       	brne	.-4      	; 0x3564 <LCD_voidShift+0x1fa>
    3568:	98 a3       	std	Y+32, r25	; 0x20
    356a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356c:	89 a1       	ldd	r24, Y+33	; 0x21
    356e:	9a a1       	ldd	r25, Y+34	; 0x22
    3570:	01 97       	sbiw	r24, 0x01	; 1
    3572:	9a a3       	std	Y+34, r25	; 0x22
    3574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3576:	89 a1       	ldd	r24, Y+33	; 0x21
    3578:	9a a1       	ldd	r25, Y+34	; 0x22
    357a:	00 97       	sbiw	r24, 0x00	; 0
    357c:	69 f7       	brne	.-38     	; 0x3558 <LCD_voidShift+0x1ee>
    357e:	14 c0       	rjmp	.+40     	; 0x35a8 <LCD_voidShift+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3580:	6b a1       	ldd	r22, Y+35	; 0x23
    3582:	7c a1       	ldd	r23, Y+36	; 0x24
    3584:	8d a1       	ldd	r24, Y+37	; 0x25
    3586:	9e a1       	ldd	r25, Y+38	; 0x26
    3588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	9a a3       	std	Y+34, r25	; 0x22
    3592:	89 a3       	std	Y+33, r24	; 0x21
    3594:	89 a1       	ldd	r24, Y+33	; 0x21
    3596:	9a a1       	ldd	r25, Y+34	; 0x22
    3598:	9e 8f       	std	Y+30, r25	; 0x1e
    359a:	8d 8f       	std	Y+29, r24	; 0x1d
    359c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    359e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <LCD_voidShift+0x236>
    35a4:	9e 8f       	std	Y+30, r25	; 0x1e
    35a6:	8d 8f       	std	Y+29, r24	; 0x1d
					LCD_voidSendCmnd(0b00010000);
					_delay_ms(200);
				}
				break;
			case 1:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    35a8:	89 ad       	ldd	r24, Y+57	; 0x39
    35aa:	8f 5f       	subi	r24, 0xFF	; 255
    35ac:	89 af       	std	Y+57, r24	; 0x39
    35ae:	99 ad       	ldd	r25, Y+57	; 0x39
    35b0:	8c ad       	ldd	r24, Y+60	; 0x3c
    35b2:	98 17       	cp	r25, r24
    35b4:	08 f4       	brcc	.+2      	; 0x35b8 <LCD_voidShift+0x24e>
    35b6:	83 cf       	rjmp	.-250    	; 0x34be <LCD_voidShift+0x154>
    35b8:	13 c1       	rjmp	.+550    	; 0x37e0 <LCD_voidShift+0x476>
				_delay_ms(200);
				}
				break;
		}
	}
	else if(copy_u8SC_Bit == 1)
    35ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    35bc:	81 30       	cpi	r24, 0x01	; 1
    35be:	09 f0       	breq	.+2      	; 0x35c2 <LCD_voidShift+0x258>
    35c0:	0f c1       	rjmp	.+542    	; 0x37e0 <LCD_voidShift+0x476>
	{
		switch(copy_u8RL_Bit)
    35c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    35c4:	28 2f       	mov	r18, r24
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	3e af       	std	Y+62, r19	; 0x3e
    35ca:	2d af       	std	Y+61, r18	; 0x3d
    35cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    35ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	39 f0       	breq	.+14     	; 0x35e2 <LCD_voidShift+0x278>
    35d4:	2d ad       	ldd	r18, Y+61	; 0x3d
    35d6:	3e ad       	ldd	r19, Y+62	; 0x3e
    35d8:	21 30       	cpi	r18, 0x01	; 1
    35da:	31 05       	cpc	r19, r1
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <LCD_voidShift+0x276>
    35de:	81 c0       	rjmp	.+258    	; 0x36e2 <LCD_voidShift+0x378>
    35e0:	ff c0       	rjmp	.+510    	; 0x37e0 <LCD_voidShift+0x476>
		{
			case 0:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    35e2:	19 ae       	std	Y+57, r1	; 0x39
    35e4:	78 c0       	rjmp	.+240    	; 0x36d6 <LCD_voidShift+0x36c>
				{
					//Shift entire display left
					LCD_voidSendCmnd(0b00011000);
    35e6:	88 e1       	ldi	r24, 0x18	; 24
    35e8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	a8 e4       	ldi	r26, 0x48	; 72
    35f2:	b3 e4       	ldi	r27, 0x43	; 67
    35f4:	89 8f       	std	Y+25, r24	; 0x19
    35f6:	9a 8f       	std	Y+26, r25	; 0x1a
    35f8:	ab 8f       	std	Y+27, r26	; 0x1b
    35fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35fc:	69 8d       	ldd	r22, Y+25	; 0x19
    35fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3600:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3602:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	4a ef       	ldi	r20, 0xFA	; 250
    360a:	54 e4       	ldi	r21, 0x44	; 68
    360c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	8d 8b       	std	Y+21, r24	; 0x15
    3616:	9e 8b       	std	Y+22, r25	; 0x16
    3618:	af 8b       	std	Y+23, r26	; 0x17
    361a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    361c:	6d 89       	ldd	r22, Y+21	; 0x15
    361e:	7e 89       	ldd	r23, Y+22	; 0x16
    3620:	8f 89       	ldd	r24, Y+23	; 0x17
    3622:	98 8d       	ldd	r25, Y+24	; 0x18
    3624:	20 e0       	ldi	r18, 0x00	; 0
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	40 e8       	ldi	r20, 0x80	; 128
    362a:	5f e3       	ldi	r21, 0x3F	; 63
    362c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3630:	88 23       	and	r24, r24
    3632:	2c f4       	brge	.+10     	; 0x363e <LCD_voidShift+0x2d4>
		__ticks = 1;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	9c 8b       	std	Y+20, r25	; 0x14
    363a:	8b 8b       	std	Y+19, r24	; 0x13
    363c:	3f c0       	rjmp	.+126    	; 0x36bc <LCD_voidShift+0x352>
	else if (__tmp > 65535)
    363e:	6d 89       	ldd	r22, Y+21	; 0x15
    3640:	7e 89       	ldd	r23, Y+22	; 0x16
    3642:	8f 89       	ldd	r24, Y+23	; 0x17
    3644:	98 8d       	ldd	r25, Y+24	; 0x18
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	3f ef       	ldi	r19, 0xFF	; 255
    364a:	4f e7       	ldi	r20, 0x7F	; 127
    364c:	57 e4       	ldi	r21, 0x47	; 71
    364e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3652:	18 16       	cp	r1, r24
    3654:	4c f5       	brge	.+82     	; 0x36a8 <LCD_voidShift+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3656:	69 8d       	ldd	r22, Y+25	; 0x19
    3658:	7a 8d       	ldd	r23, Y+26	; 0x1a
    365a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    365c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e2       	ldi	r20, 0x20	; 32
    3664:	51 e4       	ldi	r21, 0x41	; 65
    3666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	9c 8b       	std	Y+20, r25	; 0x14
    367c:	8b 8b       	std	Y+19, r24	; 0x13
    367e:	0f c0       	rjmp	.+30     	; 0x369e <LCD_voidShift+0x334>
    3680:	88 ec       	ldi	r24, 0xC8	; 200
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	9a 8b       	std	Y+18, r25	; 0x12
    3686:	89 8b       	std	Y+17, r24	; 0x11
    3688:	89 89       	ldd	r24, Y+17	; 0x11
    368a:	9a 89       	ldd	r25, Y+18	; 0x12
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	f1 f7       	brne	.-4      	; 0x368c <LCD_voidShift+0x322>
    3690:	9a 8b       	std	Y+18, r25	; 0x12
    3692:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3694:	8b 89       	ldd	r24, Y+19	; 0x13
    3696:	9c 89       	ldd	r25, Y+20	; 0x14
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	9c 8b       	std	Y+20, r25	; 0x14
    369c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    369e:	8b 89       	ldd	r24, Y+19	; 0x13
    36a0:	9c 89       	ldd	r25, Y+20	; 0x14
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	69 f7       	brne	.-38     	; 0x3680 <LCD_voidShift+0x316>
    36a6:	14 c0       	rjmp	.+40     	; 0x36d0 <LCD_voidShift+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a8:	6d 89       	ldd	r22, Y+21	; 0x15
    36aa:	7e 89       	ldd	r23, Y+22	; 0x16
    36ac:	8f 89       	ldd	r24, Y+23	; 0x17
    36ae:	98 8d       	ldd	r25, Y+24	; 0x18
    36b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b4:	dc 01       	movw	r26, r24
    36b6:	cb 01       	movw	r24, r22
    36b8:	9c 8b       	std	Y+20, r25	; 0x14
    36ba:	8b 8b       	std	Y+19, r24	; 0x13
    36bc:	8b 89       	ldd	r24, Y+19	; 0x13
    36be:	9c 89       	ldd	r25, Y+20	; 0x14
    36c0:	98 8b       	std	Y+16, r25	; 0x10
    36c2:	8f 87       	std	Y+15, r24	; 0x0f
    36c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c6:	98 89       	ldd	r25, Y+16	; 0x10
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <LCD_voidShift+0x35e>
    36cc:	98 8b       	std	Y+16, r25	; 0x10
    36ce:	8f 87       	std	Y+15, r24	; 0x0f
	else if(copy_u8SC_Bit == 1)
	{
		switch(copy_u8RL_Bit)
		{
			case 0:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    36d0:	89 ad       	ldd	r24, Y+57	; 0x39
    36d2:	8f 5f       	subi	r24, 0xFF	; 255
    36d4:	89 af       	std	Y+57, r24	; 0x39
    36d6:	99 ad       	ldd	r25, Y+57	; 0x39
    36d8:	8c ad       	ldd	r24, Y+60	; 0x3c
    36da:	98 17       	cp	r25, r24
    36dc:	08 f4       	brcc	.+2      	; 0x36e0 <LCD_voidShift+0x376>
    36de:	83 cf       	rjmp	.-250    	; 0x35e6 <LCD_voidShift+0x27c>
    36e0:	7f c0       	rjmp	.+254    	; 0x37e0 <LCD_voidShift+0x476>
					LCD_voidSendCmnd(0b00011000);
					_delay_ms(200);
				}
					break;
			case 1:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    36e2:	19 ae       	std	Y+57, r1	; 0x39
    36e4:	78 c0       	rjmp	.+240    	; 0x37d6 <LCD_voidShift+0x46c>
				{
					//Shift entire display right
					LCD_voidSendCmnd(0b00011100);
    36e6:	8c e1       	ldi	r24, 0x1C	; 28
    36e8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a8 e4       	ldi	r26, 0x48	; 72
    36f2:	b3 e4       	ldi	r27, 0x43	; 67
    36f4:	8b 87       	std	Y+11, r24	; 0x0b
    36f6:	9c 87       	std	Y+12, r25	; 0x0c
    36f8:	ad 87       	std	Y+13, r26	; 0x0d
    36fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3700:	8d 85       	ldd	r24, Y+13	; 0x0d
    3702:	9e 85       	ldd	r25, Y+14	; 0x0e
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a ef       	ldi	r20, 0xFA	; 250
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	8f 83       	std	Y+7, r24	; 0x07
    3716:	98 87       	std	Y+8, r25	; 0x08
    3718:	a9 87       	std	Y+9, r26	; 0x09
    371a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371c:	6f 81       	ldd	r22, Y+7	; 0x07
    371e:	78 85       	ldd	r23, Y+8	; 0x08
    3720:	89 85       	ldd	r24, Y+9	; 0x09
    3722:	9a 85       	ldd	r25, Y+10	; 0x0a
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	2c f4       	brge	.+10     	; 0x373e <LCD_voidShift+0x3d4>
		__ticks = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	9e 83       	std	Y+6, r25	; 0x06
    373a:	8d 83       	std	Y+5, r24	; 0x05
    373c:	3f c0       	rjmp	.+126    	; 0x37bc <LCD_voidShift+0x452>
	else if (__tmp > 65535)
    373e:	6f 81       	ldd	r22, Y+7	; 0x07
    3740:	78 85       	ldd	r23, Y+8	; 0x08
    3742:	89 85       	ldd	r24, Y+9	; 0x09
    3744:	9a 85       	ldd	r25, Y+10	; 0x0a
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	3f ef       	ldi	r19, 0xFF	; 255
    374a:	4f e7       	ldi	r20, 0x7F	; 127
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3752:	18 16       	cp	r1, r24
    3754:	4c f5       	brge	.+82     	; 0x37a8 <LCD_voidShift+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3756:	6b 85       	ldd	r22, Y+11	; 0x0b
    3758:	7c 85       	ldd	r23, Y+12	; 0x0c
    375a:	8d 85       	ldd	r24, Y+13	; 0x0d
    375c:	9e 85       	ldd	r25, Y+14	; 0x0e
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	9e 83       	std	Y+6, r25	; 0x06
    377c:	8d 83       	std	Y+5, r24	; 0x05
    377e:	0f c0       	rjmp	.+30     	; 0x379e <LCD_voidShift+0x434>
    3780:	88 ec       	ldi	r24, 0xC8	; 200
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9c 83       	std	Y+4, r25	; 0x04
    3786:	8b 83       	std	Y+3, r24	; 0x03
    3788:	8b 81       	ldd	r24, Y+3	; 0x03
    378a:	9c 81       	ldd	r25, Y+4	; 0x04
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <LCD_voidShift+0x422>
    3790:	9c 83       	std	Y+4, r25	; 0x04
    3792:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3794:	8d 81       	ldd	r24, Y+5	; 0x05
    3796:	9e 81       	ldd	r25, Y+6	; 0x06
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	9e 83       	std	Y+6, r25	; 0x06
    379c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379e:	8d 81       	ldd	r24, Y+5	; 0x05
    37a0:	9e 81       	ldd	r25, Y+6	; 0x06
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	69 f7       	brne	.-38     	; 0x3780 <LCD_voidShift+0x416>
    37a6:	14 c0       	rjmp	.+40     	; 0x37d0 <LCD_voidShift+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a8:	6f 81       	ldd	r22, Y+7	; 0x07
    37aa:	78 85       	ldd	r23, Y+8	; 0x08
    37ac:	89 85       	ldd	r24, Y+9	; 0x09
    37ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	9e 83       	std	Y+6, r25	; 0x06
    37ba:	8d 83       	std	Y+5, r24	; 0x05
    37bc:	8d 81       	ldd	r24, Y+5	; 0x05
    37be:	9e 81       	ldd	r25, Y+6	; 0x06
    37c0:	9a 83       	std	Y+2, r25	; 0x02
    37c2:	89 83       	std	Y+1, r24	; 0x01
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	9a 81       	ldd	r25, Y+2	; 0x02
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <LCD_voidShift+0x45e>
    37cc:	9a 83       	std	Y+2, r25	; 0x02
    37ce:	89 83       	std	Y+1, r24	; 0x01
					LCD_voidSendCmnd(0b00011000);
					_delay_ms(200);
				}
					break;
			case 1:
				for(Local_u8Counter = 0; Local_u8Counter < copy_u8Shift_Times; Local_u8Counter++)
    37d0:	89 ad       	ldd	r24, Y+57	; 0x39
    37d2:	8f 5f       	subi	r24, 0xFF	; 255
    37d4:	89 af       	std	Y+57, r24	; 0x39
    37d6:	99 ad       	ldd	r25, Y+57	; 0x39
    37d8:	8c ad       	ldd	r24, Y+60	; 0x3c
    37da:	98 17       	cp	r25, r24
    37dc:	08 f4       	brcc	.+2      	; 0x37e0 <LCD_voidShift+0x476>
    37de:	83 cf       	rjmp	.-250    	; 0x36e6 <LCD_voidShift+0x37c>
	else
	{
		//Invalid SC Bit provided; exit the function without any operation
		return;
	}
}
    37e0:	c0 5c       	subi	r28, 0xC0	; 192
    37e2:	df 4f       	sbci	r29, 0xFF	; 255
    37e4:	0f b6       	in	r0, 0x3f	; 63
    37e6:	f8 94       	cli
    37e8:	de bf       	out	0x3e, r29	; 62
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	cd bf       	out	0x3d, r28	; 61
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <LCD_voidWriteBinary>:

//prints out the 8 bit binary representation of an unsigned short int
void LCD_voidWriteBinary(u8 copy_u8Data)
{
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	00 d0       	rcall	.+0      	; 0x37fa <LCD_voidWriteBinary+0x6>
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	8a 83       	std	Y+2, r24	; 0x02
	s8 Local_s8Counter;
	//counter set to 7 and decremented to 0 --> 0 to 7 bits of binary
	for(Local_s8Counter = 7; Local_s8Counter >= 0; Local_s8Counter--)
    3800:	87 e0       	ldi	r24, 0x07	; 7
    3802:	89 83       	std	Y+1, r24	; 0x01
    3804:	1c c0       	rjmp	.+56     	; 0x383e <LCD_voidWriteBinary+0x4a>
	{
		//if the rightmost bit is AND by 1 --> 1 if it's 1 or 0 if it's 0
		if((copy_u8Data>>Local_s8Counter)&1)
    3806:	8a 81       	ldd	r24, Y+2	; 0x02
    3808:	28 2f       	mov	r18, r24
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	89 81       	ldd	r24, Y+1	; 0x01
    380e:	99 27       	eor	r25, r25
    3810:	87 fd       	sbrc	r24, 7
    3812:	90 95       	com	r25
    3814:	a9 01       	movw	r20, r18
    3816:	02 c0       	rjmp	.+4      	; 0x381c <LCD_voidWriteBinary+0x28>
    3818:	55 95       	asr	r21
    381a:	47 95       	ror	r20
    381c:	8a 95       	dec	r24
    381e:	e2 f7       	brpl	.-8      	; 0x3818 <LCD_voidWriteBinary+0x24>
    3820:	ca 01       	movw	r24, r20
    3822:	81 70       	andi	r24, 0x01	; 1
    3824:	90 70       	andi	r25, 0x00	; 0
    3826:	88 23       	and	r24, r24
    3828:	21 f0       	breq	.+8      	; 0x3832 <LCD_voidWriteBinary+0x3e>
		{
			//send ASCII of 1 to LCD MC (prints out 1 on LCD)
			LCD_voidSendChar('1');
    382a:	81 e3       	ldi	r24, 0x31	; 49
    382c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <LCD_voidWriteBinary+0x44>
		}
		else
		{
			//send ASCII of 0 to LCD MC (prints out 0 on LCD)
			LCD_voidSendChar('0');
    3832:	80 e3       	ldi	r24, 0x30	; 48
    3834:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
//prints out the 8 bit binary representation of an unsigned short int
void LCD_voidWriteBinary(u8 copy_u8Data)
{
	s8 Local_s8Counter;
	//counter set to 7 and decremented to 0 --> 0 to 7 bits of binary
	for(Local_s8Counter = 7; Local_s8Counter >= 0; Local_s8Counter--)
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	81 50       	subi	r24, 0x01	; 1
    383c:	89 83       	std	Y+1, r24	; 0x01
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	88 23       	and	r24, r24
    3842:	0c f7       	brge	.-62     	; 0x3806 <LCD_voidWriteBinary+0x12>
		{
			//send ASCII of 0 to LCD MC (prints out 0 on LCD)
			LCD_voidSendChar('0');
		}
	}
}
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	08 95       	ret

0000384e <LCD_voidWriteBinaryShort>:

//prints out the binary representation of an unsigned short in
//Any zeros on the left is not printed
void LCD_voidWriteBinaryShort(u8 copy_u8Data)
{
    384e:	df 93       	push	r29
    3850:	cf 93       	push	r28
    3852:	00 d0       	rcall	.+0      	; 0x3854 <LCD_voidWriteBinaryShort+0x6>
    3854:	0f 92       	push	r0
    3856:	cd b7       	in	r28, 0x3d	; 61
    3858:	de b7       	in	r29, 0x3e	; 62
    385a:	8b 83       	std	Y+3, r24	; 0x03
	s8 Local_s8Counter;
	//flag becomes 1 when the first '1' is encountered going from right to left
	s8 Local_Flag = 0;
    385c:	19 82       	std	Y+1, r1	; 0x01
	//counter set to 7 and decremented to 0 --> 0 to 7 bits of binary
	for(Local_s8Counter = 7; Local_s8Counter >= 0; Local_s8Counter--)
    385e:	87 e0       	ldi	r24, 0x07	; 7
    3860:	8a 83       	std	Y+2, r24	; 0x02
    3862:	21 c0       	rjmp	.+66     	; 0x38a6 <LCD_voidWriteBinaryShort+0x58>
	{
		//if the leftmost bit is AND by 1 --> 1 if it's 1 or 0 if it's 0
		if((copy_u8Data>>Local_s8Counter)&1)
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	28 2f       	mov	r18, r24
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	8a 81       	ldd	r24, Y+2	; 0x02
    386c:	99 27       	eor	r25, r25
    386e:	87 fd       	sbrc	r24, 7
    3870:	90 95       	com	r25
    3872:	a9 01       	movw	r20, r18
    3874:	02 c0       	rjmp	.+4      	; 0x387a <LCD_voidWriteBinaryShort+0x2c>
    3876:	55 95       	asr	r21
    3878:	47 95       	ror	r20
    387a:	8a 95       	dec	r24
    387c:	e2 f7       	brpl	.-8      	; 0x3876 <LCD_voidWriteBinaryShort+0x28>
    387e:	ca 01       	movw	r24, r20
    3880:	81 70       	andi	r24, 0x01	; 1
    3882:	90 70       	andi	r25, 0x00	; 0
    3884:	88 23       	and	r24, r24
    3886:	31 f0       	breq	.+12     	; 0x3894 <LCD_voidWriteBinaryShort+0x46>
		{
			//send ASCII of 1 to LCD MC (prints out 1 on LCD)
			LCD_voidSendChar('1');
    3888:	81 e3       	ldi	r24, 0x31	; 49
    388a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
			Local_Flag = 1;
    388e:	81 e0       	ldi	r24, 0x01	; 1
    3890:	89 83       	std	Y+1, r24	; 0x01
    3892:	06 c0       	rjmp	.+12     	; 0x38a0 <LCD_voidWriteBinaryShort+0x52>
		}
		else
		{
			//ensures that 1st '1' was met in binary number
			//ensures printing out significant 0's only
			if(Local_Flag == 1)
    3894:	89 81       	ldd	r24, Y+1	; 0x01
    3896:	81 30       	cpi	r24, 0x01	; 1
    3898:	19 f4       	brne	.+6      	; 0x38a0 <LCD_voidWriteBinaryShort+0x52>
			{
				//send ASCII of 0 to LCD MC (prints out 0 on LCD)
				LCD_voidSendChar('0');
    389a:	80 e3       	ldi	r24, 0x30	; 48
    389c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
{
	s8 Local_s8Counter;
	//flag becomes 1 when the first '1' is encountered going from right to left
	s8 Local_Flag = 0;
	//counter set to 7 and decremented to 0 --> 0 to 7 bits of binary
	for(Local_s8Counter = 7; Local_s8Counter >= 0; Local_s8Counter--)
    38a0:	8a 81       	ldd	r24, Y+2	; 0x02
    38a2:	81 50       	subi	r24, 0x01	; 1
    38a4:	8a 83       	std	Y+2, r24	; 0x02
    38a6:	8a 81       	ldd	r24, Y+2	; 0x02
    38a8:	88 23       	and	r24, r24
    38aa:	e4 f6       	brge	.-72     	; 0x3864 <LCD_voidWriteBinaryShort+0x16>
				//send ASCII of 0 to LCD MC (prints out 0 on LCD)
				LCD_voidSendChar('0');
			}
		}
	}
}
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	cf 91       	pop	r28
    38b4:	df 91       	pop	r29
    38b6:	08 95       	ret

000038b8 <LCD_voidGoTo>:
 *Write data into internal RAM(DDRAM/CGRAM).
 *DDRAM is implemented as a buffer or an array of memory locations in the microcontroller's RAM (Random Access Memory).
 *Each memory location in the DDRAM corresponds to a specific pixel on the LCD screen.
 */
void LCD_voidGoTo(u8 copy_u8Line, u8 copy_u8Cell)
{
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	00 d0       	rcall	.+0      	; 0x38be <LCD_voidGoTo+0x6>
    38be:	cd b7       	in	r28, 0x3d	; 61
    38c0:	de b7       	in	r29, 0x3e	; 62
    38c2:	89 83       	std	Y+1, r24	; 0x01
    38c4:	6a 83       	std	Y+2, r22	; 0x02
	//to write to first line in LCD (DDRAM)
	if(copy_u8Line == LCD_LINE_ONE)
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	88 23       	and	r24, r24
    38ca:	29 f4       	brne	.+10     	; 0x38d6 <LCD_voidGoTo+0x1e>
	{
		//1 0 D7 D6 D5 D4 D3 D2 D1 D0 = 0x80 --> 1 at RS bit for write to DDR command
		//D7 to D0 makes you navigate to a certain cell in first line
		//or 0x80 || copy_u8Cell --> same operation
		LCD_voidSendCmnd(0x80+copy_u8Cell);
    38cc:	8a 81       	ldd	r24, Y+2	; 0x02
    38ce:	80 58       	subi	r24, 0x80	; 128
    38d0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    38d4:	17 c0       	rjmp	.+46     	; 0x3904 <LCD_voidGoTo+0x4c>
	}
	else if(copy_u8Line == LCD_LINE_TWO)
    38d6:	89 81       	ldd	r24, Y+1	; 0x01
    38d8:	81 30       	cpi	r24, 0x01	; 1
    38da:	29 f4       	brne	.+10     	; 0x38e6 <LCD_voidGoTo+0x2e>
	{
		//0x40 makes you jump to start address of line 1
		LCD_voidSendCmnd(0x80+0x40+copy_u8Cell);
    38dc:	8a 81       	ldd	r24, Y+2	; 0x02
    38de:	80 54       	subi	r24, 0x40	; 64
    38e0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    38e4:	0f c0       	rjmp	.+30     	; 0x3904 <LCD_voidGoTo+0x4c>
	}
	else if(copy_u8Line == LCD_LINE_THREE)
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	82 30       	cpi	r24, 0x02	; 2
    38ea:	29 f4       	brne	.+10     	; 0x38f6 <LCD_voidGoTo+0x3e>
	{
		//0x40 makes you jump to start address of line 1
		LCD_voidSendCmnd(0x80+0x14+copy_u8Cell);
    38ec:	8a 81       	ldd	r24, Y+2	; 0x02
    38ee:	8c 56       	subi	r24, 0x6C	; 108
    38f0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    38f4:	07 c0       	rjmp	.+14     	; 0x3904 <LCD_voidGoTo+0x4c>
	}
	else if(copy_u8Line == LCD_LINE_FOUR)
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
    38f8:	83 30       	cpi	r24, 0x03	; 3
    38fa:	21 f4       	brne	.+8      	; 0x3904 <LCD_voidGoTo+0x4c>
	{
		//0x40 makes you jump to start address of line 1
		LCD_voidSendCmnd(0x80+0x54+copy_u8Cell);
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	8c 52       	subi	r24, 0x2C	; 44
    3900:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
	}
	else
	{}
}
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	cf 91       	pop	r28
    390a:	df 91       	pop	r29
    390c:	08 95       	ret

0000390e <LCD_voidWriteHex>:

void LCD_voidWriteHex(u8 copy_u8Data)
{
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	00 d0       	rcall	.+0      	; 0x3914 <LCD_voidWriteHex+0x6>
    3914:	0f 92       	push	r0
    3916:	cd b7       	in	r28, 0x3d	; 61
    3918:	de b7       	in	r29, 0x3e	; 62
    391a:	8b 83       	std	Y+3, r24	; 0x03
	//store higher nibble in 4 bits on right
	u8 Local_u8Hnibble = copy_u8Data>>4;
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	82 95       	swap	r24
    3920:	8f 70       	andi	r24, 0x0F	; 15
    3922:	8a 83       	std	Y+2, r24	; 0x02
	//store lower nibble in 4 bits on right
	u8 Local_u8Lnibble = copy_u8Data&(0x0f);
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	8f 70       	andi	r24, 0x0F	; 15
    3928:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8Hnibble <= 9)
    392a:	8a 81       	ldd	r24, Y+2	; 0x02
    392c:	8a 30       	cpi	r24, 0x0A	; 10
    392e:	28 f4       	brcc	.+10     	; 0x393a <LCD_voidWriteHex+0x2c>
	{
		//e.g. 9 + '0' gives '9' which is also ASCII of 9
		LCD_voidSendChar(Local_u8Hnibble + '0');
    3930:	8a 81       	ldd	r24, Y+2	; 0x02
    3932:	80 5d       	subi	r24, 0xD0	; 208
    3934:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
    3938:	04 c0       	rjmp	.+8      	; 0x3942 <LCD_voidWriteHex+0x34>
	}
	else //if Lnibble A (10) to F (15)
	{
		//e.g B - 10 = 11 - 10 = 1 --> 1 + 'A' = 'B' or 66 in ASCII code
		LCD_voidSendChar(Local_u8Hnibble - 10 + 'A');
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	89 5c       	subi	r24, 0xC9	; 201
    393e:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
	}
	if(Local_u8Lnibble <= 9)
    3942:	89 81       	ldd	r24, Y+1	; 0x01
    3944:	8a 30       	cpi	r24, 0x0A	; 10
    3946:	28 f4       	brcc	.+10     	; 0x3952 <LCD_voidWriteHex+0x44>
	{
		//e.g. 9 + '0' gives '9' which is also ASCII of 9
		LCD_voidSendChar(Local_u8Lnibble + '0');
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	80 5d       	subi	r24, 0xD0	; 208
    394c:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
    3950:	04 c0       	rjmp	.+8      	; 0x395a <LCD_voidWriteHex+0x4c>
	}
	else //if Lnibble A (10) to F (15)
	{
		//e.g B - 10 = 11 - 10 = 1 --> 1 + 'A' = 'B' or 66 in ASCII code
		LCD_voidSendChar(Local_u8Lnibble - 10 + 'A');
    3952:	89 81       	ldd	r24, Y+1	; 0x01
    3954:	89 5c       	subi	r24, 0xC9	; 201
    3956:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
	}
}
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	08 95       	ret

00003966 <LCD_voidGoToClear>:

void LCD_voidGoToClear(u8 copy_u8Line, u8 copy_u8Cell, u8 copy_u8NumOfCells)
{
    3966:	df 93       	push	r29
    3968:	cf 93       	push	r28
    396a:	00 d0       	rcall	.+0      	; 0x396c <LCD_voidGoToClear+0x6>
    396c:	00 d0       	rcall	.+0      	; 0x396e <LCD_voidGoToClear+0x8>
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	8a 83       	std	Y+2, r24	; 0x02
    3974:	6b 83       	std	Y+3, r22	; 0x03
    3976:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Counter;
	LCD_voidGoTo(copy_u8Line, copy_u8Cell);
    3978:	8a 81       	ldd	r24, Y+2	; 0x02
    397a:	6b 81       	ldd	r22, Y+3	; 0x03
    397c:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <LCD_voidGoTo>
	for(Local_u8Counter = 0; Local_u8Counter < copy_u8NumOfCells; Local_u8Counter++)
    3980:	19 82       	std	Y+1, r1	; 0x01
    3982:	06 c0       	rjmp	.+12     	; 0x3990 <LCD_voidGoToClear+0x2a>
	{
		LCD_voidSendChar(' ');
    3984:	80 e2       	ldi	r24, 0x20	; 32
    3986:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>

void LCD_voidGoToClear(u8 copy_u8Line, u8 copy_u8Cell, u8 copy_u8NumOfCells)
{
	u8 Local_u8Counter;
	LCD_voidGoTo(copy_u8Line, copy_u8Cell);
	for(Local_u8Counter = 0; Local_u8Counter < copy_u8NumOfCells; Local_u8Counter++)
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	8f 5f       	subi	r24, 0xFF	; 255
    398e:	89 83       	std	Y+1, r24	; 0x01
    3990:	99 81       	ldd	r25, Y+1	; 0x01
    3992:	8c 81       	ldd	r24, Y+4	; 0x04
    3994:	98 17       	cp	r25, r24
    3996:	b0 f3       	brcs	.-20     	; 0x3984 <LCD_voidGoToClear+0x1e>
	{
		LCD_voidSendChar(' ');
	}
}
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <LCD_voidCreateCharacter>:
 *
 * Returns:
 * - void
 */
void LCD_voidCreateCharacter(u8 *copy_Pu8CharArr, u8 copy_u8Location)
{
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	cd b7       	in	r28, 0x3d	; 61
    39b0:	de b7       	in	r29, 0x3e	; 62
    39b2:	cc 54       	subi	r28, 0x4C	; 76
    39b4:	d0 40       	sbci	r29, 0x00	; 0
    39b6:	0f b6       	in	r0, 0x3f	; 63
    39b8:	f8 94       	cli
    39ba:	de bf       	out	0x3e, r29	; 62
    39bc:	0f be       	out	0x3f, r0	; 63
    39be:	cd bf       	out	0x3d, r28	; 61
    39c0:	fe 01       	movw	r30, r28
    39c2:	e6 5b       	subi	r30, 0xB6	; 182
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	91 83       	std	Z+1, r25	; 0x01
    39c8:	80 83       	st	Z, r24
    39ca:	fe 01       	movw	r30, r28
    39cc:	e4 5b       	subi	r30, 0xB4	; 180
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	60 83       	st	Z, r22
	//0x40 + Location*8 e.g. location = 2 i.e. second location 0x40+(16 decimal)=(0x40)+(0x10)=64+16=80= 0x50 --> address of second char slot in CGRAM

    // The base CGRAM address for LCDs is typically 0x40.
    // Multiplying the desired location by 8 calculates the offset from the base address.
    // For example, location 2 would be: 0x40 + (2 * 8) = 0x50.
	LCD_voidSendCmnd(0x40 + (copy_u8Location*8));
    39d2:	fe 01       	movw	r30, r28
    39d4:	e4 5b       	subi	r30, 0xB4	; 180
    39d6:	ff 4f       	sbci	r31, 0xFF	; 255
    39d8:	80 81       	ld	r24, Z
    39da:	88 2f       	mov	r24, r24
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	08 96       	adiw	r24, 0x08	; 8
    39e0:	88 0f       	add	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	88 0f       	add	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    39f0:	fe 01       	movw	r30, r28
    39f2:	eb 5b       	subi	r30, 0xBB	; 187
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	a8 e4       	ldi	r26, 0x48	; 72
    39fc:	b2 e4       	ldi	r27, 0x42	; 66
    39fe:	80 83       	st	Z, r24
    3a00:	91 83       	std	Z+1, r25	; 0x01
    3a02:	a2 83       	std	Z+2, r26	; 0x02
    3a04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a06:	8e 01       	movw	r16, r28
    3a08:	0f 5b       	subi	r16, 0xBF	; 191
    3a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	eb 5b       	subi	r30, 0xBB	; 187
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	60 81       	ld	r22, Z
    3a14:	71 81       	ldd	r23, Z+1	; 0x01
    3a16:	82 81       	ldd	r24, Z+2	; 0x02
    3a18:	93 81       	ldd	r25, Z+3	; 0x03
    3a1a:	2b ea       	ldi	r18, 0xAB	; 171
    3a1c:	3a ea       	ldi	r19, 0xAA	; 170
    3a1e:	4a e2       	ldi	r20, 0x2A	; 42
    3a20:	50 e4       	ldi	r21, 0x40	; 64
    3a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a26:	dc 01       	movw	r26, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	f8 01       	movw	r30, r16
    3a2c:	80 83       	st	Z, r24
    3a2e:	91 83       	std	Z+1, r25	; 0x01
    3a30:	a2 83       	std	Z+2, r26	; 0x02
    3a32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a34:	fe 01       	movw	r30, r28
    3a36:	ef 5b       	subi	r30, 0xBF	; 191
    3a38:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3a:	60 81       	ld	r22, Z
    3a3c:	71 81       	ldd	r23, Z+1	; 0x01
    3a3e:	82 81       	ldd	r24, Z+2	; 0x02
    3a40:	93 81       	ldd	r25, Z+3	; 0x03
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	30 e0       	ldi	r19, 0x00	; 0
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	5f e3       	ldi	r21, 0x3F	; 63
    3a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a4e:	88 23       	and	r24, r24
    3a50:	34 f4       	brge	.+12     	; 0x3a5e <LCD_voidCreateCharacter+0xb8>
		__ticks = 1;
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	fe 01       	movw	r30, r28
    3a56:	e0 5c       	subi	r30, 0xC0	; 192
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 83       	st	Z, r24
    3a5c:	9d c0       	rjmp	.+314    	; 0x3b98 <LCD_voidCreateCharacter+0x1f2>
	else if (__tmp > 255)
    3a5e:	fe 01       	movw	r30, r28
    3a60:	ef 5b       	subi	r30, 0xBF	; 191
    3a62:	ff 4f       	sbci	r31, 0xFF	; 255
    3a64:	60 81       	ld	r22, Z
    3a66:	71 81       	ldd	r23, Z+1	; 0x01
    3a68:	82 81       	ldd	r24, Z+2	; 0x02
    3a6a:	93 81       	ldd	r25, Z+3	; 0x03
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	4f e7       	ldi	r20, 0x7F	; 127
    3a72:	53 e4       	ldi	r21, 0x43	; 67
    3a74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a78:	18 16       	cp	r1, r24
    3a7a:	0c f0       	brlt	.+2      	; 0x3a7e <LCD_voidCreateCharacter+0xd8>
    3a7c:	7e c0       	rjmp	.+252    	; 0x3b7a <LCD_voidCreateCharacter+0x1d4>
	{
		_delay_ms(__us / 1000.0);
    3a7e:	fe 01       	movw	r30, r28
    3a80:	eb 5b       	subi	r30, 0xBB	; 187
    3a82:	ff 4f       	sbci	r31, 0xFF	; 255
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	4a e7       	ldi	r20, 0x7A	; 122
    3a92:	54 e4       	ldi	r21, 0x44	; 68
    3a94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	8c af       	std	Y+60, r24	; 0x3c
    3a9e:	9d af       	std	Y+61, r25	; 0x3d
    3aa0:	ae af       	std	Y+62, r26	; 0x3e
    3aa2:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa4:	6c ad       	ldd	r22, Y+60	; 0x3c
    3aa6:	7d ad       	ldd	r23, Y+61	; 0x3d
    3aa8:	8e ad       	ldd	r24, Y+62	; 0x3e
    3aaa:	9f ad       	ldd	r25, Y+63	; 0x3f
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	4a ef       	ldi	r20, 0xFA	; 250
    3ab2:	54 e4       	ldi	r21, 0x44	; 68
    3ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	88 af       	std	Y+56, r24	; 0x38
    3abe:	99 af       	std	Y+57, r25	; 0x39
    3ac0:	aa af       	std	Y+58, r26	; 0x3a
    3ac2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3ac4:	68 ad       	ldd	r22, Y+56	; 0x38
    3ac6:	79 ad       	ldd	r23, Y+57	; 0x39
    3ac8:	8a ad       	ldd	r24, Y+58	; 0x3a
    3aca:	9b ad       	ldd	r25, Y+59	; 0x3b
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	40 e8       	ldi	r20, 0x80	; 128
    3ad2:	5f e3       	ldi	r21, 0x3F	; 63
    3ad4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ad8:	88 23       	and	r24, r24
    3ada:	2c f4       	brge	.+10     	; 0x3ae6 <LCD_voidCreateCharacter+0x140>
		__ticks = 1;
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	9f ab       	std	Y+55, r25	; 0x37
    3ae2:	8e ab       	std	Y+54, r24	; 0x36
    3ae4:	3f c0       	rjmp	.+126    	; 0x3b64 <LCD_voidCreateCharacter+0x1be>
	else if (__tmp > 65535)
    3ae6:	68 ad       	ldd	r22, Y+56	; 0x38
    3ae8:	79 ad       	ldd	r23, Y+57	; 0x39
    3aea:	8a ad       	ldd	r24, Y+58	; 0x3a
    3aec:	9b ad       	ldd	r25, Y+59	; 0x3b
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	3f ef       	ldi	r19, 0xFF	; 255
    3af2:	4f e7       	ldi	r20, 0x7F	; 127
    3af4:	57 e4       	ldi	r21, 0x47	; 71
    3af6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3afa:	18 16       	cp	r1, r24
    3afc:	4c f5       	brge	.+82     	; 0x3b50 <LCD_voidCreateCharacter+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afe:	6c ad       	ldd	r22, Y+60	; 0x3c
    3b00:	7d ad       	ldd	r23, Y+61	; 0x3d
    3b02:	8e ad       	ldd	r24, Y+62	; 0x3e
    3b04:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e2       	ldi	r20, 0x20	; 32
    3b0c:	51 e4       	ldi	r21, 0x41	; 65
    3b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	bc 01       	movw	r22, r24
    3b18:	cd 01       	movw	r24, r26
    3b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	9f ab       	std	Y+55, r25	; 0x37
    3b24:	8e ab       	std	Y+54, r24	; 0x36
    3b26:	0f c0       	rjmp	.+30     	; 0x3b46 <LCD_voidCreateCharacter+0x1a0>
    3b28:	88 ec       	ldi	r24, 0xC8	; 200
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	9d ab       	std	Y+53, r25	; 0x35
    3b2e:	8c ab       	std	Y+52, r24	; 0x34
    3b30:	8c a9       	ldd	r24, Y+52	; 0x34
    3b32:	9d a9       	ldd	r25, Y+53	; 0x35
    3b34:	01 97       	sbiw	r24, 0x01	; 1
    3b36:	f1 f7       	brne	.-4      	; 0x3b34 <LCD_voidCreateCharacter+0x18e>
    3b38:	9d ab       	std	Y+53, r25	; 0x35
    3b3a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3c:	8e a9       	ldd	r24, Y+54	; 0x36
    3b3e:	9f a9       	ldd	r25, Y+55	; 0x37
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	9f ab       	std	Y+55, r25	; 0x37
    3b44:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b46:	8e a9       	ldd	r24, Y+54	; 0x36
    3b48:	9f a9       	ldd	r25, Y+55	; 0x37
    3b4a:	00 97       	sbiw	r24, 0x00	; 0
    3b4c:	69 f7       	brne	.-38     	; 0x3b28 <LCD_voidCreateCharacter+0x182>
    3b4e:	2d c0       	rjmp	.+90     	; 0x3baa <LCD_voidCreateCharacter+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b50:	68 ad       	ldd	r22, Y+56	; 0x38
    3b52:	79 ad       	ldd	r23, Y+57	; 0x39
    3b54:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b56:	9b ad       	ldd	r25, Y+59	; 0x3b
    3b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	9f ab       	std	Y+55, r25	; 0x37
    3b62:	8e ab       	std	Y+54, r24	; 0x36
    3b64:	8e a9       	ldd	r24, Y+54	; 0x36
    3b66:	9f a9       	ldd	r25, Y+55	; 0x37
    3b68:	9b ab       	std	Y+51, r25	; 0x33
    3b6a:	8a ab       	std	Y+50, r24	; 0x32
    3b6c:	8a a9       	ldd	r24, Y+50	; 0x32
    3b6e:	9b a9       	ldd	r25, Y+51	; 0x33
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <LCD_voidCreateCharacter+0x1ca>
    3b74:	9b ab       	std	Y+51, r25	; 0x33
    3b76:	8a ab       	std	Y+50, r24	; 0x32
    3b78:	18 c0       	rjmp	.+48     	; 0x3baa <LCD_voidCreateCharacter+0x204>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	ef 5b       	subi	r30, 0xBF	; 191
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	60 81       	ld	r22, Z
    3b82:	71 81       	ldd	r23, Z+1	; 0x01
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	93 81       	ldd	r25, Z+3	; 0x03
    3b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	fe 01       	movw	r30, r28
    3b92:	e0 5c       	subi	r30, 0xC0	; 192
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 83       	st	Z, r24
    3b98:	fe 01       	movw	r30, r28
    3b9a:	e0 5c       	subi	r30, 0xC0	; 192
    3b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9e:	80 81       	ld	r24, Z
    3ba0:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3ba2:	89 a9       	ldd	r24, Y+49	; 0x31
    3ba4:	8a 95       	dec	r24
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <LCD_voidCreateCharacter+0x1fe>
    3ba8:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(50);
	//pass u8 array[8], representing the special character, to CGRAM using a for loop

    // Loop through each byte of the custom character array and send it to the current CGRAM address.
    // The LCD's CGRAM address will auto-increment after each byte, so the next byte will go to the next row of the character.
	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    3baa:	fe 01       	movw	r30, r28
    3bac:	e7 5b       	subi	r30, 0xB7	; 183
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	10 82       	st	Z, r1
    3bb2:	d8 c0       	rjmp	.+432    	; 0x3d64 <LCD_voidCreateCharacter+0x3be>
	{
		LCD_voidSendChar(copy_Pu8CharArr[Local_u8Counter]);
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	e7 5b       	subi	r30, 0xB7	; 183
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	80 81       	ld	r24, Z
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	fe 01       	movw	r30, r28
    3bc2:	e6 5b       	subi	r30, 0xB6	; 182
    3bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc6:	80 81       	ld	r24, Z
    3bc8:	91 81       	ldd	r25, Z+1	; 0x01
    3bca:	fc 01       	movw	r30, r24
    3bcc:	e2 0f       	add	r30, r18
    3bce:	f3 1f       	adc	r31, r19
    3bd0:	80 81       	ld	r24, Z
    3bd2:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <LCD_voidSendChar>
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	a8 ec       	ldi	r26, 0xC8	; 200
    3bdc:	b2 e4       	ldi	r27, 0x42	; 66
    3bde:	8d a7       	std	Y+45, r24	; 0x2d
    3be0:	9e a7       	std	Y+46, r25	; 0x2e
    3be2:	af a7       	std	Y+47, r26	; 0x2f
    3be4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3be6:	6d a5       	ldd	r22, Y+45	; 0x2d
    3be8:	7e a5       	ldd	r23, Y+46	; 0x2e
    3bea:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bec:	98 a9       	ldd	r25, Y+48	; 0x30
    3bee:	2b ea       	ldi	r18, 0xAB	; 171
    3bf0:	3a ea       	ldi	r19, 0xAA	; 170
    3bf2:	4a e2       	ldi	r20, 0x2A	; 42
    3bf4:	50 e4       	ldi	r21, 0x40	; 64
    3bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfa:	dc 01       	movw	r26, r24
    3bfc:	cb 01       	movw	r24, r22
    3bfe:	89 a7       	std	Y+41, r24	; 0x29
    3c00:	9a a7       	std	Y+42, r25	; 0x2a
    3c02:	ab a7       	std	Y+43, r26	; 0x2b
    3c04:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3c06:	69 a5       	ldd	r22, Y+41	; 0x29
    3c08:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c0e:	20 e0       	ldi	r18, 0x00	; 0
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e8       	ldi	r20, 0x80	; 128
    3c14:	5f e3       	ldi	r21, 0x3F	; 63
    3c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1a:	88 23       	and	r24, r24
    3c1c:	1c f4       	brge	.+6      	; 0x3c24 <LCD_voidCreateCharacter+0x27e>
		__ticks = 1;
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	88 a7       	std	Y+40, r24	; 0x28
    3c22:	91 c0       	rjmp	.+290    	; 0x3d46 <LCD_voidCreateCharacter+0x3a0>
	else if (__tmp > 255)
    3c24:	69 a5       	ldd	r22, Y+41	; 0x29
    3c26:	7a a5       	ldd	r23, Y+42	; 0x2a
    3c28:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c2c:	20 e0       	ldi	r18, 0x00	; 0
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	4f e7       	ldi	r20, 0x7F	; 127
    3c32:	53 e4       	ldi	r21, 0x43	; 67
    3c34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c38:	18 16       	cp	r1, r24
    3c3a:	0c f0       	brlt	.+2      	; 0x3c3e <LCD_voidCreateCharacter+0x298>
    3c3c:	7b c0       	rjmp	.+246    	; 0x3d34 <LCD_voidCreateCharacter+0x38e>
	{
		_delay_ms(__us / 1000.0);
    3c3e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3c40:	7e a5       	ldd	r23, Y+46	; 0x2e
    3c42:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c44:	98 a9       	ldd	r25, Y+48	; 0x30
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	4a e7       	ldi	r20, 0x7A	; 122
    3c4c:	54 e4       	ldi	r21, 0x44	; 68
    3c4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	8c a3       	std	Y+36, r24	; 0x24
    3c58:	9d a3       	std	Y+37, r25	; 0x25
    3c5a:	ae a3       	std	Y+38, r26	; 0x26
    3c5c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c5e:	6c a1       	ldd	r22, Y+36	; 0x24
    3c60:	7d a1       	ldd	r23, Y+37	; 0x25
    3c62:	8e a1       	ldd	r24, Y+38	; 0x26
    3c64:	9f a1       	ldd	r25, Y+39	; 0x27
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	4a ef       	ldi	r20, 0xFA	; 250
    3c6c:	54 e4       	ldi	r21, 0x44	; 68
    3c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	88 a3       	std	Y+32, r24	; 0x20
    3c78:	99 a3       	std	Y+33, r25	; 0x21
    3c7a:	aa a3       	std	Y+34, r26	; 0x22
    3c7c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3c7e:	68 a1       	ldd	r22, Y+32	; 0x20
    3c80:	79 a1       	ldd	r23, Y+33	; 0x21
    3c82:	8a a1       	ldd	r24, Y+34	; 0x22
    3c84:	9b a1       	ldd	r25, Y+35	; 0x23
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	40 e8       	ldi	r20, 0x80	; 128
    3c8c:	5f e3       	ldi	r21, 0x3F	; 63
    3c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c92:	88 23       	and	r24, r24
    3c94:	2c f4       	brge	.+10     	; 0x3ca0 <LCD_voidCreateCharacter+0x2fa>
		__ticks = 1;
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	9f 8f       	std	Y+31, r25	; 0x1f
    3c9c:	8e 8f       	std	Y+30, r24	; 0x1e
    3c9e:	3f c0       	rjmp	.+126    	; 0x3d1e <LCD_voidCreateCharacter+0x378>
	else if (__tmp > 65535)
    3ca0:	68 a1       	ldd	r22, Y+32	; 0x20
    3ca2:	79 a1       	ldd	r23, Y+33	; 0x21
    3ca4:	8a a1       	ldd	r24, Y+34	; 0x22
    3ca6:	9b a1       	ldd	r25, Y+35	; 0x23
    3ca8:	20 e0       	ldi	r18, 0x00	; 0
    3caa:	3f ef       	ldi	r19, 0xFF	; 255
    3cac:	4f e7       	ldi	r20, 0x7F	; 127
    3cae:	57 e4       	ldi	r21, 0x47	; 71
    3cb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cb4:	18 16       	cp	r1, r24
    3cb6:	4c f5       	brge	.+82     	; 0x3d0a <LCD_voidCreateCharacter+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb8:	6c a1       	ldd	r22, Y+36	; 0x24
    3cba:	7d a1       	ldd	r23, Y+37	; 0x25
    3cbc:	8e a1       	ldd	r24, Y+38	; 0x26
    3cbe:	9f a1       	ldd	r25, Y+39	; 0x27
    3cc0:	20 e0       	ldi	r18, 0x00	; 0
    3cc2:	30 e0       	ldi	r19, 0x00	; 0
    3cc4:	40 e2       	ldi	r20, 0x20	; 32
    3cc6:	51 e4       	ldi	r21, 0x41	; 65
    3cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ccc:	dc 01       	movw	r26, r24
    3cce:	cb 01       	movw	r24, r22
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd8:	dc 01       	movw	r26, r24
    3cda:	cb 01       	movw	r24, r22
    3cdc:	9f 8f       	std	Y+31, r25	; 0x1f
    3cde:	8e 8f       	std	Y+30, r24	; 0x1e
    3ce0:	0f c0       	rjmp	.+30     	; 0x3d00 <LCD_voidCreateCharacter+0x35a>
    3ce2:	88 ec       	ldi	r24, 0xC8	; 200
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	9d 8f       	std	Y+29, r25	; 0x1d
    3ce8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3cea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3cec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3cee:	01 97       	sbiw	r24, 0x01	; 1
    3cf0:	f1 f7       	brne	.-4      	; 0x3cee <LCD_voidCreateCharacter+0x348>
    3cf2:	9d 8f       	std	Y+29, r25	; 0x1d
    3cf4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3cf8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3cfa:	01 97       	sbiw	r24, 0x01	; 1
    3cfc:	9f 8f       	std	Y+31, r25	; 0x1f
    3cfe:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d02:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d04:	00 97       	sbiw	r24, 0x00	; 0
    3d06:	69 f7       	brne	.-38     	; 0x3ce2 <LCD_voidCreateCharacter+0x33c>
    3d08:	24 c0       	rjmp	.+72     	; 0x3d52 <LCD_voidCreateCharacter+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d0a:	68 a1       	ldd	r22, Y+32	; 0x20
    3d0c:	79 a1       	ldd	r23, Y+33	; 0x21
    3d0e:	8a a1       	ldd	r24, Y+34	; 0x22
    3d10:	9b a1       	ldd	r25, Y+35	; 0x23
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	9f 8f       	std	Y+31, r25	; 0x1f
    3d1c:	8e 8f       	std	Y+30, r24	; 0x1e
    3d1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3d20:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3d22:	9b 8f       	std	Y+27, r25	; 0x1b
    3d24:	8a 8f       	std	Y+26, r24	; 0x1a
    3d26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3d28:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3d2a:	01 97       	sbiw	r24, 0x01	; 1
    3d2c:	f1 f7       	brne	.-4      	; 0x3d2a <LCD_voidCreateCharacter+0x384>
    3d2e:	9b 8f       	std	Y+27, r25	; 0x1b
    3d30:	8a 8f       	std	Y+26, r24	; 0x1a
    3d32:	0f c0       	rjmp	.+30     	; 0x3d52 <LCD_voidCreateCharacter+0x3ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3d34:	69 a5       	ldd	r22, Y+41	; 0x29
    3d36:	7a a5       	ldd	r23, Y+42	; 0x2a
    3d38:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d3a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	88 a7       	std	Y+40, r24	; 0x28
    3d46:	88 a5       	ldd	r24, Y+40	; 0x28
    3d48:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3d4a:	89 8d       	ldd	r24, Y+25	; 0x19
    3d4c:	8a 95       	dec	r24
    3d4e:	f1 f7       	brne	.-4      	; 0x3d4c <LCD_voidCreateCharacter+0x3a6>
    3d50:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(50);
	//pass u8 array[8], representing the special character, to CGRAM using a for loop

    // Loop through each byte of the custom character array and send it to the current CGRAM address.
    // The LCD's CGRAM address will auto-increment after each byte, so the next byte will go to the next row of the character.
	for(Local_u8Counter = 0; Local_u8Counter < 8; Local_u8Counter++)
    3d52:	de 01       	movw	r26, r28
    3d54:	a7 5b       	subi	r26, 0xB7	; 183
    3d56:	bf 4f       	sbci	r27, 0xFF	; 255
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e7 5b       	subi	r30, 0xB7	; 183
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	80 81       	ld	r24, Z
    3d60:	8f 5f       	subi	r24, 0xFF	; 255
    3d62:	8c 93       	st	X, r24
    3d64:	fe 01       	movw	r30, r28
    3d66:	e7 5b       	subi	r30, 0xB7	; 183
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	88 30       	cpi	r24, 0x08	; 8
    3d6e:	08 f4       	brcc	.+2      	; 0x3d72 <LCD_voidCreateCharacter+0x3cc>
    3d70:	21 cf       	rjmp	.-446    	; 0x3bb4 <LCD_voidCreateCharacter+0x20e>

	//on exit go back to DDRAM by setting DDRAM instruction

    // After storing the custom character, switch back to the Display Data RAM (DDRAM) address mode.
    // This is typically done using the 0x80 command for LCDs.
	LCD_voidSendCmnd(0x80);
    3d72:	80 e8       	ldi	r24, 0x80	; 128
    3d74:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <LCD_voidSendCmnd>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	a8 ec       	ldi	r26, 0xC8	; 200
    3d7e:	b2 e4       	ldi	r27, 0x42	; 66
    3d80:	8d 8b       	std	Y+21, r24	; 0x15
    3d82:	9e 8b       	std	Y+22, r25	; 0x16
    3d84:	af 8b       	std	Y+23, r26	; 0x17
    3d86:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3d88:	6d 89       	ldd	r22, Y+21	; 0x15
    3d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d90:	2b ea       	ldi	r18, 0xAB	; 171
    3d92:	3a ea       	ldi	r19, 0xAA	; 170
    3d94:	4a e2       	ldi	r20, 0x2A	; 42
    3d96:	50 e4       	ldi	r21, 0x40	; 64
    3d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	89 8b       	std	Y+17, r24	; 0x11
    3da2:	9a 8b       	std	Y+18, r25	; 0x12
    3da4:	ab 8b       	std	Y+19, r26	; 0x13
    3da6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3da8:	69 89       	ldd	r22, Y+17	; 0x11
    3daa:	7a 89       	ldd	r23, Y+18	; 0x12
    3dac:	8b 89       	ldd	r24, Y+19	; 0x13
    3dae:	9c 89       	ldd	r25, Y+20	; 0x14
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	40 e8       	ldi	r20, 0x80	; 128
    3db6:	5f e3       	ldi	r21, 0x3F	; 63
    3db8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3dbc:	88 23       	and	r24, r24
    3dbe:	1c f4       	brge	.+6      	; 0x3dc6 <LCD_voidCreateCharacter+0x420>
		__ticks = 1;
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	88 8b       	std	Y+16, r24	; 0x10
    3dc4:	91 c0       	rjmp	.+290    	; 0x3ee8 <LCD_voidCreateCharacter+0x542>
	else if (__tmp > 255)
    3dc6:	69 89       	ldd	r22, Y+17	; 0x11
    3dc8:	7a 89       	ldd	r23, Y+18	; 0x12
    3dca:	8b 89       	ldd	r24, Y+19	; 0x13
    3dcc:	9c 89       	ldd	r25, Y+20	; 0x14
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	4f e7       	ldi	r20, 0x7F	; 127
    3dd4:	53 e4       	ldi	r21, 0x43	; 67
    3dd6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3dda:	18 16       	cp	r1, r24
    3ddc:	0c f0       	brlt	.+2      	; 0x3de0 <LCD_voidCreateCharacter+0x43a>
    3dde:	7b c0       	rjmp	.+246    	; 0x3ed6 <LCD_voidCreateCharacter+0x530>
	{
		_delay_ms(__us / 1000.0);
    3de0:	6d 89       	ldd	r22, Y+21	; 0x15
    3de2:	7e 89       	ldd	r23, Y+22	; 0x16
    3de4:	8f 89       	ldd	r24, Y+23	; 0x17
    3de6:	98 8d       	ldd	r25, Y+24	; 0x18
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	4a e7       	ldi	r20, 0x7A	; 122
    3dee:	54 e4       	ldi	r21, 0x44	; 68
    3df0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	8c 87       	std	Y+12, r24	; 0x0c
    3dfa:	9d 87       	std	Y+13, r25	; 0x0d
    3dfc:	ae 87       	std	Y+14, r26	; 0x0e
    3dfe:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e00:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e02:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e04:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e06:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	4a ef       	ldi	r20, 0xFA	; 250
    3e0e:	54 e4       	ldi	r21, 0x44	; 68
    3e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e14:	dc 01       	movw	r26, r24
    3e16:	cb 01       	movw	r24, r22
    3e18:	88 87       	std	Y+8, r24	; 0x08
    3e1a:	99 87       	std	Y+9, r25	; 0x09
    3e1c:	aa 87       	std	Y+10, r26	; 0x0a
    3e1e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3e20:	68 85       	ldd	r22, Y+8	; 0x08
    3e22:	79 85       	ldd	r23, Y+9	; 0x09
    3e24:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e26:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e8       	ldi	r20, 0x80	; 128
    3e2e:	5f e3       	ldi	r21, 0x3F	; 63
    3e30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e34:	88 23       	and	r24, r24
    3e36:	2c f4       	brge	.+10     	; 0x3e42 <LCD_voidCreateCharacter+0x49c>
		__ticks = 1;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	9f 83       	std	Y+7, r25	; 0x07
    3e3e:	8e 83       	std	Y+6, r24	; 0x06
    3e40:	3f c0       	rjmp	.+126    	; 0x3ec0 <LCD_voidCreateCharacter+0x51a>
	else if (__tmp > 65535)
    3e42:	68 85       	ldd	r22, Y+8	; 0x08
    3e44:	79 85       	ldd	r23, Y+9	; 0x09
    3e46:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e48:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e4a:	20 e0       	ldi	r18, 0x00	; 0
    3e4c:	3f ef       	ldi	r19, 0xFF	; 255
    3e4e:	4f e7       	ldi	r20, 0x7F	; 127
    3e50:	57 e4       	ldi	r21, 0x47	; 71
    3e52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e56:	18 16       	cp	r1, r24
    3e58:	4c f5       	brge	.+82     	; 0x3eac <LCD_voidCreateCharacter+0x506>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e5a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3e5c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3e5e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e60:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	40 e2       	ldi	r20, 0x20	; 32
    3e68:	51 e4       	ldi	r21, 0x41	; 65
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	bc 01       	movw	r22, r24
    3e74:	cd 01       	movw	r24, r26
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	9f 83       	std	Y+7, r25	; 0x07
    3e80:	8e 83       	std	Y+6, r24	; 0x06
    3e82:	0f c0       	rjmp	.+30     	; 0x3ea2 <LCD_voidCreateCharacter+0x4fc>
    3e84:	88 ec       	ldi	r24, 0xC8	; 200
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	9d 83       	std	Y+5, r25	; 0x05
    3e8a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <LCD_voidCreateCharacter+0x4ea>
    3e94:	9d 83       	std	Y+5, r25	; 0x05
    3e96:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e98:	8e 81       	ldd	r24, Y+6	; 0x06
    3e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	9f 83       	std	Y+7, r25	; 0x07
    3ea0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	69 f7       	brne	.-38     	; 0x3e84 <LCD_voidCreateCharacter+0x4de>
    3eaa:	24 c0       	rjmp	.+72     	; 0x3ef4 <LCD_voidCreateCharacter+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eac:	68 85       	ldd	r22, Y+8	; 0x08
    3eae:	79 85       	ldd	r23, Y+9	; 0x09
    3eb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3eb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	9f 83       	std	Y+7, r25	; 0x07
    3ebe:	8e 83       	std	Y+6, r24	; 0x06
    3ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ec4:	9b 83       	std	Y+3, r25	; 0x03
    3ec6:	8a 83       	std	Y+2, r24	; 0x02
    3ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eca:	9b 81       	ldd	r25, Y+3	; 0x03
    3ecc:	01 97       	sbiw	r24, 0x01	; 1
    3ece:	f1 f7       	brne	.-4      	; 0x3ecc <LCD_voidCreateCharacter+0x526>
    3ed0:	9b 83       	std	Y+3, r25	; 0x03
    3ed2:	8a 83       	std	Y+2, r24	; 0x02
    3ed4:	0f c0       	rjmp	.+30     	; 0x3ef4 <LCD_voidCreateCharacter+0x54e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3ed6:	69 89       	ldd	r22, Y+17	; 0x11
    3ed8:	7a 89       	ldd	r23, Y+18	; 0x12
    3eda:	8b 89       	ldd	r24, Y+19	; 0x13
    3edc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	88 8b       	std	Y+16, r24	; 0x10
    3ee8:	88 89       	ldd	r24, Y+16	; 0x10
    3eea:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	8a 95       	dec	r24
    3ef0:	f1 f7       	brne	.-4      	; 0x3eee <LCD_voidCreateCharacter+0x548>
    3ef2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(100);
}
    3ef4:	c4 5b       	subi	r28, 0xB4	; 180
    3ef6:	df 4f       	sbci	r29, 0xFF	; 255
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	f8 94       	cli
    3efc:	de bf       	out	0x3e, r29	; 62
    3efe:	0f be       	out	0x3f, r0	; 63
    3f00:	cd bf       	out	0x3d, r28	; 61
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	1f 91       	pop	r17
    3f08:	0f 91       	pop	r16
    3f0a:	08 95       	ret

00003f0c <__udivmodhi4>:
    3f0c:	aa 1b       	sub	r26, r26
    3f0e:	bb 1b       	sub	r27, r27
    3f10:	51 e1       	ldi	r21, 0x11	; 17
    3f12:	07 c0       	rjmp	.+14     	; 0x3f22 <__udivmodhi4_ep>

00003f14 <__udivmodhi4_loop>:
    3f14:	aa 1f       	adc	r26, r26
    3f16:	bb 1f       	adc	r27, r27
    3f18:	a6 17       	cp	r26, r22
    3f1a:	b7 07       	cpc	r27, r23
    3f1c:	10 f0       	brcs	.+4      	; 0x3f22 <__udivmodhi4_ep>
    3f1e:	a6 1b       	sub	r26, r22
    3f20:	b7 0b       	sbc	r27, r23

00003f22 <__udivmodhi4_ep>:
    3f22:	88 1f       	adc	r24, r24
    3f24:	99 1f       	adc	r25, r25
    3f26:	5a 95       	dec	r21
    3f28:	a9 f7       	brne	.-22     	; 0x3f14 <__udivmodhi4_loop>
    3f2a:	80 95       	com	r24
    3f2c:	90 95       	com	r25
    3f2e:	bc 01       	movw	r22, r24
    3f30:	cd 01       	movw	r24, r26
    3f32:	08 95       	ret

00003f34 <__divmodsi4>:
    3f34:	97 fb       	bst	r25, 7
    3f36:	09 2e       	mov	r0, r25
    3f38:	05 26       	eor	r0, r21
    3f3a:	0e d0       	rcall	.+28     	; 0x3f58 <__divmodsi4_neg1>
    3f3c:	57 fd       	sbrc	r21, 7
    3f3e:	04 d0       	rcall	.+8      	; 0x3f48 <__divmodsi4_neg2>
    3f40:	14 d0       	rcall	.+40     	; 0x3f6a <__udivmodsi4>
    3f42:	0a d0       	rcall	.+20     	; 0x3f58 <__divmodsi4_neg1>
    3f44:	00 1c       	adc	r0, r0
    3f46:	38 f4       	brcc	.+14     	; 0x3f56 <__divmodsi4_exit>

00003f48 <__divmodsi4_neg2>:
    3f48:	50 95       	com	r21
    3f4a:	40 95       	com	r20
    3f4c:	30 95       	com	r19
    3f4e:	21 95       	neg	r18
    3f50:	3f 4f       	sbci	r19, 0xFF	; 255
    3f52:	4f 4f       	sbci	r20, 0xFF	; 255
    3f54:	5f 4f       	sbci	r21, 0xFF	; 255

00003f56 <__divmodsi4_exit>:
    3f56:	08 95       	ret

00003f58 <__divmodsi4_neg1>:
    3f58:	f6 f7       	brtc	.-4      	; 0x3f56 <__divmodsi4_exit>
    3f5a:	90 95       	com	r25
    3f5c:	80 95       	com	r24
    3f5e:	70 95       	com	r23
    3f60:	61 95       	neg	r22
    3f62:	7f 4f       	sbci	r23, 0xFF	; 255
    3f64:	8f 4f       	sbci	r24, 0xFF	; 255
    3f66:	9f 4f       	sbci	r25, 0xFF	; 255
    3f68:	08 95       	ret

00003f6a <__udivmodsi4>:
    3f6a:	a1 e2       	ldi	r26, 0x21	; 33
    3f6c:	1a 2e       	mov	r1, r26
    3f6e:	aa 1b       	sub	r26, r26
    3f70:	bb 1b       	sub	r27, r27
    3f72:	fd 01       	movw	r30, r26
    3f74:	0d c0       	rjmp	.+26     	; 0x3f90 <__udivmodsi4_ep>

00003f76 <__udivmodsi4_loop>:
    3f76:	aa 1f       	adc	r26, r26
    3f78:	bb 1f       	adc	r27, r27
    3f7a:	ee 1f       	adc	r30, r30
    3f7c:	ff 1f       	adc	r31, r31
    3f7e:	a2 17       	cp	r26, r18
    3f80:	b3 07       	cpc	r27, r19
    3f82:	e4 07       	cpc	r30, r20
    3f84:	f5 07       	cpc	r31, r21
    3f86:	20 f0       	brcs	.+8      	; 0x3f90 <__udivmodsi4_ep>
    3f88:	a2 1b       	sub	r26, r18
    3f8a:	b3 0b       	sbc	r27, r19
    3f8c:	e4 0b       	sbc	r30, r20
    3f8e:	f5 0b       	sbc	r31, r21

00003f90 <__udivmodsi4_ep>:
    3f90:	66 1f       	adc	r22, r22
    3f92:	77 1f       	adc	r23, r23
    3f94:	88 1f       	adc	r24, r24
    3f96:	99 1f       	adc	r25, r25
    3f98:	1a 94       	dec	r1
    3f9a:	69 f7       	brne	.-38     	; 0x3f76 <__udivmodsi4_loop>
    3f9c:	60 95       	com	r22
    3f9e:	70 95       	com	r23
    3fa0:	80 95       	com	r24
    3fa2:	90 95       	com	r25
    3fa4:	9b 01       	movw	r18, r22
    3fa6:	ac 01       	movw	r20, r24
    3fa8:	bd 01       	movw	r22, r26
    3faa:	cf 01       	movw	r24, r30
    3fac:	08 95       	ret

00003fae <__prologue_saves__>:
    3fae:	2f 92       	push	r2
    3fb0:	3f 92       	push	r3
    3fb2:	4f 92       	push	r4
    3fb4:	5f 92       	push	r5
    3fb6:	6f 92       	push	r6
    3fb8:	7f 92       	push	r7
    3fba:	8f 92       	push	r8
    3fbc:	9f 92       	push	r9
    3fbe:	af 92       	push	r10
    3fc0:	bf 92       	push	r11
    3fc2:	cf 92       	push	r12
    3fc4:	df 92       	push	r13
    3fc6:	ef 92       	push	r14
    3fc8:	ff 92       	push	r15
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	ca 1b       	sub	r28, r26
    3fd8:	db 0b       	sbc	r29, r27
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	09 94       	ijmp

00003fe6 <__epilogue_restores__>:
    3fe6:	2a 88       	ldd	r2, Y+18	; 0x12
    3fe8:	39 88       	ldd	r3, Y+17	; 0x11
    3fea:	48 88       	ldd	r4, Y+16	; 0x10
    3fec:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fee:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ff0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ff2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ff4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ff6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ff8:	b9 84       	ldd	r11, Y+9	; 0x09
    3ffa:	c8 84       	ldd	r12, Y+8	; 0x08
    3ffc:	df 80       	ldd	r13, Y+7	; 0x07
    3ffe:	ee 80       	ldd	r14, Y+6	; 0x06
    4000:	fd 80       	ldd	r15, Y+5	; 0x05
    4002:	0c 81       	ldd	r16, Y+4	; 0x04
    4004:	1b 81       	ldd	r17, Y+3	; 0x03
    4006:	aa 81       	ldd	r26, Y+2	; 0x02
    4008:	b9 81       	ldd	r27, Y+1	; 0x01
    400a:	ce 0f       	add	r28, r30
    400c:	d1 1d       	adc	r29, r1
    400e:	0f b6       	in	r0, 0x3f	; 63
    4010:	f8 94       	cli
    4012:	de bf       	out	0x3e, r29	; 62
    4014:	0f be       	out	0x3f, r0	; 63
    4016:	cd bf       	out	0x3d, r28	; 61
    4018:	ed 01       	movw	r28, r26
    401a:	08 95       	ret

0000401c <_exit>:
    401c:	f8 94       	cli

0000401e <__stop_program>:
    401e:	ff cf       	rjmp	.-2      	; 0x401e <__stop_program>
